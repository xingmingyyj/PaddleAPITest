paddle.Tensor.__add__(Tensor([1, 22, 1, 5, 1, 2],"float32"), Tensor([610081, 22, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__getitem__(Tensor([134217729, 4, 4],"int64"), slice(None,None,-2), )
paddle.Tensor.__getitem__(Tensor([2147483648, 2],"float32"), tuple(slice(None,None,None),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([2147483649],"float64"), slice(-2,None,-1), )
paddle.Tensor.__getitem__(Tensor([2147483649],"int64"), slice(None,None,-1), )
paddle.Tensor.__getitem__(Tensor([3, 3, 477218589],"float32"), slice(None,None,-1), )
paddle.Tensor.__getitem__(Tensor([3, 3, 477218589],"float32"), tuple(slice(1,-1,None),slice(0,2,None),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([3, 3, 477218589],"float32"), tuple(slice(None,None,-1),slice(None,1,None),slice(None,-1,None),), )
paddle.Tensor.__getitem__(Tensor([3, 3, 477218589],"float32"), tuple(slice(None,None,-1),slice(None,None,-1),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([3, 477218589, 3],"float32"), slice(None,None,-1), )
paddle.Tensor.__getitem__(Tensor([3, 477218589, 3],"float32"), tuple(slice(1,-1,None),slice(0,2,None),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([3, 477218589, 3],"float32"), tuple(slice(None,-1,None),slice(None,None,-1),slice(-1,None,None),), )
paddle.Tensor.__getitem__(Tensor([3, 477218589, 3],"float32"), tuple(slice(None,None,-1),slice(None,1,None),slice(None,-1,None),), )
paddle.Tensor.__getitem__(Tensor([3, 477218589, 3],"float32"), tuple(slice(None,None,-1),slice(None,None,-1),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([3480525, 1234],"float32"), slice(None,None,-1), )
paddle.Tensor.__getitem__(Tensor([4294967295, 1],"float32"), tuple(slice(None,None,None),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([477218589, 3, 3],"float32"), slice(None,None,-1), )
paddle.Tensor.__getitem__(Tensor([477218589, 3, 3],"float32"), tuple(slice(1,-1,None),slice(0,2,None),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([477218589, 3, 3],"float32"), tuple(slice(None,None,-1),slice(None,1,None),slice(None,-1,None),), )
paddle.Tensor.__getitem__(Tensor([477218589, 3, 3],"float32"), tuple(slice(None,None,-1),slice(None,None,-1),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([5, 107374183, 4],"int64"), slice(None,None,-2), )
paddle.Tensor.__getitem__(Tensor([5, 4, 107374183],"int64"), slice(None,None,-2), )
paddle.Tensor.__getitem__(Tensor([5, 4, 3, 35791395],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(-1,-3,-3),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 3, 35791395],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(-2,-3,-2),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(1,-3,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(1,-3,-2),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(1,-3,-3),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,-2,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,-2,-2),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,-2,-3),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,-3,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,-3,-2),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,-3,-3),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,-2,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,-2,-2),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,-2,-3),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,-3,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,-3,-2),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 4, 53687092, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,-3,-3),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([5, 858993459],"float32"), tuple(slice(None,None,None),slice(None,None,-1),), )
paddle.Tensor.__getitem__(Tensor([512, 8388608],"float32"), slice(None,None,-1), )
paddle.Tensor.__getitem__(Tensor([89478486, 4, 3, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(-1,None,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([89478486, 4, 3, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(2,None,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([89478486, 4, 3, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(3,None,-1),slice(None,None,None),), )
paddle.Tensor.__getitem__(Tensor([89478486, 4, 3, 2],"int64"), tuple(slice(None,None,None),slice(None,None,None),slice(None,None,-1),slice(None,None,None),), )
paddle.Tensor.__gt__(Tensor([1, 4294967297],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([1073741825, 4],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([119304648, 3, 12],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([1431655766, 3],"float16"), 0.0001, )
paddle.Tensor.__gt__(Tensor([2, 1073741825, 2],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([2, 178956971, 12],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([2, 2147483649],"float16"), 0.0001, )
paddle.Tensor.__gt__(Tensor([2, 3, 715827883],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([2, 536870913, 4],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([2147483649, 2],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([357913942, 12],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([357913942, 3, 4],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([4294967297],"float16"), 1e-05, )
paddle.Tensor.__gt__(Tensor([715827883, 3, 2],"float16"), 1e-05, )
paddle.Tensor.__lt__(Tensor([4294967297, 1],"float16"), 1e-07, )
paddle.Tensor.__lt__(Tensor([42949673, 100],"float16"), 1e-07, )
paddle.Tensor.__matmul__(Tensor([7158279, 100, 6],"float16"), Tensor([1, 6, 6],"float16"), )
paddle.Tensor.__mod__(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__mod__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 1, 27356480, 157],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 1, 29620465, 145],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 1, 38008561, 113],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 1, 39403370, 109],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 25414008, 1, 169],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 27356480, 1, 157],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 29620465, 1, 145],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 38008561, 1, 113],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([1, 39403370, 1, 109],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([25414008, 1, 1, 169],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([27356480, 1, 1, 157],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([29620465, 1, 1, 145],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([38008561, 1, 1, 113],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 1, 1],"bool"), Tensor([39403370, 1, 1, 109],"bool"), )
paddle.Tensor.__mul__(Tensor([1, 1, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 1, 536870913, 8],"float16"), Tensor([1, 1, 1, 8],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 1, 536870913, 8],"float16"), Tensor([1, 1, 536870913, 8],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 1, 8, 536870913],"float16"), Tensor([1, 1, 1, 536870913],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 1024, 32, 131073],"bfloat16"), Tensor([1, 1024, 1, 131073],"bfloat16"), )
paddle.Tensor.__mul__(Tensor([1, 1024, 32769, 128],"bfloat16"), Tensor([1, 1024, 1, 128],"bfloat16"), )
paddle.Tensor.__mul__(Tensor([1, 1048577, 32, 128],"bfloat16"), Tensor([1, 1048577, 1, 128],"bfloat16"), )
paddle.Tensor.__mul__(Tensor([1, 107374183, 5, 2, 4],"float16"), Tensor([1, 107374183, 5, 2, 4],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 13421773, 320],"float16"), Tensor([1, 13421773, 320],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 1],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 2, 2147483649],"float16"), Tensor([1, 2, 2147483649],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 2, 320],"float16"), Tensor([6710887, 2, 320],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 22817014, 100],"float32"), Tensor([1, 22817014, 1],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 3, 178956971, 2, 4],"float16"), Tensor([1, 3, 178956971, 2, 4],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 3, 5, 2, 143165577],"float16"), Tensor([1, 3, 5, 2, 143165577],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 3, 5, 2, 4],"float16"), Tensor([35791395, 3, 5, 2, 4],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 3, 5, 71582789, 4],"float16"), Tensor([1, 3, 5, 71582789, 4],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 4294967297],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 5592406, 768],"float16"), Tensor([768],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 5592406, 768],"float32"), Tensor([768],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 67108864, 64],"float16"), Tensor([64],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 67108864, 64],"float32"), Tensor([64],"float32"), )
paddle.Tensor.__mul__(Tensor([1, 67108865, 64],"float16"), Tensor([64],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 67108865, 8, 8],"float16"), Tensor([1, 1, 1, 8],"float16"), )
paddle.Tensor.__mul__(Tensor([1, 67108865, 8, 8],"float16"), Tensor([1, 67108865, 1, 8],"float16"), )
paddle.Tensor.__mul__(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), )
paddle.Tensor.__mul__(Tensor([1025, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 1, 128],"bfloat16"), )
paddle.Tensor.__mul__(Tensor([1025, 1024, 32, 128],"bfloat16"), Tensor([1025, 1024, 1, 128],"bfloat16"), )
paddle.Tensor.__mul__(Tensor([10737419, 4, 10, 10],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__mul__(Tensor([128, 1, 1],"float32"), Tensor([124, 128, 2568, 56],"float32"), )
paddle.Tensor.__mul__(Tensor([1362617],"float16"), Tensor([16, 197, 1362617],"float16"), )
paddle.Tensor.__mul__(Tensor([192, 1, 1],"float16"), Tensor([128, 192, 28, 6242],"float16"), )
paddle.Tensor.__mul__(Tensor([192, 1, 1],"float16"), Tensor([128, 192, 6242, 28],"float16"), )
paddle.Tensor.__mul__(Tensor([192, 1, 1],"float16"), Tensor([28533, 192, 28, 28],"float16"), )
paddle.Tensor.__mul__(Tensor([192],"float16"), Tensor([128, 28, 6242, 192],"float16"), )
paddle.Tensor.__mul__(Tensor([192],"float16"), Tensor([128, 6242, 28, 192],"float16"), )
paddle.Tensor.__mul__(Tensor([192],"float16"), Tensor([28533, 28, 28, 192],"float16"), )
paddle.Tensor.__mul__(Tensor([2, 3, 32, 22369622],"float16"), Tensor([3, 32, 22369622],"float16"), )
paddle.Tensor.__mul__(Tensor([2, 3, 4, 2, 495161, 4, 2, 3, 4],"float32"), Tensor([2, 3, 4, 2, 495161, 4, 2, 3, 4],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 3, 5592406, 128],"float16"), Tensor([3, 5592406, 128],"float16"), )
paddle.Tensor.__mul__(Tensor([2, 524289, 32, 128],"float16"), Tensor([524289, 32, 128],"float16"), )
paddle.Tensor.__mul__(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), )
paddle.Tensor.__mul__(Tensor([349526, 3, 32, 128],"float16"), Tensor([3, 32, 128],"float16"), )
paddle.Tensor.__mul__(Tensor([35, 1917397, 64],"float16"), 1.4142135623730951, )
paddle.Tensor.__mul__(Tensor([35791395, 3, 5, 2, 4],"float16"), Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.Tensor.__mul__(Tensor([35791395, 3, 5, 2, 4],"float16"), Tensor([35791395, 3, 5, 2, 4],"float16"), )
paddle.Tensor.__mul__(Tensor([42800, 1, 1],"float16"), Tensor([128, 42800, 28, 28],"float16"), )
paddle.Tensor.__mul__(Tensor([42800],"float16"), Tensor([128, 28, 28, 42800],"float16"), )
paddle.Tensor.__mul__(Tensor([4294967297, 1],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__mul__(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__mul__(Tensor([5592406, 1, 768],"float16"), Tensor([768],"float16"), )
paddle.Tensor.__mul__(Tensor([5592406, 1, 768],"float32"), Tensor([768],"float32"), )
paddle.Tensor.__mul__(Tensor([67108864, 1, 64],"float16"), Tensor([64],"float16"), )
paddle.Tensor.__mul__(Tensor([67108864, 1, 64],"float32"), Tensor([64],"float32"), )
paddle.Tensor.__mul__(Tensor([67108865, 1, 64],"float16"), Tensor([64],"float16"), )
paddle.Tensor.__mul__(Tensor([67108865, 1, 8, 8],"float16"), Tensor([1, 1, 1, 8],"float16"), )
paddle.Tensor.__mul__(Tensor([67108865, 1, 8, 8],"float16"), Tensor([67108865, 1, 1, 8],"float16"), )
paddle.Tensor.__mul__(Tensor([6710887, 2, 320],"float16"), Tensor([1, 2, 320],"float16"), )
paddle.Tensor.__mul__(Tensor([6710887, 2, 320],"float16"), Tensor([6710887, 2, 320],"float16"), )
paddle.Tensor.__mul__(Tensor([71303169, 1, 32],"float32"), Tensor([32],"float32"), )
paddle.Tensor.__mul__(Tensor([768],"float16"), Tensor([16, 349526, 768],"float16"), )
paddle.Tensor.__mul__(Tensor([768],"float16"), Tensor([28388, 197, 768],"float16"), )
paddle.Tensor.__mul__(Tensor([8, 4, 10, 13421773],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__mul__(Tensor([8, 4, 13421773, 10],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__mul__(Tensor([8, 5368710, 10, 10],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__rmod__(Tensor([190141782, 3, 4],"float32"), Tensor([190141782, 3, 4],"float32"), )
paddle.Tensor.__rmod__(Tensor([2, 285212673, 4],"float32"), Tensor([2, 285212673, 4],"float32"), )
paddle.Tensor.__rmod__(Tensor([2, 3, 380283564],"float32"), Tensor([2, 3, 380283564],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 10285, 221848],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 2281701379, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 24276, 93991],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 27216, 83837],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 30324, 75245],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 33600, 67908],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 221848, 10285, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 67908, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 75245, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 83837, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 93991, 24276, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([221848, 1, 10285, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([67908, 1, 33600, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([75245, 1, 30324, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([83837, 1, 27216, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1, 1],"float32"), Tensor([93991, 1, 24276, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 10285],"float32"), Tensor([1, 221848, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 10285],"float32"), Tensor([221848, 1, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1],"float32"), Tensor([1, 2281701379, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 1],"float32"), Tensor([2281701379, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 2281701379, 1],"float32"), Tensor([1, 1, 2281701379, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 24276],"float32"), Tensor([1, 93991, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 24276],"float32"), Tensor([93991, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 27216],"float32"), Tensor([1, 83837, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1, 27216],"float32"), Tensor([83837, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1001],"float32"), Tensor([2279422, 1001],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1002],"float32"), Tensor([2277148, 1002],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1004],"float32"), Tensor([2272611, 1004],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 100],"float16"), Tensor([42949673, 100],"float16"), )
paddle.Tensor.__sub__(Tensor([1, 10285],"float32"), Tensor([221848, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 157811, 27216],"float32"), Tensor([1, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 176923, 24276],"float32"), Tensor([1, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2, 2, 1073741825],"float16"), Tensor([1, 2, 2, 1073741825],"float16"), )
paddle.Tensor.__sub__(Tensor([1, 2, 2, 32],"float16"), Tensor([33554433, 2, 2, 32],"float16"), )
paddle.Tensor.__sub__(Tensor([1, 2, 67108865, 32],"float16"), Tensor([1, 2, 67108865, 32],"float16"), )
paddle.Tensor.__sub__(Tensor([1, 221848, 10285],"float32"), Tensor([1, 221848, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2281701379, 1],"float32"), Tensor([1, 2281701379, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 29826162, 144],"float32"), Tensor([1, 29826162, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 3, 1398102, 1024],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 3, 224, 6391321],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 3, 6391321, 224],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 3, 686, 2086962],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 417596, 10285],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 4294967297],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.Tensor.__sub__(Tensor([1, 67108865, 2, 32],"float16"), Tensor([1, 67108865, 2, 32],"float16"), )
paddle.Tensor.__sub__(Tensor([1, 83837, 27216],"float32"), Tensor([1, 83837, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 93991, 24276],"float32"), Tensor([1, 93991, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), )
paddle.Tensor.__sub__(Tensor([10164, 14031],"float32"), Tensor([16, 10164, 14031],"float32"), )
paddle.Tensor.__sub__(Tensor([10164, 2],"float32"), Tensor([112245, 10164, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([1073741824, 2, 1, 2],"float32"), Tensor([2, 1, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([10],"float32"), Tensor([228170138, 10],"float32"), )
paddle.Tensor.__sub__(Tensor([11109, 2],"float32"), Tensor([102697, 11109, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([11930465, 6, 3, 4, 1, 5],"float16"), Tensor([11930465, 6, 3, 4, 1, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([12, 118839, 40, 40, 1],"float32"), Tensor([12, 118839, 40, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 1901418, 10, 10, 1],"float32"), Tensor([12, 1901418, 10, 10, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 10, 10, 1193047],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 10, 6338060, 1],"float32"), Tensor([12, 3, 10, 6338060, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 1584515, 40, 1],"float32"), Tensor([12, 3, 1584515, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 20, 158452],"float32"), Tensor([12, 3, 20, 20, 158452],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 158452],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 20, 298262],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 20, 3169030, 1],"float32"), Tensor([12, 3, 20, 3169030, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 3169030, 20, 1],"float32"), Tensor([12, 3, 3169030, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 1584515, 1],"float32"), Tensor([12, 3, 40, 1584515, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 40, 1],"float32"), Tensor([12, 3, 40, 40, 39613],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 40, 39613],"float32"), Tensor([12, 3, 40, 40, 39613],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 40, 40, 74566],"float32"), Tensor([12, 3, 40, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 3, 6338060, 10, 1],"float32"), Tensor([12, 3, 6338060, 10, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([12, 475355, 20, 20, 1],"float32"), Tensor([12, 475355, 20, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 16, 1290556, 8],"float32"), Tensor([13, 2, 16, 1290556, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 16, 4, 1371215],"float32"), Tensor([13, 2, 16, 4, 1371215],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 16, 4, 2581111],"float32"), Tensor([13, 2, 16, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 2, 5162221, 4, 8],"float32"), Tensor([13, 2, 5162221, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 645278, 16, 4, 8],"float32"), Tensor([13, 645278, 16, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([139265, 2, 1, 512, 4, 4],"float32"), Tensor([139265, 2, 1, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([157811, 1, 27216],"float32"), Tensor([1, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([16778, 256000],"float32"), Tensor([256000],"float32"), )
paddle.Tensor.__sub__(Tensor([176923, 1, 24276],"float32"), Tensor([1, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([1901418, 3, 20, 20, 1],"float32"), Tensor([1901418, 3, 20, 20, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float32"), Tensor([2, 17825793, 8, 8],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float32"), Tensor([2, 4, 35651585, 8],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float32"), Tensor([2, 4, 8, 35651585],"float32"), )
paddle.Tensor.__sub__(Tensor([1],"float32"), Tensor([8912897, 4, 8, 8],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 107374183, 20],"float32"), Tensor([20],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 2],"float32"), Tensor([13, 43878873, 2, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 2],"float32"), Tensor([142606337, 4, 2, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), )
paddle.Tensor.__sub__(Tensor([221848, 1, 10285],"float32"), Tensor([221848, 1, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([221848, 10285],"float32"), Tensor([221848, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([225800],"float32"), Tensor([10105, 225800],"float32"), )
paddle.Tensor.__sub__(Tensor([2272611, 1004],"float32"), Tensor([2272611, 1004],"float32"), )
paddle.Tensor.__sub__(Tensor([2277148, 1002],"float32"), Tensor([2277148, 1002],"float32"), )
paddle.Tensor.__sub__(Tensor([2279422, 1001],"float32"), Tensor([2279422, 1001],"float32"), )
paddle.Tensor.__sub__(Tensor([2281701379, 1, 1],"float32"), Tensor([2281701379, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([23860930, 6, 3, 1, 2, 5],"float16"), Tensor([23860930, 6, 3, 1, 2, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([262144, 2, 1, 512, 4, 4],"float32"), Tensor([1, 2, 1, 512, 4, 4],"float32"), )
paddle.Tensor.__sub__(Tensor([28, 51130564, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([29826162, 6, 3, 4, 2, 1],"float16"), Tensor([29826162, 6, 3, 4, 2, 1],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 23860930, 3, 4, 1, 5],"float16"), Tensor([3, 23860930, 3, 4, 1, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 47721859, 3, 1, 2, 5],"float16"), Tensor([3, 47721859, 3, 1, 2, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 59652324, 3, 4, 2, 1],"float16"), Tensor([3, 59652324, 3, 4, 2, 1],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 11930465, 4, 1, 5],"float16"), Tensor([3, 6, 11930465, 4, 1, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 23860930, 1, 2, 5],"float16"), Tensor([3, 6, 23860930, 1, 2, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 29826162, 4, 2, 1],"float16"), Tensor([3, 6, 29826162, 4, 2, 1],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 1, 15907287, 5],"float16"), Tensor([3, 6, 3, 1, 15907287, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 1, 2, 39768216],"float16"), Tensor([3, 6, 3, 1, 2, 39768216],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 1, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 15907287, 1, 5],"float16"), Tensor([3, 6, 3, 15907287, 1, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 39768216, 2, 1],"float16"), Tensor([3, 6, 3, 39768216, 2, 1],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 1, 19884108],"float16"), Tensor([3, 6, 3, 4, 1, 19884108],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 1, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 19884108, 1],"float16"), Tensor([3, 6, 3, 4, 19884108, 1],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 1],"float16"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), )
paddle.Tensor.__sub__(Tensor([30678338, 7, 20],"float32"), Tensor([20],"float32"), )
paddle.Tensor.__sub__(Tensor([33554433, 2, 2, 32],"float16"), Tensor([33554433, 2, 2, 32],"float16"), )
paddle.Tensor.__sub__(Tensor([34918434, 123],"float32"), Tensor([123],"float32"), )
paddle.Tensor.__sub__(Tensor([417596, 1, 10285],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([417596, 10285],"float32"), Tensor([1, 10285],"float32"), )
paddle.Tensor.__sub__(Tensor([4194304, 2, 16, 4, 8],"float32"), Tensor([4194304, 2, 16, 4, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([4277856, 1004],"float32"), Tensor([1, 1004],"float32"), )
paddle.Tensor.__sub__(Tensor([4286395, 1002],"float32"), Tensor([1, 1002],"float32"), )
paddle.Tensor.__sub__(Tensor([4290677, 1001],"float32"), Tensor([1, 1001],"float32"), )
paddle.Tensor.__sub__(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), )
paddle.Tensor.__sub__(Tensor([42949673, 100],"float32"), Tensor([100],"float32"), )
paddle.Tensor.__sub__(Tensor([475355, 3, 40, 40, 1],"float32"), Tensor([475355, 3, 40, 40, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([59652324, 24, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__sub__(Tensor([63914, 33600, 2],"float32"), Tensor([33600, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([70818, 30324, 2],"float32"), Tensor([30324, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([71303169, 2],"float32"), Tensor([16, 71303169, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([7605672, 3, 10, 10, 1],"float32"), Tensor([7605672, 3, 10, 10, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([78906, 27216, 2],"float32"), Tensor([27216, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([83837, 1, 27216],"float32"), Tensor([83837, 1, 27216],"float32"), )
paddle.Tensor.__sub__(Tensor([88462, 24276, 2],"float32"), Tensor([24276, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([93991, 1, 24276],"float32"), Tensor([93991, 1, 24276],"float32"), )
paddle.Tensor.__sub__(Tensor([99865, 21504, 2],"float32"), Tensor([21504, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 10285],"float32"), Tensor([1, 221848, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 10285],"float32"), Tensor([221848, 1, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1001],"float32"), Tensor([2279422, 1001],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 10285, 221848],"float32"), Tensor([10285, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1140850690, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 1],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 1073741825, 2],"float16"), Tensor([1, 2, 1073741825, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 300, 2],"float16"), Tensor([3579140, 2, 300, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 2, 300, 7158279],"float16"), Tensor([1, 2, 300, 7158279],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 221848, 10285],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 221848, 10285],"float32"), Tensor([1, 221848, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 224, 3395389],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 3395389, 224],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 1549, 5, 4, 2],"float32"), Tensor([1, 1, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 1549, 5, 4, 2],"float32"), Tensor([1, 1, 1549, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 8, 5, 4, 388],"float32"), Tensor([1, 1, 1, 5, 1, 388],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 8, 5, 775, 2],"float32"), Tensor([1, 1, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 8, 5, 775, 2],"float32"), Tensor([1, 1, 1, 5, 775, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 8, 969, 4, 2],"float32"), Tensor([1, 1, 1, 969, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 4294967297],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 45474, 224, 224],"float32"), Tensor([45474, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 570425345, 4],"float32"), Tensor([570425345, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 7130317, 8, 5, 4, 2],"float32"), Tensor([1, 1, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 7130317, 8, 5, 4, 2],"float32"), Tensor([1, 7130317, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 7158279, 300, 2],"float16"), Tensor([1, 7158279, 300, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([10, 429496730],"float16"), Tensor([10, 1],"float16"), )
paddle.Tensor.__truediv__(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), )
paddle.Tensor.__truediv__(Tensor([1000, 2, 2, 570426],"float32"), Tensor([2, 570426],"float32"), )
paddle.Tensor.__truediv__(Tensor([1000, 380284, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 1901418, 10, 10, 1],"float32"), Tensor([12, 1901418, 10, 10, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 10, 6338060, 1],"float32"), Tensor([12, 3, 10, 6338060, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([12, 3, 6338060, 10, 1],"float32"), Tensor([12, 3, 6338060, 10, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1441, 11645, 8, 4, 4, 2],"float16"), Tensor([1, 1, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([1441, 11645, 8, 4, 4, 2],"float16"), Tensor([1441, 1, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([15158, 3, 224, 224],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([190141782, 2, 2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__truediv__(Tensor([194, 36828, 8, 5, 4, 2],"float32"), Tensor([1, 1, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([194, 36828, 8, 5, 4, 2],"float32"), Tensor([194, 1, 1, 5, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 5763, 4, 4, 2],"float16"), Tensor([1, 1, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 5763, 4, 4, 2],"float16"), Tensor([1, 1, 5763, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 2882, 4, 2],"float16"), Tensor([1, 1, 1, 2882, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 4, 2882, 2],"float16"), Tensor([1, 1, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 4, 2882, 2],"float16"), Tensor([1, 1, 1, 4, 2882, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 11645, 8, 4, 4, 1441],"float16"), Tensor([1, 1, 1, 4, 1, 1441],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 8388608, 8, 4, 4, 2],"float16"), Tensor([1, 1, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 8388608, 8, 4, 4, 2],"float16"), Tensor([1, 8388608, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 8388609, 8, 4, 4, 2],"float16"), Tensor([1, 1, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([2, 8388609, 8, 4, 4, 2],"float16"), Tensor([1, 8388609, 1, 4, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([221848, 1, 10285],"float32"), Tensor([1, 1, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([221848, 1, 10285],"float32"), Tensor([221848, 1, 10285],"float32"), )
paddle.Tensor.__truediv__(Tensor([2274877, 1888],"float16"), Tensor([1888],"float16"), )
paddle.Tensor.__truediv__(Tensor([2279422, 1001],"float32"), Tensor([1, 1001],"float32"), )
paddle.Tensor.__truediv__(Tensor([2279422, 1001],"float32"), Tensor([2279422, 1001],"float32"), )
paddle.Tensor.__truediv__(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__truediv__(Tensor([289, 280, 376, 25, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__truediv__(Tensor([32769, 256, 256, 2],"float16"), Tensor([1, 1, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([32769, 256, 256, 2],"float16"), Tensor([32769, 1, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([3579140, 2, 300, 2],"float16"), Tensor([1, 2, 300, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([3579140, 2, 300, 2],"float16"), Tensor([3579140, 2, 300, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([380283564, 3, 2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 20228, 376, 25, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 2097153, 256, 2],"float16"), Tensor([1, 1, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 2097153, 256, 2],"float16"), Tensor([1, 2097153, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 256, 2097153, 2],"float16"), Tensor([1, 1, 1, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 256, 2097153, 2],"float16"), Tensor([1, 1, 2097153, 2],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 256, 256, 16385],"float16"), Tensor([1, 1, 1, 16385],"float16"), )
paddle.Tensor.__truediv__(Tensor([4, 280, 27164, 25, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 280, 376, 1807, 3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 280, 376, 25, 217],"float32"), Tensor([217],"float32"), )
paddle.Tensor.__truediv__(Tensor([4294967297, 1],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__truediv__(Tensor([4294967297],"float16"), Tensor([1],"float16"), )
paddle.Tensor.__truediv__(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__truediv__(Tensor([55462, 10285, 4],"float32"), Tensor([10285, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([7605672, 10, 15, 2],"float32"), Tensor([7605672, 1, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([7605672, 3, 10, 10, 1],"float32"), Tensor([7605672, 3, 10, 10, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([8388609, 512],"float16"), Tensor([8388609, 1],"float16"), )
paddle.Tensor.all(Tensor([1, 10164, 422567],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([1, 1073741824, 4],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([1, 11109, 386621],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([1, 12096, 355074],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([1, 36828, 116623],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([1, 38367, 111945],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([105642, 10164, 4],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([27987, 38367, 4],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([29156, 36828, 4],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([88769, 12096, 4],"bool"), -1, keepdim=True, )
paddle.Tensor.all(Tensor([96656, 11109, 4],"bool"), -1, keepdim=True, )
paddle.Tensor.any(Tensor([1, 116509, 192, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 126860, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 138655, 176, 176],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 176, 81345],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 184, 77808],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 192, 74566],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 74566, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 77808, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 81345, 176],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([102261127, 42],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([102261127, 7, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([102261127, 7, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.any(Tensor([1431655765, 3],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([178956971, 24],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([2, 116106, 136, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([2, 2147483648],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([2, 300, 136, 52635],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([2, 300, 52635, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([3, 11930465, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([3, 11930465, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([3, 11930465, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.any(Tensor([3, 3, 477218589],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([3, 477218589, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 2, 9942054],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 2, 9942054],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 2, 9942054],"bool"), axis=5, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 3976822, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 3976822, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 4, 3976822, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 7953644, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 7953644, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 3, 7953644, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 5965233, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 5965233, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([3, 6, 5965233, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.any(Tensor([357913942, 12],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([357913942, 3, 4],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([357913942, 3, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([4, 1073741824],"bool"), -1, )
paddle.Tensor.any(Tensor([4, 1073741824],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([4, 178956971, 2, 3],"bool"), axis=tuple(-1,-2,), )
paddle.Tensor.any(Tensor([4, 178956971, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([4, 178956971, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.any(Tensor([4, 7, 153391690],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([4, 7, 153391690],"bool"), axis=2, keepdim=True, )
paddle.Tensor.any(Tensor([4, 8, 2, 67108864],"bool"), axis=tuple(-1,-2,), )
paddle.Tensor.any(Tensor([4, 8, 44739243, 3],"bool"), axis=tuple(-1,-2,), )
paddle.Tensor.any(Tensor([423, 300, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([477218589, 3, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([5, 214748365, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([5, 3, 286331153],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([5, 858993459],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([5965233, 6, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.any(Tensor([5965233, 6, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.any(Tensor([5965233, 6, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.any(Tensor([613566757, 7],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([7, 613566757],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([8, 536870912],"bool"), -1, )
paddle.Tensor.any(Tensor([8572790, 501],"bool"), -1, )
paddle.Tensor.any(Tensor([89478486, 8, 2, 3],"bool"), axis=tuple(-1,-2,), )
paddle.Tensor.argmax(Tensor([1, 1, 2281701379],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([221848, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([268436, 1, 8500],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([271632, 1, 8400],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([30182, 1, 75600],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([32299, 1, 70644],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([331402, 1, 6885],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([34647, 1, 65856],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([356516, 1, 6400],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([371009, 1, 6150],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([4, 285212673, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([40183, 1, 56784],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([419431, 1, 5440],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([43461, 1, 52500],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([47159, 1, 48384],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([51349, 1, 44436],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([547828, 1, 4165],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([56123, 1, 40656],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([59417, 1, 38402],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([61595, 1, 37044],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([61906, 1, 36858],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([634159, 1, 3598],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([67908, 1, 33600],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([7225, 157920, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([75245, 1, 30324],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([83837, 1, 27216],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([93991, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.astype(Tensor([1, 3, 1431655765],"float32"), Dtype(int32), )
paddle.Tensor.clip(Tensor([1, 2, 1073741825, 2],"float16"), min=1, )
paddle.Tensor.clip(Tensor([1, 2, 300, 7158279],"float16"), min=1, )
paddle.Tensor.clip(Tensor([1, 7158279, 300, 2],"float16"), min=1, )
paddle.Tensor.clip(Tensor([3579140, 2, 300, 2],"float16"), min=1, )
paddle.Tensor.cumsum(Tensor([1, 10, 228170138],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 11408507, 200],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 12, 190141782],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 126761188, 18],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 144, 15845149],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 152113426, 15],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 15845149, 144],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 175515491, 13],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 18, 126761188],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 192, 11883862],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 20, 114085069],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 2281701379],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 22817014, 100],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 23, 99204408],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 24, 95070891],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 253522376, 9],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 285212673, 8],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 31690297, 72],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 36, 63380594],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 38028357, 60],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 40, 57042535],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 45, 50704476],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 45634028, 50],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 48, 47535446],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 63380594, 36],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 72, 31690297],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 76056713, 30],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 80, 28521268],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 89, 25637095],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 9, 253522376],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 91268056, 25],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 96, 23767723],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 10, 114085069],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 1140850690],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 19, 60044774],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 19669840, 58],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 38, 30022387],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 39339679, 29],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 76, 15011194],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 76056713, 15],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 9920441, 115],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2281701379],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([4, 19669840, 29],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([4, 25, 22817014],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([4, 570425345],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([4294967297],"float16"), -1, )
paddle.Tensor.cumsum(Tensor([6, 380283564],"float32"), axis=-1, )
paddle.Tensor.diff(Tensor([2281701379],"float32"), )
paddle.Tensor.diff(Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([10, 429496730],"float16"), axis=0, prepend=Tensor([4, 429496730],"float16"), append=Tensor([4, 429496730],"float16"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float16"), axis=0, prepend=Tensor([1073741825, 4],"float16"), append=Tensor([4, 4],"float16"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float16"), axis=0, prepend=Tensor([4, 4],"float16"), append=Tensor([1073741825, 4],"float16"), )
paddle.Tensor.diff(x=Tensor([1073741825, 4],"float16"), axis=0, prepend=Tensor([1073741825, 4],"float16"), append=Tensor([1073741825, 4],"float16"), )
paddle.Tensor.diff(x=Tensor([1073741825, 4],"float16"), axis=0, prepend=Tensor([4, 4],"float16"), append=Tensor([4, 4],"float16"), )
paddle.Tensor.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4],"float16"), )
paddle.Tensor.diff(x=Tensor([10],"float16"), prepend=Tensor([4],"float16"), append=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([2281701379],"float32"), )
paddle.Tensor.diff(x=Tensor([2281701379],"int32"), )
paddle.Tensor.diff(x=Tensor([2281701379],"int64"), )
paddle.Tensor.diff(x=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4],"float16"), )
paddle.Tensor.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4],"float16"), append=Tensor([4],"float16"), )
paddle.Tensor.digamma(Tensor([4, 1073741825],"float16"), )
paddle.Tensor.digamma(Tensor([5, 107374183, 8],"float16"), )
paddle.Tensor.digamma(Tensor([5, 10737419, 8, 10],"float16"), )
paddle.Tensor.digamma(Tensor([5, 7, 122713352],"float16"), )
paddle.Tensor.digamma(Tensor([5, 7, 12271336, 10],"float16"), )
paddle.Tensor.digamma(Tensor([5, 7, 8, 15339169],"float16"), )
paddle.Tensor.digamma(Tensor([76695845, 7, 8],"float16"), )
paddle.Tensor.digamma(Tensor([7669585, 7, 8, 10],"float16"), )
paddle.Tensor.digamma(Tensor([858993460, 5],"float16"), )
paddle.Tensor.divide(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([2281701379, 1],"int32"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.fill_diagonal_(Tensor([1431655765, 3],"int32"), 1, 0, False, )
paddle.Tensor.frexp(Tensor([10, 429496730],"float32"), )
paddle.Tensor.frexp(Tensor([357913942, 12],"float32"), )
paddle.Tensor.frexp(Tensor([4, 5, 214748365],"float32"), )
paddle.Tensor.frexp(Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.frexp(Tensor([429496730, 5, 2],"float32"), )
paddle.Tensor.gather_nd(Tensor([1, 20, 114085069],"float32"), Tensor([1, 114085069],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 20, 2],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 2048, 768],"float16"), Tensor([2, 1140850690],"int64"), )
paddle.Tensor.gather_nd(Tensor([12, 7, 32],"float32"), Tensor([12, 190141782],"int32"), )
paddle.Tensor.gather_nd(Tensor([13, 7, 3],"float32"), Tensor([13, 175515491],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 7, 23282668],"float32"), Tensor([14, 23282668],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 7, 3],"float32"), Tensor([14, 162978670],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 85],"float16"), Tensor([516, 4421902],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 85],"float32"), Tensor([516, 4421902],"int64"), )
paddle.Tensor.gather_nd(Tensor([2, 10, 32],"float32"), Tensor([2, 1140850690],"int32"), )
paddle.Tensor.gather_nd(Tensor([32, 128, 1048577],"float16"), Tensor([32, 1048577],"int64"), )
paddle.Tensor.gather_nd(Tensor([32, 128, 2],"float16"), Tensor([32, 71303169],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 16384, 10],"float32"), Tensor([4, 500, 1140851],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 16384, 1],"float32"), Tensor([4, 500, 1140851],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 16384, 2],"float32"), Tensor([4, 500, 1140851],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 16384, 34817],"float32"), Tensor([4, 500, 34817],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 500, 1140851],"float32"), Tensor([4, 500, 1140851],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 53568, 10649],"float32"), Tensor([4, 500, 10649],"int64"), )
paddle.Tensor.gather_nd(Tensor([7, 128, 2],"float16"), Tensor([7, 325957340],"int64"), )
paddle.Tensor.gather_nd(Tensor([7, 128, 4793491],"float16"), Tensor([7, 4793491],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 16384, 10],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 16384, 17409],"float32"), Tensor([8, 500, 17409],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 16384, 1],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 16384, 2],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 85],"float16"), Tensor([385, 5926498],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 85],"float32"), Tensor([385, 5926498],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 500, 1],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 500, 2],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 500, 570426],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.inner(x=Tensor([570425345, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inverse(Tensor([142606337, 4, 4],"float32"), )
paddle.Tensor.inverse(Tensor([2, 126761188, 3, 3],"float32"), )
paddle.Tensor.inverse(Tensor([63380594, 4, 3, 3],"float32"), )
paddle.Tensor.isnan(Tensor([1431655765, 3],"float32"), )
paddle.Tensor.isnan(Tensor([178956971, 3, 4],"float64"), )
paddle.Tensor.isnan(Tensor([2, 1073741825],"float64"), )
paddle.Tensor.isnan(Tensor([2, 2147483648],"float32"), )
paddle.Tensor.isnan(Tensor([2, 268435457, 4],"float64"), )
paddle.Tensor.isnan(Tensor([2, 3, 357913942],"float64"), )
paddle.Tensor.isnan(Tensor([2147483649],"float64"), )
paddle.Tensor.isnan(Tensor([238609295, 3, 3],"float64"), )
paddle.Tensor.isnan(Tensor([2982617, 6, 3, 4, 2, 5],"float64"), )
paddle.Tensor.isnan(Tensor([3, 238609295, 3],"float64"), )
paddle.Tensor.isnan(Tensor([3, 3, 238609295],"float64"), )
paddle.Tensor.isnan(Tensor([3, 5965233, 3, 4, 2, 5],"float64"), )
paddle.Tensor.isnan(Tensor([3, 6, 2982617, 4, 2, 5],"float64"), )
paddle.Tensor.isnan(Tensor([3, 6, 3, 3976822, 2, 5],"float64"), )
paddle.Tensor.isnan(Tensor([3, 6, 3, 4, 1988411, 5],"float64"), )
paddle.Tensor.isnan(Tensor([3, 6, 3, 4, 2, 4971027],"float64"), )
paddle.Tensor.isnan(Tensor([306783379, 7],"float64"), )
paddle.Tensor.isnan(Tensor([4, 1073741824],"float32"), )
paddle.Tensor.isnan(Tensor([4, 536870913],"float64"), )
paddle.Tensor.isnan(Tensor([4, 7, 76695845],"float64"), )
paddle.Tensor.isnan(Tensor([4, 89478486, 6],"float64"), )
paddle.Tensor.isnan(Tensor([4294967295],"float32"), )
paddle.Tensor.isnan(Tensor([5, 107374183, 4],"float64"), )
paddle.Tensor.isnan(Tensor([5, 3, 143165577],"float64"), )
paddle.Tensor.isnan(Tensor([51130564, 42],"float64"), )
paddle.Tensor.isnan(Tensor([51130564, 7, 6],"float64"), )
paddle.Tensor.isnan(Tensor([715827883, 3],"float64"), )
paddle.Tensor.kthvalue(Tensor([1140851, 200, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 114085069, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 200, 5704254],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([214748365, 5, 4],"float16"), y=Tensor([214748365, 5, 4],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([2281701379],"float32"), y=Tensor([2281701379],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 1073741825],"float16"), y=Tensor([1],"float16"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 268435457, 4],"float16"), y=Tensor([4, 268435457, 4],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 214748365],"float16"), y=Tensor([4, 5, 214748365],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 53687092],"float16"), y=Tensor([4, 5, 4, 53687092],"float16"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 53687092],"float16"), y=Tensor([4, 5, 4, 53687092],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 53687092],"float16"), y=Tensor([4, 5, 4, 53687092],"float16"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 71582789, 3],"float16"), y=Tensor([4, 5, 71582789, 3],"float16"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 71582789, 3],"float16"), y=Tensor([4, 5, 71582789, 3],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 71582789, 3],"float16"), y=Tensor([4, 5, 71582789, 3],"float16"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 89478486, 4, 3],"float16"), y=Tensor([4, 89478486, 4, 3],"float16"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 89478486, 4, 3],"float16"), y=Tensor([4, 89478486, 4, 3],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 89478486, 4, 3],"float16"), y=Tensor([4, 89478486, 4, 3],"float16"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([71582789, 5, 4, 3],"float16"), y=Tensor([71582789, 5, 4, 3],"float16"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([71582789, 5, 4, 3],"float16"), y=Tensor([71582789, 5, 4, 3],"float16"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([71582789, 5, 4, 3],"float16"), y=Tensor([71582789, 5, 4, 3],"float16"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([858993460, 5],"float16"), y=Tensor([1],"float16"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([858993460, 5],"float16"), y=Tensor([858993460, 5],"float16"), weight=0.5, )
paddle.Tensor.lgamma(Tensor([100, 100, 429497],"float16"), )
paddle.Tensor.lgamma(Tensor([100, 429497, 100],"float16"), )
paddle.Tensor.lgamma(Tensor([4, 1073741825],"float16"), )
paddle.Tensor.lgamma(Tensor([429497, 100, 100],"float16"), )
paddle.Tensor.lgamma(Tensor([5, 107374183, 8],"float16"), )
paddle.Tensor.lgamma(Tensor([5, 10737419, 8, 10],"float16"), )
paddle.Tensor.lgamma(Tensor([5, 7, 122713352],"float16"), )
paddle.Tensor.lgamma(Tensor([5, 7, 12271336, 10],"float16"), )
paddle.Tensor.lgamma(Tensor([5, 7, 8, 15339169],"float16"), )
paddle.Tensor.lgamma(Tensor([76695845, 7, 8],"float16"), )
paddle.Tensor.lgamma(Tensor([7669585, 7, 8, 10],"float16"), )
paddle.Tensor.lgamma(Tensor([858993460, 5],"float16"), )
paddle.Tensor.lu(Tensor([760567127, 3],"float32"), )
paddle.Tensor.matmul(Tensor([10737419, 100, 4],"float16"), Tensor([1, 4, 4],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 197, 8618],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23, 23],"float32"), Tensor([128, 12, 23, 64587],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23, 32],"float32"), Tensor([128, 12, 32, 46422],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 46422, 32],"float32"), Tensor([128, 12, 32, 23],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 46422, 32],"float32"), Tensor([128, 12, 32, 40],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 64587, 23],"float32"), Tensor([128, 12, 23, 32],"float32"), )
paddle.Tensor.matmul(Tensor([3579140, 100, 12],"float16"), Tensor([1, 12, 12],"float16"), )
paddle.Tensor.matmul(Tensor([7158279, 100, 6],"float16"), Tensor([1, 6, 6],"float16"), )
paddle.Tensor.max(Tensor([1, 10164, 422567],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 1031205, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 1073741824, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 11109, 386621],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 115943, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 115943, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 1193710, 3598],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 12096, 355074],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 127827, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 127827, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 141636, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 141636, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 157811, 27216],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 157811, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 176923, 24276],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 176923, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 390451573, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 417596, 10285],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 698369, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([1, 789517, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([103884, 4, 76, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([105642, 10164, 4],"float32"), -1, )
paddle.Tensor.max(Tensor([115943, 1, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([12, 1200, 298262],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 138512, 38, 68, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 300, 1193047],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 34628, 76, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 3579140, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 4, 1315861, 68, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 19, 34, 138512],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 19, 4709394, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 2631721, 34, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 38, 2354697, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 38, 68, 34628],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 657931, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 1177349, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 136, 8657],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4800, 74566],"float32"), 2, )
paddle.Tensor.max(Tensor([12, 554047, 19, 34, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([127827, 1, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([13, 110127367, 3],"float32"), 1, )
paddle.Tensor.max(Tensor([13, 3, 110127367],"float32"), 1, )
paddle.Tensor.max(Tensor([13, 330382100],"float32"), 1, )
paddle.Tensor.max(Tensor([141636, 1, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1431655765, 3],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([1431655765, 3],"float32"), 1, )
paddle.Tensor.max(Tensor([143166, 300, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([157811, 1, 27216],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1662140, 4, 19, 34, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([176923, 1, 24276],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([177537, 12096, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([193311, 11109, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([2, 1073741824, 2],"float32"), axis=-1, )
paddle.Tensor.max(Tensor([2, 1073741824, 2],"float32"), axis=1, )
paddle.Tensor.max(Tensor([2, 10800, 198842],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 1083, 1982903],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 2, 1073741824],"float32"), axis=-1, )
paddle.Tensor.max(Tensor([2, 2, 1073741824],"float32"), axis=1, )
paddle.Tensor.max(Tensor([2, 2147483648],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 2147483648],"float32"), axis=-1, )
paddle.Tensor.max(Tensor([2, 3, 8, 89478486],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([2, 3, 89478486, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([2, 33554432, 8, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([2, 42949673, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([2, 536870913, 2],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([211284, 10164, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([2131, 90, 22400],"float32"), axis=1, )
paddle.Tensor.max(Tensor([2131, 90, 22400],"float32"), axis=2, )
paddle.Tensor.max(Tensor([2147483648, 2],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([22369622, 3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([27084, 158580],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([27990, 153450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([28557, 150402],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([3, 178956971, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([3, 28, 51130564],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([3, 51130564, 28],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([3, 8, 178956971],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([31096, 138120],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([35148, 11109, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([357913942, 3, 2],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([35792, 1200, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([4, 47935, 22400],"float32"), axis=1, )
paddle.Tensor.max(Tensor([4, 47935, 22400],"float32"), axis=2, )
paddle.Tensor.max(Tensor([4, 90, 11930465],"float32"), axis=1, )
paddle.Tensor.max(Tensor([4, 90, 11930465],"float32"), axis=2, )
paddle.Tensor.max(Tensor([40580, 105840],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([415535, 4, 38, 68, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([477218589, 3, 3],"float32"), 1, )
paddle.Tensor.max(Tensor([5478275, 28, 28],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([67108864, 8, 8],"float32"), axis=-3, )
paddle.Tensor.max(Tensor([79317, 1083, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([7954, 10800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([8, 536870912],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([8948, 4800, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([9, 477218589],"float32"), axis=-1, )
paddle.Tensor.mean(Tensor([2281701379],"int32"), )
paddle.Tensor.min(Tensor([1, 1, 10285, 417596],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 24276, 176923],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 27216, 157811],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 30324, 141636],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 1, 33600, 127827],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 104399, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 116509, 36864],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 126860, 33856],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 138655, 30976],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 300, 14316558],"float32"), -1, )
paddle.Tensor.min(Tensor([1, 31957, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 35409, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 39453, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 44231, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([10105, 30360, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 32695, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 35420, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 38640, 11],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 4, 106259],"float32"), axis=1, )
paddle.Tensor.min(Tensor([10105, 42504, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([104399, 1, 10285, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([107374183, 4, 10],"float32"), axis=1, )
paddle.Tensor.min(Tensor([2, 116106, 18496],"float32"), -1, )
paddle.Tensor.min(Tensor([2, 3, 8, 89478486],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([2, 3, 89478486, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([2, 300, 7158279],"float32"), -1, )
paddle.Tensor.min(Tensor([2, 33554432, 8, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([22369622, 3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([3, 178956971, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([3, 28, 51130564],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([3, 51130564, 28],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([3, 8, 178956971],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([31957, 1, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([35409, 1, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([39453, 1, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([423, 300, 33856],"float32"), -1, )
paddle.Tensor.min(Tensor([44231, 1, 24276, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([5478275, 28, 28],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([67108864, 8, 8],"float32"), axis=-3, )
paddle.Tensor.min(Tensor([76695845, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([89478486, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([9, 477218589],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([97612894, 4, 11],"float32"), axis=1, )
paddle.Tensor.mode(Tensor([3, 2, 715827883],"float16"), )
paddle.Tensor.mode(Tensor([3, 2, 715827883],"float16"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 477218589, 3],"float16"), axis=1, keepdim=False, )
paddle.Tensor.moveaxis(x=Tensor([2147483649, 2],"float16"), source=0, destination=1, )
paddle.Tensor.multiply(Tensor([16, 142606337],"float32"), Tensor([16, 142606337],"float32"), )
paddle.Tensor.multiply(Tensor([16, 142606337],"float32"), Tensor([16, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 14260634],"float32"), Tensor([160, 14260634],"float32"), )
paddle.Tensor.multiply(Tensor([160, 14260634],"float32"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.multiply(Tensor([2970966, 768],"float32"), Tensor([2970966, 1],"float32"), )
paddle.Tensor.multiply(Tensor([512, 4456449],"float32"), Tensor([512, 1],"float32"), )
paddle.Tensor.multiply(Tensor([512, 4456449],"float32"), Tensor([512, 4456449],"float32"), )
paddle.Tensor.multiply(Tensor([742742, 3072],"float32"), Tensor([742742, 1],"float32"), )
paddle.Tensor.nonzero(Tensor([306783379, 14],"bool"), )
paddle.Tensor.nonzero(Tensor([330382100, 13],"bool"), )
paddle.Tensor.nonzero(Tensor([357913942, 12],"bool"), )
paddle.Tensor.nonzero(Tensor([390451573, 11],"bool"), )
paddle.Tensor.nonzero(Tensor([4294967295],"bool"), )
paddle.Tensor.nonzero(Tensor([429496730, 10],"bool"), )
paddle.Tensor.nonzero(Tensor([52640, 81592],"bool"), )
paddle.Tensor.norm(Tensor([1, 2, 1140850690],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([114085069, 20],"float32"), p=2, axis=0, keepdim=True, )
paddle.Tensor.norm(Tensor([12, 190141782],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([12, 190141782],"float32"), p=2, axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([128, 17825793],"float32"), p=2, axis=1, keepdim=True, )
paddle.Tensor.norm(Tensor([2, 1140850690],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([2, 2, 570425345],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([2281701379, 1],"float32"), p=2, axis=1, keepdim=True, )
paddle.Tensor.norm(Tensor([2281701379],"float32"), )
paddle.Tensor.pow(Tensor([1],"float32"), Tensor([4294967297],"float32"), )
paddle.Tensor.pow(Tensor([2, 1140850690],"float32"), Tensor([1],"float32"), )
paddle.Tensor.pow(Tensor([2, 2147483649],"float32"), Tensor([2, 1],"float32"), )
paddle.Tensor.pow(Tensor([2147483649, 2],"float32"), Tensor([2147483649, 1],"float32"), )
paddle.Tensor.pow(Tensor([4294967297],"float32"), Tensor([1],"float32"), )
paddle.Tensor.pow(Tensor([760567127, 3],"float32"), Tensor([1],"float32"), )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([2, 1140850690],"int64"), Tensor([2, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([2, 4],"int64"), Tensor([2, 1140850690],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([2, 4],"int64"), Tensor([570425345, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([570425345, 4],"int64"), Tensor([2, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([38028357, 60],"float32"), Tensor([38028357, 4],"int64"), Tensor([38028357, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([570425345, 4],"int64"), Tensor([6, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 380283564],"int64"), Tensor([6, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 4],"int64"), Tensor([570425345, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 4],"int64"), Tensor([6, 380283564],"float32"), axis=1, )
paddle.Tensor.sort(Tensor([4294967295],"float32"), descending=True, )
paddle.Tensor.split(Tensor([1, 1100, 2074274],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 192, 11883862],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 196, 11641334],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 200, 11408507],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 21, 108652447],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 2281701379],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 2281701379],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([100, 22817014],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([101, 22591103],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([101, 22591103],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([102, 22369622],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([108, 21126865],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([128, 17825793],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([132, 17285617],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([16, 185686, 768],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([16, 46422, 3072],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([160, 4643, 3072],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([160, 8739, 3072],"float16"), 17, 1, )
paddle.Tensor.split(Tensor([35651585, 1, 2, 1, 32],"float32"), 2, )
paddle.Tensor.split(Tensor([512, 10923, 768],"float16"), 17, 1, )
paddle.Tensor.split(Tensor([71303169, 2, 1, 2, 8],"float32"), 2, )
paddle.Tensor.subtract(Tensor([190141782, 3, 4],"float32"), Tensor([190141782, 3, 4],"float32"), )
paddle.Tensor.subtract(Tensor([1],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.subtract(Tensor([2, 285212673, 4],"float32"), Tensor([2, 285212673, 4],"float32"), )
paddle.Tensor.subtract(Tensor([2, 3, 380283564],"float32"), Tensor([2, 3, 380283564],"float32"), )
paddle.Tensor.subtract(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 100083, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 10173, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 101931, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 101946, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 102327, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 102396, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 104598, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 104646, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 104883, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 105876, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 107739, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 108291, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 108540, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 110289, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 110832, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 111645, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 112293, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 113463, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 113676, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 113790, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 114213, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 114261, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 114330, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 114561, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 114750, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 115383, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 115494, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 115920, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 116010, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 116085, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 120090, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 120693, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 120765, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 121008, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 121383, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 121500, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 121539, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 121758, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 122073, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 122982, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 123516, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 124155, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 124257, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 129726, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 131643, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 131952, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 131961, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 132105, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 132522, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 134115, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 136164, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 137484, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 138210, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 138852, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 145707, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 146148, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 147111, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 147315, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 150507, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 150945, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 151971, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 158844, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 160434, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 16623, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 16704, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 173505, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 17520, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 17526, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 175965, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 17598, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 17601, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 176061, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 178701, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 17988, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 18054, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 18081, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 182052, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 18795, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 18969, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 192987, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 19461, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 195024, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 206889, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 20913, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 21504, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 21621, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 21639, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 22047, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 222156, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 22458, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 22485, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 22938, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 23199, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 23337, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 234837, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 23964, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 24081, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 24285, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 24426, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 24729, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 24861, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 24891, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 25389, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 25449, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 25653, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 25665, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 25707, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26028, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26037, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26064, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26340, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26358, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26721, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26763, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 26820, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 27378, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 27540, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 27789, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 28236, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 28269, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 28776, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 28779, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 28836, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 28848, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29025, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29103, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29124, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29274, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29724, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29847, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 29865, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30033, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30063, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30096, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30141, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30144, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30231, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30297, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30339, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30528, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30624, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30690, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30852, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30912, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 30981, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 31110, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 31170, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 31368, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 31698, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 31800, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 32778, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 32892, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 32937, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33039, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33102, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33111, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33132, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33333, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33336, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33636, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33642, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33762, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33873, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33909, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 33984, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 34158, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 34533, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35178, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35379, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35391, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35412, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35559, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35565, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35616, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 35811, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 36585, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 36780, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 36963, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 37524, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 37749, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 37920, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 37986, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 37998, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38208, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38250, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38253, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38301, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38430, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38682, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38772, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 38958, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 39411, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 39684, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 39831, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 39897, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 39918, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 39921, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40053, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40095, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40149, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40275, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40650, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40686, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 40767, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 41334, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 41421, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 41532, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 41553, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 42129, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 42345, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 42774, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43290, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43299, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43455, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43542, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43629, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43770, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43803, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43809, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43920, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43950, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 43986, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44064, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44106, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44193, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44355, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44373, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44409, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44598, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44754, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 44793, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 45291, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 45354, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 45390, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 45423, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 45564, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46104, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46344, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46404, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46431, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46722, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46812, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46848, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46929, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 46959, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 47199, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 47625, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 47640, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 47715, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 47904, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48150, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48177, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48282, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48336, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48465, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48504, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48636, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48759, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 48978, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 49089, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 49614, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 49929, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 49986, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50169, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50184, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50247, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50400, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50424, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50604, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 50712, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51051, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51150, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51171, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51213, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51357, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51444, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51459, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51555, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51558, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51633, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51639, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51753, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 51912, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 52089, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 52191, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 52236, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 52518, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 52530, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 52980, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53001, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53010, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53040, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53190, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53301, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53778, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53829, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 53901, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 54171, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 54249, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 54756, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 54873, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 54954, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 54999, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55089, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55194, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55548, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55572, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55722, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55821, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55917, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 55974, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56211, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56316, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56376, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56559, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56577, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56886, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56910, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 56925, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57108, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57147, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57291, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57471, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57564, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57576, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57648, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 57708, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 58017, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 58056, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 58143, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 58221, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 58260, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 58677, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59277, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59442, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59547, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59736, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59802, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59841, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59844, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 59994, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60099, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60102, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60261, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60366, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60396, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60483, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60606, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60630, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60681, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60720, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60804, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60849, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 60963, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61149, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61197, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61251, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61338, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61608, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61749, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61776, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 61998, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62004, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62109, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62199, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62229, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62421, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62445, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62481, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62544, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62910, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 62967, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 63618, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 63759, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 63786, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 63798, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 63855, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 64239, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 64314, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 64389, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 64866, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 65013, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 65382, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 65421, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 65778, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 65871, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 66123, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 66195, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 66234, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 66324, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 66501, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67125, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67434, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67440, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67491, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67635, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67641, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 67680, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 68058, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 68109, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 68373, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 68604, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 68985, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69009, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69075, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69132, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69147, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69168, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69384, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69429, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69450, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69582, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 69993, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70152, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70311, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70338, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70395, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70446, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70503, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70704, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 70998, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 71139, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 71175, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 71655, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 71886, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 71889, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 71895, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 72033, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 72054, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 73086, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 73167, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 73416, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 73707, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 73848, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 74232, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 74310, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 74502, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 74796, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 75063, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 75546, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 75975, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 75978, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 76713, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 76914, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 77040, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 77478, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 77481, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 77610, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 77745, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 78177, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 78426, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 78570, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 78801, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 78942, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 79038, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 79812, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 80262, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 80370, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 80526, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 80535, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 80781, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 81294, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 81633, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 81687, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 81873, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 82131, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 82152, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 82398, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 82482, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 82647, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 82944, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 83031, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 83259, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 83439, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 83523, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 83919, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 83922, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 84111, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 84552, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 84789, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 85515, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 85977, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 86346, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 86835, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 87768, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 87798, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 88182, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 88404, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 88719, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 88755, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 89019, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 89715, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 90303, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 90414, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 90771, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 90849, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 91281, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 91317, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 91515, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 91554, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 92397, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 92409, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 92916, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 93366, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 93528, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 93792, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 94272, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 94842, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 95037, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 95178, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 95928, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 96321, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 98148, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 98550, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 98760, )
paddle.Tensor.topk(Tensor([2281701379],"float32"), 99432, )
paddle.Tensor.transpose(Tensor([2, 33554433, 32, 2],"float16"), list[3,0,1,2,], )
paddle.Tensor.transpose(Tensor([22369622, 1, 3, 64],"float16"), list[2,1,3,0,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[1,0,2,3,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[1,0,3,2,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[1,2,0,3,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[1,2,3,0,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[1,3,0,2,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[1,3,2,0,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[2,0,1,3,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[2,0,3,1,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[2,1,0,3,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[2,1,3,0,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[2,3,0,1,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[2,3,1,0,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[3,0,1,2,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[3,0,2,1,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[3,1,0,2,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[3,1,2,0,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[3,2,0,1,], )
paddle.Tensor.transpose(Tensor([4294967297, 1, 1, 1],"float16"), perm=list[3,2,1,0,], )
paddle.Tensor.trunc(Tensor([2, 142606337, 8],"float32"), )
paddle.Tensor.trunc(Tensor([2, 8, 142606337],"float32"), )
paddle.Tensor.trunc(Tensor([28, 81489335],"float32"), )
paddle.Tensor.trunc(Tensor([285212673, 8],"float32"), )
paddle.Tensor.trunc(Tensor([35651585, 8, 8],"float32"), )
paddle.Tensor.trunc(Tensor([8, 285212673],"float32"), )
paddle.Tensor.trunc(Tensor([81489335, 28],"float32"), )
paddle.add_n(Tensor([15955954, 13, 11],"float32"), )
paddle.add_n(Tensor([2, 103713700, 11],"float32"), )
paddle.add_n(Tensor([2, 13, 87757746],"float32"), )
paddle.add_n(inputs=Tensor([1073741825, 3],"int32"), )
paddle.add_n(inputs=Tensor([2281701379],"float32"), )
paddle.add_n(inputs=Tensor([2281701379],"int32"), )
paddle.add_n(inputs=Tensor([2281701379],"int64"), )
paddle.add_n(inputs=Tensor([268435457, 4, 4],"int32"), )
paddle.add_n(inputs=Tensor([3, 1073741825],"int32"), )
paddle.add_n(inputs=Tensor([4, 268435457, 4],"int32"), )
paddle.add_n(inputs=Tensor([4, 4, 268435457],"int32"), )
paddle.add_n(inputs=Tensor([4, 4, 4, 67108865],"int32"), )
paddle.add_n(inputs=Tensor([4, 4, 67108865, 4],"int32"), )
paddle.add_n(inputs=Tensor([4, 67108865, 4, 4],"int32"), )
paddle.add_n(inputs=Tensor([4294967297],"int32"), )
paddle.add_n(inputs=Tensor([67108865, 4, 4, 4],"int32"), )
paddle.add_n(list[Tensor([10, 1, 10, 4563403, 5],"float32"),Tensor([10, 1, 10, 4563403, 5],"float32"),Tensor([10, 1, 10, 4563403, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 4563403],"float32"),Tensor([10, 1, 10, 5, 4563403],"float32"),Tensor([10, 1, 10, 5, 4563403],"float32"),], )
paddle.add_n(list[Tensor([10, 912681, 10, 5, 5],"float32"),Tensor([10, 912681, 10, 5, 5],"float32"),Tensor([10, 912681, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 9126806, 5, 5],"float32"),Tensor([10, 1, 9126806, 5, 5],"float32"),Tensor([10, 1, 9126806, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 912681, 5],"float32"),Tensor([10, 1, 10, 912681, 5],"float32"),Tensor([10, 1, 10, 912681, 5],"float32"),], )
paddle.add_n(list[Tensor([100, 22817014],"float32"),Tensor([100, 22817014],"float32"),], )
paddle.add_n(list[Tensor([1073741825, 3],"int32"),Tensor([1073741825, 3],"int32"),Tensor([1073741825, 3],"int32"),], )
paddle.add_n(list[Tensor([107374183, 40],"int32"),Tensor([107374183, 40],"int32"),Tensor([107374183, 40],"int32"),], )
paddle.add_n(list[Tensor([1200, 1901418],"float32"),Tensor([1200, 1901418],"float32"),], )
paddle.add_n(list[Tensor([1291, 1767391],"float32"),Tensor([1291, 1767391],"float32"),], )
paddle.add_n(list[Tensor([17409, 128, 32, 32],"float32"),Tensor([17409, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([1800, 1267612],"float32"),Tensor([1800, 1267612],"float32"),], )
paddle.add_n(list[Tensor([456340275],"float32"),Tensor([456340275],"float32"),Tensor([456340275],"float32"),Tensor([456340275],"float32"),Tensor([456340275],"float32"),], )
paddle.add_n(list[Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.add_n(list[Tensor([3, 1431655766],"int32"),Tensor([3, 1431655766],"int32"),Tensor([3, 1431655766],"int32"),], )
paddle.add_n(list[Tensor([32769, 128, 32, 32],"int32"),Tensor([32769, 128, 32, 32],"int32"),], )
paddle.add_n(list[Tensor([3, 1073741825],"int32"),Tensor([3, 1073741825],"int32"),Tensor([3, 1073741825],"int32"),], )
paddle.add_n(list[Tensor([4353, 128, 64, 64],"float32"),Tensor([4353, 128, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 16385, 32],"int32"),Tensor([64, 128, 16385, 32],"int32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 16385],"int32"),Tensor([64, 128, 32, 16385],"int32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 8705],"float32"),Tensor([64, 128, 32, 8705],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 4353, 64],"float32"),Tensor([64, 128, 4353, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 64, 4353],"float32"),Tensor([64, 128, 64, 4353],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 64, 8193],"int32"),Tensor([64, 128, 64, 8193],"int32"),], )
paddle.add_n(list[Tensor([64, 128, 8193, 64],"int32"),Tensor([64, 128, 8193, 64],"int32"),], )
paddle.add_n(list[Tensor([64, 128, 8705, 32],"float32"),Tensor([64, 128, 8705, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 16385, 64, 64],"int32"),Tensor([64, 16385, 64, 64],"int32"),], )
paddle.add_n(list[Tensor([64, 34817, 32, 32],"float32"),Tensor([64, 34817, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 65537, 32, 32],"int32"),Tensor([64, 65537, 32, 32],"int32"),], )
paddle.add_n(list[Tensor([64, 8705, 64, 64],"float32"),Tensor([64, 8705, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([8193, 128, 64, 64],"int32"),Tensor([8193, 128, 64, 64],"int32"),], )
paddle.add_n(list[Tensor([9126806, 1, 10, 5, 5],"float32"),Tensor([9126806, 1, 10, 5, 5],"float32"),Tensor([9126806, 1, 10, 5, 5],"float32"),], )
paddle.addmm(Tensor([11008, 390168],"float16"), Tensor([11008, 8],"float16"), Tensor([8, 390168],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([11008, 768],"float16"), Tensor([11008, 390168],"float16"), Tensor([390168, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([134217729, 32],"float16"), Tensor([134217729, 8],"float16"), Tensor([8, 32],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([22369622, 192],"float16"), Tensor([22369622, 8],"float16"), Tensor([8, 192],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 134217729],"float16"), Tensor([32, 8],"float16"), Tensor([8, 134217729],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([32, 64],"float16"), Tensor([32, 67108865],"float16"), Tensor([67108865, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([390168, 11008],"float16"), Tensor([390168, 8],"float16"), Tensor([8, 11008],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([45634028, 50],"float32"), Tensor([45634028, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([5592406, 768],"float16"), Tensor([5592406, 8],"float16"), Tensor([8, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([64, 192],"float16"), Tensor([64, 22369622],"float16"), Tensor([22369622, 192],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([64, 32],"float16"), Tensor([64, 67108865],"float16"), Tensor([67108865, 32],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([64, 64],"float16"), Tensor([64, 67108865],"float16"), Tensor([67108865, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([64, 67108865],"float16"), Tensor([64, 8],"float16"), Tensor([8, 67108865],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([67108865, 64],"float16"), Tensor([67108865, 8],"float16"), Tensor([8, 64],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([768, 11008],"float16"), Tensor([768, 390168],"float16"), Tensor([390168, 11008],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([768, 5592406],"float16"), Tensor([768, 8],"float16"), Tensor([8, 5592406],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(Tensor([768, 768],"float16"), Tensor([768, 5592406],"float16"), Tensor([5592406, 768],"float16"), beta=1.0, alpha=2.0, )
paddle.addmm(input=Tensor([1, 1],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=5.0, )
paddle.allclose(Tensor([1, 11408507, 200],"float32"), Tensor([1, 11408507, 200],"float32"), )
paddle.allclose(Tensor([1, 20, 114085069],"float32"), Tensor([1, 20, 114085069],"float32"), )
paddle.allclose(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([1, 5, 456340276],"float32"), Tensor([1, 5, 456340276],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 71303169, 32],"float32"), Tensor([1, 71303169, 32],"float32"), )
paddle.allclose(Tensor([1, 71303169, 32],"float32"), Tensor([1, 71303169, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([10186167, 7, 32],"float32"), Tensor([10186167, 7, 32],"float32"), )
paddle.allclose(Tensor([1124, 2029984],"float32"), Tensor([1124, 2029984],"float32"), )
paddle.allclose(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([11883862, 3, 8, 8],"float32"), Tensor([11883862, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([13, 13, 13501192],"float32"), Tensor([13, 13, 13501192],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 1371215, 128],"float32"), Tensor([13, 1371215, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 175515491],"float32"), Tensor([13, 175515491],"float32"), atol=0.001, )
paddle.allclose(Tensor([13, 175515491],"float32"), Tensor([13, 175515491],"float32"), atol=0.01, )
paddle.allclose(Tensor([13, 175515491],"float32"), Tensor([13, 175515491],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 32, 5484860],"float32"), Tensor([13, 32, 5484860],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 5484860, 32],"float32"), Tensor([13, 5484860, 32],"float32"), )
paddle.allclose(Tensor([13, 5484860, 32],"float32"), Tensor([13, 5484860, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 5484860, 32],"float32"), Tensor([13, 5484860, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 7, 25073642],"float32"), Tensor([13, 7, 25073642],"float32"), )
paddle.allclose(Tensor([13, 8, 21939437],"float32"), Tensor([13, 8, 21939437],"float32"), atol=0.0001, )
paddle.allclose(Tensor([1371215, 13, 128],"float32"), Tensor([1371215, 13, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([14, 10186167, 16],"float32"), Tensor([14, 10186167, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 162978670],"float32"), Tensor([14, 162978670],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 40744668, 4],"float32"), Tensor([14, 40744668, 4],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 64, 2546542],"float32"), Tensor([14, 64, 2546542],"float32"), atol=1e-05, )
paddle.allclose(Tensor([142606337, 16],"float32"), Tensor([142606337, 16],"float32"), )
paddle.allclose(Tensor([142606337, 16],"float32"), Tensor([142606337, 16],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([14260634, 5, 32],"float32"), Tensor([14260634, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([16, 142606337],"float32"), Tensor([16, 142606337],"float32"), )
paddle.allclose(Tensor([175515491, 13],"float32"), Tensor([175515491, 13],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), atol=0.0001, )
paddle.allclose(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), atol=0.001, )
paddle.allclose(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2, 17825793, 8, 8],"float32"), Tensor([2, 17825793, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 47535446, 8],"float32"), Tensor([2, 3, 47535446, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 47535446],"float32"), Tensor([2, 3, 8, 47535446],"float32"), )
paddle.allclose(Tensor([2228225, 32, 32],"float32"), Tensor([2228225, 32, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([2228225, 64, 16],"float32"), Tensor([2228225, 64, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([2281701379],"bool"), Tensor([2281701379],"bool"), 0.0, 0.0, False, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), atol=0.0001, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), atol=0.001, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), atol=0.5, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=0.01, atol=0.0, name="test_7", )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_1", )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_3", )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_5", )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_2", )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_4", )
paddle.allclose(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_6", )
paddle.allclose(Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), 50.0, 48.0, False, )
paddle.allclose(Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), 50.0, 49.0, False, )
paddle.allclose(Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), 50.0, 48.0, False, )
paddle.allclose(Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), 50.0, 49.0, False, )
paddle.allclose(Tensor([285212673, 8],"float32"), Tensor([285212673, 8],"float32"), atol=1e-06, )
paddle.allclose(Tensor([285212673, 8],"float32"), Tensor([285212673, 8],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([3565159, 20, 32],"float32"), Tensor([3565159, 20, 32],"float32"), )
paddle.allclose(Tensor([4, 570425345],"float32"), Tensor([4, 570425345],"float32"), atol=1e-06, )

paddle.allclose(Tensor([456340276, 5],"float32"), Tensor([456340276, 5],"float32"), atol=1e-06, )
paddle.allclose(Tensor([5484860, 13, 32],"float32"), Tensor([5484860, 13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([570426, 20, 200],"float32"), Tensor([570426, 20, 200],"float32"), )
paddle.allclose(Tensor([64, 35651585],"float32"), Tensor([64, 35651585],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([71303169, 32],"float32"), Tensor([71303169, 32],"float32"), )
paddle.allclose(Tensor([71303169, 32],"float32"), Tensor([71303169, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), atol=0.0001, )
paddle.allclose(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), atol=0.01, )
paddle.allclose(Tensor([8912897, 64, 4],"float32"), Tensor([8912897, 64, 4],"float32"), atol=1e-05, )
paddle.allclose(Tensor([8912897, 8, 32],"float32"), Tensor([8912897, 8, 32],"float32"), atol=0.0001, )

paddle.allclose(x=Tensor([2281701379],"float32"), y=Tensor([2281701379],"float32"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.argmax(Tensor([1, 2, 1014992, 1124],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1019527, 1119],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1024, 1114113],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1046653, 1090],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1055367, 1081],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1062245, 1074],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1063235, 1073],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1069214, 1067],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1100146, 1037],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1114113, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 2228225, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 496, 2300103],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 512, 2228225],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 1426064],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1089, 2, 1024, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1269, 2, 800, 1124],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1275, 2, 800, 1119],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([13, 1371215, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 2742430, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 4, 10969719, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([1309, 2, 800, 1090],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1320, 2, 800, 1081],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1328, 2, 800, 1074],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1330, 2, 800, 1073],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1337, 2, 800, 1067],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1376, 2, 800, 1037],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([2, 536870913, 4],"float16"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([3, 17674763, 3, 3, 3, 3],"float16"), axis=0, )
paddle.argmax(Tensor([3, 3, 17674763, 3, 3, 3],"float16"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 17674763, 3, 3],"float16"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 17674763, 3],"float16"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 17674763],"float16"), axis=0, )
paddle.argmax(Tensor([357913942, 3, 4],"float16"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([4, 16777217, 4, 4, 4],"float16"), axis=0, )
paddle.argmax(Tensor([4, 4, 16777217, 4, 4],"float16"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 16777217, 4],"float16"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 4, 16777217],"float16"), axis=0, )
paddle.argmax(Tensor([4353, 2, 512, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([4493, 2, 496, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([8912897, 2, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(x=Tensor([3, 1431655766],"float16"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([3, 3, 238609295, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 3, 477218589, 1],"float16"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 3, 477218589],"float16"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([3, 357913942, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 715827883, 2, 1],"float16"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 715827883],"int64"), keepdim=None, )
paddle.argmax(x=Tensor([3, 760567127],"int64"), dtype="int32", )
paddle.argmax(x=Tensor([357913942, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([357913942, 3, 4],"float16"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([715827883, 3, 2, 1],"float16"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([760567127, 3],"int64"), dtype="int32", )
paddle.argmin(Tensor([3, 17674763, 3, 3, 3, 3],"float16"), axis=0, )
paddle.argmin(Tensor([3, 3, 17674763, 3, 3, 3],"float16"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 17674763, 3, 3],"float16"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 17674763, 3],"float16"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 17674763],"float16"), axis=0, )
paddle.argmin(Tensor([4, 16777217, 4, 4, 4],"float16"), axis=0, )
paddle.argmin(Tensor([4, 4, 16777217, 4, 4],"float16"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 16777217, 4],"float16"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 4, 16777217],"float16"), axis=0, )
paddle.argmin(x=Tensor([2147483649, 1],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([3, 1431655766],"float16"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmin(x=Tensor([3, 3, 238609295, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 3, 477218589, 1],"float16"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 3, 477218589],"float16"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([3, 357913942, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 715827883, 2, 1],"float16"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 715827883],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([3, 760567127],"int64"), dtype="int32", )
paddle.argmin(x=Tensor([357913942, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([357913942, 3, 4],"float16"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([715827883, 3, 2, 1],"float16"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([760567127, 3],"int64"), dtype="int32", )
paddle.argsort(Tensor([2, 1140850690],"float32"), descending=True, )
paddle.assign(list[Tensor([100, 42949673],"float16"),], )
paddle.assign(list[Tensor([429496730, 10],"float16"),], )
paddle.atan2(Tensor([111, 116197, 333],"float16"), Tensor([116197, 333],"float16"), )
paddle.atan2(Tensor([111, 222, 174295],"float16"), Tensor([222, 174295],"float16"), )
paddle.atan2(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.atan2(Tensor([58099, 222, 333],"float16"), Tensor([222, 333],"float16"), )
paddle.bincount(x=Tensor([4294967295],"int32"), )
paddle.bmm(Tensor([2, 35, 35],"float16"), Tensor([2, 35, 61356676],"float16"), )
paddle.bmm(x=Tensor([2, 2, 1073741825],"float16"), y=Tensor([2, 1073741825, 2],"float16"), )
paddle.bmm(x=Tensor([2, 2, 3],"float16"), y=Tensor([2, 3, 715827883],"float16"), )
paddle.bmm(x=Tensor([2, 715827883, 3],"float16"), y=Tensor([2, 3, 2],"float16"), )
paddle.broadcast_tensors(list[Tensor([1, 1],"float32"),Tensor([1, 2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 1],"float32"),Tensor([2281701379, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 2281701379],"float32"),Tensor([1, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 2281701379],"float32"),Tensor([1, 2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([2281701379],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379, 1],"float32"),Tensor([1, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379, 1],"float32"),Tensor([2281701379, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([1, 2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float16"),Tensor([2],"float16"),Tensor([2147483649, 2],"float16"),], )
paddle.broadcast_tensors(list[Tensor([4294967297],"float16"),Tensor([4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float16"),Tensor([2, 1],"float16"),Tensor([2, 2147483649],"float16"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float16"),Tensor([2, 2147483649],"float16"),Tensor([2, 1],"float16"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 2147483649],"float16"),Tensor([2, 1],"float16"),Tensor([2, 1],"float16"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 2147483649],"float16"),Tensor([2, 2147483649],"float16"),Tensor([2, 2147483649],"float16"),), )
paddle.broadcast_tensors(tuple(Tensor([4294967297, 1],"float16"),Tensor([4294967297, 1],"float16"),Tensor([4294967297, 1],"float16"),), )
paddle.clip(Tensor([103884, 1, 152, 272],"float16"), 0, 1, )
paddle.clip(Tensor([20, 1, 152, 1412819],"float16"), 0, 1, )
paddle.clip(Tensor([20, 1, 789517, 272],"float16"), 0, 1, )
paddle.clip(Tensor([20, 5195, 152, 272],"float16"), 0, 1, )
paddle.clip(x=Tensor([1431655766, 3],"float16"), min=1, max=Tensor([1],"float16"), )
paddle.clip(x=Tensor([3, 1431655766],"float16"), min=1, max=Tensor([1],"float16"), )
paddle.combinations(Tensor([2281701379],"int32"), 1, True, )
paddle.complex(real=Tensor([1],"float32"), imag=Tensor([2281701379],"float32"), )
paddle.complex(real=Tensor([2281701379],"float32"), imag=Tensor([1],"float32"), )
paddle.copysign(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
paddle.copysign(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), )
paddle.copysign(Tensor([107374183, 20, 2],"float16"), Tensor([107374183, 20, 2],"float16"), )
paddle.copysign(Tensor([11, 207427399],"float32"), Tensor([11, 207427399],"float32"), )
paddle.copysign(Tensor([114085069, 20],"float32"), Tensor([114085069, 20],"float32"), )
paddle.copysign(Tensor([12, 178956971, 2],"float16"), Tensor([12, 178956971, 2],"float16"), )
paddle.copysign(Tensor([12, 20, 17895698],"float16"), Tensor([12, 20, 17895698],"float16"), )
paddle.copysign(Tensor([12, 20, 9507090],"float32"), Tensor([12, 20, 9507090],"float32"), )
paddle.copysign(Tensor([12, 95070891, 2],"float32"), Tensor([12, 95070891, 2],"float32"), )
paddle.copysign(Tensor([1203073, 17, 5, 6, 7],"float16"), Tensor([1203073, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([134217729, 17],"float32"), Tensor([134217729, 17],"float32"), )
paddle.copysign(Tensor([2, 107374183, 4, 5],"float16"), Tensor([2, 107374183, 4, 5],"float16"), )
paddle.copysign(Tensor([2, 3, 143165577, 5],"float16"), Tensor([2, 3, 143165577, 5],"float16"), )
paddle.copysign(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), )
paddle.copysign(Tensor([20, 214748365],"float16"), Tensor([20, 214748365],"float16"), )
paddle.copysign(Tensor([214748365, 20],"float16"), Tensor([214748365, 20],"float16"), )
paddle.copysign(Tensor([214748365, 4, 5],"float16"), Tensor([4, 5],"float16"), )
paddle.copysign(Tensor([214748365, 4, 5],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.copysign(Tensor([286331154, 5],"float16"), Tensor([3, 286331154, 5],"float16"), )
paddle.copysign(Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.copysign(Tensor([3, 286331154, 5],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([3, 4, 357913942],"float16"), Tensor([357913942],"float16"), )
paddle.copysign(Tensor([3, 4, 357913942],"float16"), Tensor([4, 357913942],"float16"), )
paddle.copysign(Tensor([4, 357913942],"float16"), Tensor([3, 4, 357913942],"float16"), )
paddle.copysign(Tensor([4, 5],"float16"), Tensor([214748365, 4, 5],"float16"), )
paddle.copysign(Tensor([57042535, 20, 2],"float32"), Tensor([57042535, 20, 2],"float32"), )
paddle.copysign(Tensor([715827883, 6],"float16"), Tensor([715827883, 6],"float16"), )
paddle.copysign(Tensor([71582789, 3, 4, 5],"float16"), Tensor([71582789, 3, 4, 5],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 1052689],"float16"), Tensor([8, 17, 5, 6, 1052689],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 902305, 7],"float16"), Tensor([8, 17, 5, 902305, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 751921, 6, 7],"float16"), Tensor([8, 17, 751921, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 2556529, 5, 6, 7],"float16"), Tensor([8, 2556529, 5, 6, 7],"float16"), )
paddle.count_nonzero(Tensor([71582789, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.cummax(Tensor([100, 42949673],"float32"), axis=-1, )
paddle.cummax(Tensor([42949673, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 42949673],"float32"), axis=-1, )
paddle.cummin(Tensor([42949673, 100],"float32"), axis=-1, )
paddle.cumsum(Tensor([1, 2281701379],"float32"), axis=-1, )
paddle.cumsum(Tensor([10, 20, 11408507],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 228170138, 1],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 228170138],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 429496730],"float16"), dtype="float16", )
paddle.cumsum(Tensor([190141782, 12],"float32"), dtype="float32", )
paddle.cumsum(Tensor([2, 1140850690],"float32"), axis=-1, )
paddle.cumsum(Tensor([2, 1140850690],"float32"), axis=1, )
paddle.cumsum(Tensor([2281701379],"float32"), axis=0, )
paddle.cumsum(Tensor([3, 190141782, 4],"float32"), axis=1, )
paddle.cumsum(Tensor([3, 760567127],"float32"), axis=-1, )
paddle.cumsum(Tensor([357913942, 12],"float16"), dtype="float16", )
paddle.cumsum(Tensor([4, 1073741825],"float16"), axis=1, )
paddle.cumsum(Tensor([5, 456340276],"float32"), axis=-1, )
paddle.cumsum(Tensor([5, 858993460],"float16"), axis=Tensor([1],"int32"), )
paddle.cumsum(Tensor([760567127, 3],"float32"), axis=0, )
paddle.cumsum(Tensor([9, 23047489, 11],"float32"), axis=Tensor([1],"int64"), )
paddle.cumsum(x=Tensor([1, 1398102, 96, 32],"float16"), axis=2, )
paddle.cumsum(x=Tensor([1, 16, 8388609, 32],"float16"), axis=2, )
paddle.cumsum(x=Tensor([1, 16, 96, 2796203],"float16"), axis=2, )
paddle.cumsum(x=Tensor([2281701379],"float32"), )
paddle.cumsum(x=Tensor([4294967297],"float16"), )
paddle.cumsum(x=Tensor([715827883, 2, 1, 3],"float16"), axis=-4, )
paddle.cumsum(x=Tensor([715827883, 2, 1, 3],"float16"), axis=Tensor([1],"float16"), )
paddle.cumsum(x=Tensor([87382, 16, 96, 32],"float16"), axis=2, )
paddle.cumulative_trapezoid(y=Tensor([1073741825, 4],"float16"), x=Tensor([1073741825, 4],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([1431655765, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([1431655766, 3],"float16"), x=Tensor([1431655766, 3],"float16"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 1140850690],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 2147483649],"float16"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 477218589],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([357913942, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([760567127, 3],"float32"), x=Tensor([760567127, 3],"float32"), dx=None, axis=-1, )
paddle.diag(Tensor([2147483649],"float64"), padding_value=8, )
paddle.diag(Tensor([2147483649],"int64"), padding_value=-8, )
paddle.diag(Tensor([2147483649],"int64"), padding_value=8.0, )
paddle.diff(Tensor([2, 1140850690],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 1140850690],"float32"), )
paddle.diff(Tensor([2, 1140850690],"float32"), n=1, axis=0, prepend=Tensor([2, 1140850690],"float32"), append=Tensor([2, 1140850690],"float32"), )
paddle.diff(Tensor([2, 1140850690],"float32"), n=1, axis=0, prepend=Tensor([3, 1140850690],"float32"), append=None, )
paddle.diff(Tensor([2, 1140850690],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 1140850690],"float32"), )
paddle.diff(Tensor([2, 1140850690],"float32"), n=2, axis=0, prepend=Tensor([2, 1140850690],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([570425345, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([570425345, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([570425345, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([570425345, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 760567127],"float32"), n=1, axis=0, prepend=Tensor([3, 760567127],"float32"), append=None, )
paddle.diff(Tensor([2281701379],"float32"), )
paddle.diff(Tensor([2281701379],"float32"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(Tensor([2281701379],"float32"), n=2, axis=0, prepend=None, append=None, )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=None, append=None, )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=Tensor([3, 4],"float32"), append=None, )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=Tensor([570425345, 4],"float32"), append=None, )
paddle.diff(Tensor([570425345, 4],"float32"), n=1, axis=0, prepend=Tensor([570425345, 4],"float32"), append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([570425345, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([570425345, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([570425345, 4],"float32"), n=2, axis=0, prepend=Tensor([570425345, 4],"float32"), append=None, )
paddle.diff(x=Tensor([10, 429496730],"float16"), axis=0, prepend=Tensor([4, 429496730],"float16"), append=Tensor([4, 429496730],"float16"), )
paddle.diff(x=Tensor([10, 4],"float16"), axis=0, prepend=Tensor([1073741825, 4],"float16"), append=Tensor([4, 4],"float16"), )
paddle.diff(x=Tensor([10, 4],"float16"), axis=0, prepend=Tensor([4, 4],"float16"), append=Tensor([1073741825, 4],"float16"), )
paddle.diff(x=Tensor([1073741825, 4],"float16"), axis=0, prepend=Tensor([1073741825, 4],"float16"), append=Tensor([1073741825, 4],"float16"), )
paddle.diff(x=Tensor([1073741825, 4],"float16"), axis=0, prepend=Tensor([4, 4],"float16"), append=Tensor([4, 4],"float16"), )
paddle.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4],"float16"), )
paddle.diff(x=Tensor([10],"float16"), prepend=Tensor([4],"float16"), append=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([2281701379],"float32"), )
paddle.diff(x=Tensor([2281701379],"int32"), )
paddle.diff(x=Tensor([2281701379],"int64"), )
paddle.diff(x=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4],"float16"), )
paddle.diff(x=Tensor([4294967297],"float16"), prepend=Tensor([4],"float16"), append=Tensor([4],"float16"), )
paddle.digamma(Tensor([10, 10, 10, 4294968],"float16"), )
paddle.digamma(Tensor([10, 10, 21474837, 2],"float16"), )
paddle.digamma(Tensor([10, 10, 42949673],"float16"), )
paddle.digamma(Tensor([10, 21474837, 10, 2],"float16"), )
paddle.digamma(Tensor([10, 42949673, 10],"float16"), )
paddle.digamma(Tensor([1398102, 3, 32, 32],"float16"), )
paddle.digamma(Tensor([1431655766, 3],"float16"), )
paddle.digamma(Tensor([2, 1073741825, 2],"float16"), )
paddle.digamma(Tensor([2, 2147483649],"float16"), )
paddle.digamma(Tensor([2, 5, 429496730],"float16"), )
paddle.digamma(Tensor([21474837, 10, 10, 2],"float16"), )
paddle.digamma(Tensor([4294967297],"float16"), )
paddle.digamma(Tensor([42949673, 10, 10],"float16"), )
paddle.digamma(Tensor([429496730, 5, 2],"float16"), )
paddle.digamma(Tensor([8, 3, 32, 5592406],"float16"), )
paddle.digamma(Tensor([8, 3, 5592406, 32],"float16"), )
paddle.digamma(Tensor([8, 524289, 32, 32],"float16"), )
paddle.digamma(Tensor([858993460, 5],"float16"), )
paddle.digamma(x=Tensor([119304648, 6, 6],"float16"), )
paddle.digamma(x=Tensor([1431655766, 3],"float16"), )
paddle.digamma(x=Tensor([19884108, 6, 6, 6],"float16"), )
paddle.digamma(x=Tensor([3, 1431655766],"float16"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 6628036],"float16"), )
paddle.digamma(x=Tensor([3, 6, 6, 6628036, 6],"float16"), )
paddle.digamma(x=Tensor([3, 6, 6628036, 6, 6],"float16"), )
paddle.digamma(x=Tensor([3, 6628036, 6, 6, 6],"float16"), )
paddle.digamma(x=Tensor([3314018, 6, 6, 6, 6],"float16"), )
paddle.digamma(x=Tensor([6, 119304648, 6],"float16"), )
paddle.digamma(x=Tensor([6, 19884108, 6, 6],"float16"), )
paddle.digamma(x=Tensor([6, 6, 119304648],"float16"), )
paddle.digamma(x=Tensor([6, 6, 19884108, 6],"float16"), )
paddle.digamma(x=Tensor([6, 6, 6, 19884108],"float16"), )
paddle.dist(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), 0, )
paddle.dist(Tensor([190141782, 2, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([190141782, 2, 3, 2],"float32"), Tensor([190141782, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), 0, )
paddle.dist(Tensor([2, 190141782, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 190141782, 3, 2],"float32"), Tensor([1, 190141782, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 285212673, 2],"float32"), Tensor([1, 1, 285212673, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 190141782],"float32"), Tensor([1, 1, 3, 190141782],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 190141782],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 4],"float16"), )
paddle.dist(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 4],"float16"), p=1, )
paddle.dist(x=Tensor([1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), )
paddle.dist(x=Tensor([1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), p=4, )
paddle.dist(x=Tensor([10],"float16"), y=Tensor([429496730, 10],"float16"), )
paddle.dist(x=Tensor([10],"float16"), y=Tensor([429496730, 10],"float16"), p=4, )
paddle.dist(x=Tensor([2, 2147483649],"float16"), y=Tensor([2, 2147483649],"float16"), p=0, )
paddle.dist(x=Tensor([2147483649, 2],"float16"), y=Tensor([2147483649, 2],"float16"), p=0, )
paddle.dist(x=Tensor([4, 1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), )
paddle.dist(x=Tensor([4, 1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), p=1, )
paddle.dist(x=Tensor([4, 570425345],"float32"), y=Tensor([4, 570425345],"float32"), )
paddle.dist(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.dist(x=Tensor([570425345, 4],"float32"), y=Tensor([570425345, 4],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 1, 2281701379],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 2281701379, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 2281701379, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([2281701379, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 2281701379],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 2281701379],"float32"), Tensor([1, 1, 1, 2281701379],"float32"), )
paddle.divide(Tensor([1, 1, 2281701379, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 2281701379, 1],"float32"), Tensor([1, 1, 2281701379, 1],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.divide(Tensor([1, 2281701379, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 2281701379, 1, 1],"float32"), Tensor([1, 2281701379, 1, 1],"float32"), )
paddle.divide(Tensor([1, 2281701379],"float32"), Tensor([1, 1],"float32"), )
paddle.divide(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.divide(Tensor([1, 3],"float32"), Tensor([760567127, 3],"float32"), )
paddle.divide(Tensor([10, 20, 11408507],"float32"), Tensor([10, 20, 11408507],"float32"), )
paddle.divide(Tensor([10, 20, 11408507],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 11408507],"float32"), )
paddle.divide(Tensor([10, 228170138, 1],"float32"), Tensor([10, 228170138, 1],"float32"), )
paddle.divide(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
paddle.divide(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), )
paddle.divide(Tensor([104, 21939437],"float32"), Tensor([104, 1],"float32"), )
paddle.divide(Tensor([104, 21939437],"float32"), Tensor([104, 21939437],"float32"), )
paddle.divide(Tensor([114085069, 20, 1],"float32"), Tensor([114085069, 20, 1],"float32"), )
paddle.divide(Tensor([128, 33554433],"float16"), Tensor([128, 1],"float16"), )
paddle.divide(Tensor([128, 33554433],"float16"), Tensor([128, 33554433],"float16"), )
paddle.divide(Tensor([1426064, 40, 40],"float32"), Tensor([1426064, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), name="Normal_probs", )
paddle.divide(Tensor([152113426, 3, 1, 5],"float32"), Tensor([152113426, 3, 1, 5],"float32"), )
paddle.divide(Tensor([158452, 3, 3, 40, 40],"float32"), Tensor([158452, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([158452, 3, 40, 40, 3],"float32"), Tensor([158452, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([17825793, 128],"float32"), Tensor([17825793, 1],"float32"), )
paddle.divide(Tensor([190141782, 12],"float32"), Tensor([190141782, 12],"float32"), )
paddle.divide(Tensor([190141782, 3, 4],"float32"), Tensor([190141782, 3, 4],"float32"), )
paddle.divide(Tensor([1],"float16"), Tensor([4294967297],"float16"), )
paddle.divide(Tensor([1],"float32"), Tensor([2281701379],"float32"), )
paddle.divide(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), name="Normal_probs", )
paddle.divide(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), name="Normal_probs", )
paddle.divide(Tensor([2, 228170138, 1, 5],"float32"), Tensor([2, 228170138, 1, 5],"float32"), )
paddle.divide(Tensor([2, 285212673, 4],"float32"), Tensor([2, 285212673, 4],"float32"), )
paddle.divide(Tensor([2, 3, 1, 380283564],"float32"), Tensor([2, 3, 1, 380283564],"float32"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 3, 76056713, 5],"float32"), )
paddle.divide(Tensor([2, 3, 3, 126761188],"float32"), Tensor([2, 3, 1, 126761188],"float32"), )
paddle.divide(Tensor([2, 3, 3, 126761188],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.divide(Tensor([2, 3, 3, 126761188],"float32"), Tensor([3, 1, 126761188],"float32"), )
paddle.divide(Tensor([2, 3, 380283564],"float32"), Tensor([2, 3, 380283564],"float32"), )
paddle.divide(Tensor([2, 3, 76056713, 5],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([2, 3, 76056713, 5],"float32"), Tensor([2, 3, 76056713, 5],"float32"), )
paddle.divide(Tensor([2, 3, 95070891, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.divide(Tensor([2, 3, 95070891, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 95070891, 4],"float32"), Tensor([2, 3, 95070891, 1],"float32"), )
paddle.divide(Tensor([2, 3, 95070891, 4],"float32"), Tensor([2, 3, 95070891, 4],"float32"), )
paddle.divide(Tensor([2, 3, 95070891, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 95070891, 3, 4],"float32"), Tensor([2, 95070891, 1, 1],"float32"), )
paddle.divide(Tensor([2, 95070891, 3, 4],"float32"), Tensor([2, 95070891, 1, 4],"float32"), )
paddle.divide(Tensor([2281701379, 1, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([2281701379, 1, 1, 1],"float32"), Tensor([2281701379, 1, 1, 1],"float32"), )
paddle.divide(Tensor([2281701379, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.divide(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.divide(Tensor([2281701379],"float32"), Tensor([1],"float32"), )
paddle.divide(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.divide(Tensor([3, 100, 14316558],"float16"), Tensor([3, 100, 14316558],"float16"), )
paddle.divide(Tensor([3, 11930465, 120],"float16"), Tensor([3, 11930465, 120],"float16"), )
paddle.divide(Tensor([3, 158452, 3, 40, 40],"float32"), Tensor([3, 158452, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 158452, 40, 40, 3],"float32"), Tensor([3, 158452, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 19014179, 40],"float32"), Tensor([3, 19014179, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 158452, 40, 40],"float32"), Tensor([3, 3, 158452, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 2112687, 40, 3],"float32"), Tensor([3, 3, 2112687, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 2112687, 40],"float32"), Tensor([3, 3, 3, 2112687, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 2112687],"float32"), Tensor([3, 3, 3, 40, 2112687],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 2112687, 3],"float32"), Tensor([3, 3, 40, 2112687, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 158452],"float32"), Tensor([3, 3, 40, 40, 158452],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 6338060],"float32"), Tensor([3, 3, 40, 6338060],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 6338060, 40],"float32"), Tensor([3, 3, 6338060, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 19014179],"float32"), Tensor([3, 40, 19014179],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 475355],"float32"), Tensor([3, 40, 40, 475355],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 6338060, 3],"float32"), Tensor([3, 40, 6338060, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 475355, 40, 40],"float32"), Tensor([3, 475355, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 6338060, 40, 3],"float32"), Tensor([3, 6338060, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([357913942, 12],"float16"), Tensor([357913942, 12],"float16"), )
paddle.divide(Tensor([357914, 100, 120],"float16"), Tensor([357914, 100, 120],"float16"), )
paddle.divide(Tensor([4294967297],"float16"), Tensor([1],"float16"), )
paddle.divide(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.divide(Tensor([475355, 3, 40, 40],"float32"), Tensor([475355, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([475355, 40, 40, 3],"float32"), Tensor([475355, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([63380594, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([63380594, 3, 3, 4],"float32"), Tensor([63380594, 3, 1, 1],"float32"), )
paddle.divide(Tensor([63380594, 3, 3, 4],"float32"), Tensor([63380594, 3, 1, 4],"float32"), )
paddle.divide(Tensor([760567127, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.divide(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), )
paddle.divide(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([8388609, 512],"float16"), Tensor([8388609, 1],"float16"), )
paddle.divide(x=Tensor([187679, 12158],"float32"), y=Tensor([12158],"float32"), )
paddle.divide(x=Tensor([2147483649, 1],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.divide(x=Tensor([2281701379],"float32"), y=Tensor([2281701379],"float32"), )
paddle.divide(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 1431655766],"float16"), )
paddle.divide(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 1431655766],"float16"), name=None, )
paddle.divide(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 1],"float16"), name=None, )
paddle.divide(x=Tensor([3, 1],"float16"), y=Tensor([3, 1431655766],"float16"), )
paddle.divide(x=Tensor([3, 1],"float16"), y=Tensor([3, 1431655766],"float16"), name=None, )
paddle.divide(x=Tensor([3, 477218589, 3],"float16"), y=Tensor([3],"float16"), )
paddle.divide(x=Tensor([4294967297, 1],"float16"), y=Tensor([4294967297, 1],"float16"), name=None, )
paddle.divide(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.divide(x=Tensor([477218589, 3, 3],"float16"), y=Tensor([3],"float16"), )
paddle.divide(x=Tensor([760567127, 3],"float32"), y=Tensor([3],"float32"), )
paddle.einsum("..., ...", Tensor([214748365, 10],"float16"), Tensor([2, 214748365, 10],"float16"), )
paddle.einsum("..., ...", Tensor([3, 10],"float16"), Tensor([143165577, 3, 10],"float16"), )
paddle.einsum("..., ...", Tensor([3, 715827883],"float16"), Tensor([2, 3, 715827883],"float16"), )
paddle.einsum("...,...", Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("...,...->...", Tensor([171798692, 5, 5],"float16"), Tensor([171798692, 5, 5],"float16"), )
paddle.einsum("...,...->...", Tensor([5, 171798692, 5],"float16"), Tensor([5, 171798692, 5],"float16"), )
paddle.einsum("...,...->...", Tensor([5, 5, 171798692],"float16"), Tensor([5, 5, 171798692],"float16"), )
paddle.einsum("...i, ...i", Tensor([143165577, 3, 10],"float16"), Tensor([10],"float16"), )
paddle.einsum("...i, ...i", Tensor([2, 214748365, 10],"float16"), Tensor([10],"float16"), )
paddle.einsum("...ii,...i->...i", Tensor([176487, 13, 13, 12, 12],"float16"), Tensor([1, 12],"float16"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 13, 71698, 12, 12],"float16"), Tensor([1, 12],"float16"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 71698, 13, 12, 12],"float16"), Tensor([1, 12],"float16"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 3],"float64"), Tensor([3, 3, 238609295],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 238609295, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float16"), Tensor([4, 3, 1, 4],"float16"), Tensor([4, 3, 89478486, 4],"float16"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 14626291],"float32"), Tensor([13, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 1],"float32"), Tensor([13, 4, 5484860, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 6268411, 7],"float32"), Tensor([13, 4, 1, 7, 8],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 7, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 4, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 7, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 5, 11701033, 3],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 35103099],"float32"), Tensor([13, 1, 1, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 10324441, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([8388608, 2, 16, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 8148934, 7],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("i,i->i", Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("i,ij->", Tensor([2],"float16"), Tensor([2, 2147483649],"float16"), )
paddle.einsum("i,j->ii", Tensor([2],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("i->", Tensor([4294967297],"float16"), )
paddle.einsum("i..., i...", Tensor([1, 2147483649, 2],"float16"), Tensor([1],"float16"), )
paddle.einsum("i..., i...", Tensor([1, 3, 1431655766],"float16"), Tensor([1],"float16"), )
paddle.einsum("i..., i...", Tensor([1, 3, 2],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("i..., i...", Tensor([715827883, 3, 2],"float16"), Tensor([1],"float16"), )
paddle.einsum("i...->...", Tensor([2, 2147483649],"float16"), )
paddle.einsum("i...->...", Tensor([2, 214748365, 10],"float16"), )
paddle.einsum("i...->...", Tensor([2, 3, 715827883],"float16"), )
paddle.einsum("ij,i->", Tensor([2, 2147483649],"float16"), Tensor([2],"float16"), )
paddle.einsum("ij,ij->ij", Tensor([4, 1073741825],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.einsum("ij,ij->ij", Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.einsum("ij,j", Tensor([1, 1],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("ij,j", Tensor([1, 4294967297],"float16"), Tensor([1],"float16"), )
paddle.einsum("ij,j", Tensor([4294967297, 1],"float16"), Tensor([1],"float16"), )
paddle.einsum("ij,j->i", Tensor([4, 1073741825],"float16"), Tensor([1073741825],"float16"), )
paddle.einsum("ij,kj->ik", Tensor([4, 1073741825],"float16"), Tensor([2, 1073741825],"float16"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 357913942],"float16"), Tensor([4, 3, 2],"float16"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 5],"float16"), Tensor([4, 3, 357913942],"float16"), )
paddle.einsum("ijk,jk->i", Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 4, 357913942],"float16"), Tensor([4, 357913942],"float16"), )
paddle.einsum("ji,i->", Tensor([2147483649, 2],"float16"), Tensor([2],"float16"), )
paddle.einsum("ji,j", Tensor([1, 4294967297],"float16"), Tensor([1],"float16"), )
paddle.einsum("ji,j", Tensor([1, 4],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("ji,j", Tensor([1073741825, 4],"float16"), Tensor([1073741825],"float16"), )
paddle.einsum("ji,j", Tensor([1073741825, 4],"float16"), Tensor([1],"float16"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 8],"float32"), Tensor([20372334, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([5093084, 14, 4, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.expand(x=Tensor([2281701379, 1, 1],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([2281701379],"int64"), shape=Tensor([2281701379],"int32"), )
paddle.expand(x=Tensor([2281701379],"int64"), shape=Tensor([2],"int32"), )
paddle.expand(x=Tensor([4294967297],"float16"), shape=Tensor([2281701379],"int32"), )
paddle.expand(x=Tensor([4294967297],"float16"), shape=Tensor([2],"int32"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 1, 1, 2281701379],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 1, 2281701379, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 2281701379, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 2281701379, 1, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([2281701379],"int32"), y=Tensor([2281701379],"int32"), )
paddle.fft.fftshift(x=Tensor([2, 1073741825, 2],"float16"), )
paddle.fft.fftshift(x=Tensor([2, 4, 536870913],"float16"), )
paddle.fft.fftshift(x=Tensor([214748365, 5, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 268435457, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 5, 214748365],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 53687092],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 5, 53687092, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 67108865, 4, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4294967297],"float16"), )
paddle.fft.fftshift(x=Tensor([536870913, 4, 2],"float16"), )
paddle.fft.fftshift(x=Tensor([53687092, 5, 4, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([2, 1073741825, 2],"float16"), )
paddle.fft.ifftshift(x=Tensor([2, 4, 536870913],"float16"), )
paddle.fft.ifftshift(x=Tensor([214748365, 5, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 268435457, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 214748365],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 53687092],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 53687092, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 67108865, 4, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4294967297],"float16"), )
paddle.fft.ifftshift(x=Tensor([536870913, 4, 2],"float16"), )
paddle.fft.ifftshift(x=Tensor([53687092, 5, 4, 4],"float16"), )
paddle.floor_divide(Tensor([4294967297],"int8"), Tensor([4294967297],"int8"), )
paddle.floor_divide(Tensor([4294967297],"uint8"), Tensor([4294967297],"uint8"), )
paddle.frac(Tensor([10, 20, 11408507],"float32"), )
paddle.frac(Tensor([10, 228170138, 1],"float32"), )
paddle.frac(Tensor([114085069, 20, 1],"float32"), )
paddle.frac(Tensor([1431655765, 3],"int32"), )
paddle.frac(Tensor([1431655766, 3],"float16"), )
paddle.frac(Tensor([2, 1073741825],"int64"), )
paddle.frac(Tensor([2, 1140850690],"float32"), )
paddle.frac(Tensor([2, 2147483648],"int32"), )
paddle.frac(Tensor([2, 2147483649],"float16"), )
paddle.frac(Tensor([715827883, 3],"int64"), )
paddle.frac(Tensor([760567127, 3],"float32"), )
paddle.gather_nd(Tensor([760567127, 3],"float32"), Tensor([760567127],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 1073741825, 2],"float16"), index=Tensor([1, 1, 1, 1073741825],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 1073741825, 2],"float16"), index=Tensor([1073741825],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 2281701379, 2],"float64"), index=Tensor([1, 1, 1, 2281701379],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 2281701379, 2],"float64"), index=Tensor([2281701379],"int64"), )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 85899346, 5],"float16"), Tensor([15, 85899346, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 85899346, 5],"float16"), Tensor([15, 85899346, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 3, 253522376],"float32"), Tensor([4, 253522376],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.histogram(input=Tensor([1073741824, 4],"float32"), )
paddle.histogram(input=Tensor([1073741824, 4],"int32"), )
paddle.histogram(input=Tensor([4, 1073741824],"float32"), )
paddle.histogram(input=Tensor([4, 1073741824],"int32"), )
paddle.histogram(input=Tensor([4, 570425345],"float32"), )
paddle.histogram(input=Tensor([4, 570425345],"int32"), )
paddle.histogram(input=Tensor([570425345, 4],"float32"), )
paddle.histogram(input=Tensor([570425345, 4],"int32"), )
paddle.histogramdd(Tensor([1073741825, 2],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.increment(x=Tensor([2281701379],"int64"), value=1.0, )
paddle.incubate.nn.functional.blha_get_max_len(Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), Tensor([2281701379],"float32"), )
paddle.incubate.nn.functional.fused_bias_act(Tensor([101, 42524429],"float16"), Tensor([42524429],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"float16"), Tensor([2147483648],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([2147483648],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([9256396],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_dropout_residual_layer_norm(Tensor([17409, 128, 1024],"float32"), Tensor([17409, 128, 1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 0.0, 1e-05, )
paddle.incubate.nn.functional.fused_bias_dropout_residual_layer_norm(Tensor([8, 278529, 1024],"float32"), Tensor([8, 278529, 1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 0.0, 1e-05, )
paddle.incubate.nn.functional.fused_bias_dropout_residual_layer_norm(x=Tensor([1, 2, 4],"float32"), residual=Tensor([285212673, 2, 4],"float32"), bias=None, ln_scale=Tensor([4],"float32"), ln_bias=None, dropout_rate=0.0, ln_epsilon=1e-05, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_bias_dropout_residual_layer_norm(x=Tensor([1, 2, 4],"float32"), residual=Tensor([285212673, 2, 4],"float32"), bias=Tensor([4],"float32"), ln_scale=Tensor([4],"float32"), ln_bias=Tensor([4],"float32"), dropout_rate=0.0, ln_epsilon=1e-05, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_bias_dropout_residual_layer_norm(x=Tensor([285212673, 2, 4],"float32"), residual=Tensor([1, 2, 4],"float32"), bias=None, ln_scale=Tensor([4],"float32"), ln_bias=None, dropout_rate=0.0, ln_epsilon=1e-05, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_bias_dropout_residual_layer_norm(x=Tensor([285212673, 2, 4],"float32"), residual=Tensor([1, 2, 4],"float32"), bias=Tensor([4],"float32"), ln_scale=Tensor([4],"float32"), ln_bias=Tensor([4],"float32"), dropout_rate=0.0, ln_epsilon=1e-05, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([536870912, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 536870912],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 536870912],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([1073741824, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([1073741824, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 570425345, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 570425345, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 570425345, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([285212673, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([285212673, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([285212673, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 272731, 508],"float16"), Tensor([508, 130],"float16"), Tensor([130, 508],"float16"), Tensor([130],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 1413749],"float16"), Tensor([1413749, 130],"float16"), Tensor([130, 1413749],"float16"), Tensor([130],"float16"), Tensor([1413749],"float16"), Tensor([1413749],"float16"), Tensor([1413749],"float16"), Tensor([1413749],"float16"), Tensor([1413749],"float16"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float16"), Tensor([508, 130],"float16"), Tensor([130, 508],"float16"), Tensor([130],"float16"), Tensor([508],"float16"), Tensor([4294967297],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float16"), Tensor([508, 130],"float16"), Tensor([130, 508],"float16"), Tensor([130],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([4294967297],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 33038210],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 33038210],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 16519105],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 1398102],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 1398102],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([4, 32, 128],"float16"), Tensor([128, 256],"float16"), Tensor([256, 16777216],"float16"), Tensor([256],"float16"), Tensor([128],"float16"), Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([64, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 1398102],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([64, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 1398102],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([86273, 98, 508],"float16"), Tensor([508, 130],"float16"), Tensor([130, 508],"float16"), Tensor([130],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), Tensor([508],"float16"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([96, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 1398102],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 1140850690, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 1140850690, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 1140850690, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([1073741824, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 1073741824],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 1073741824],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 1073741824],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([570425345, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([570425345, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([570425345, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([1, 4294967295],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([100, 42949673],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([100, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 42524429],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 42524429],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([104, 41297763],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([104, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([123, 34918434],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([123, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([131, 32786010],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([131, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([136, 31580642],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([136, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 268435456],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 268435456],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 2147483648],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([2, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 2147483648],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([5592406, 768],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([123, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([5592406, 768],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([131, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([5592406, 768],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([136, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 72796056],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([60, 71582789],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([60, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([64, 67108864],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([64, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67, 64103990],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([67, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([60, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([67, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([67108864, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([60, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([67, 64],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1048577, 4096],"float16"), Tensor([4096, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4194305, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1024, 4097, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1025, 1024, 4096],"float16"), Tensor([4096, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 1024],"float16"), Tensor([1024, 4194305],"float16"), Tensor([4194305],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 32769, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 4294968],"float16"), Tensor([4294968, 1000],"float16"), Tensor([1000],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 49, 684785],"float16"), Tensor([684785, 1024],"float16"), Tensor([1024],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 49, 684785],"float16"), Tensor([684785, 3072],"float16"), Tensor([3072],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 49, 684785],"float16"), Tensor([684785, 4096],"float16"), Tensor([4096],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 8193, 4096],"float16"), Tensor([4096, 1024],"float16"), Tensor([1024],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([2097153, 2, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([21400, 49, 4096],"float16"), Tensor([4096, 1024],"float16"), Tensor([1024],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4097, 1024, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4194305, 1024],"float16"), Tensor([1024, 1000],"float16"), Tensor([1000],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([85599, 49, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), False, None, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([7, 613566757],"float16"), Tensor([613566757],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([613566757, 7],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 613566757],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 613566757],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), True, False, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 67108865, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([100, 42949673],"float16"), Tensor([42949673],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([101, 42524429],"float16"), Tensor([42524429],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([104, 41297763],"float16"), Tensor([41297763],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([123, 34918434],"float16"), Tensor([34918434],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([131, 32786010],"float16"), Tensor([32786010],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([136, 31580642],"float16"), Tensor([31580642],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([16777216, 256],"float16"), Tensor([256],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([16777216, 256],"float32"), Tensor([256],"float32"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([16777217, 256],"float16"), Tensor([256],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 2147483649],"float16"), Tensor([2147483649],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 2147483649],"float16"), Tensor([2147483649],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1140850690],"float32"), Tensor([1140850690],"float32"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 2147483649],"float16"), Tensor([2147483649],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 33554433, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 4194305, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([5592406, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([64, 67108865],"float16"), Tensor([67108865],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67108864, 1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67108864, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67108865, 1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67108865, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8388608, 1, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8388608, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8388609, 1, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8388609, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8912897, 256],"float32"), Tensor([256],"float32"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 16777216, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([16777216, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 67108864, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 134217728],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([16777216, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 67108864, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 134217728],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 16777216, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([67108864, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 16777216, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 134217728],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([67108864, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 16777216, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 134217728],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 138547333],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 134217728, 32],"float32"), Tensor([1, 1, 134217728, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 263173, 8, 1020],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8388608, 32],"float16"), mask=Tensor([2, 1, 8388608, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8388608, 8, 32],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2097152, 8, 8, 32],"float16"), mask=Tensor([2097152, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2796203, 3, 16, 32],"float16"), mask=Tensor([2796203, 1, 16, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([6, 2796203, 8, 32],"float16"), mask=Tensor([6, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([65794, 8, 8, 1020],"float16"), mask=Tensor([65794, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([7, 1198373, 16, 32],"float16"), mask=Tensor([7, 1, 16, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 16, 1024, 262145],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 16, 262145, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 2228225, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 17825793, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 17825793],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 33554433],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 33554433, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4194304, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4194305, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1048576, 4, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1048577, 4, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([16, 2, 1024, 131073],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([16, 2, 131073, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([2, 1, 1024, 2097153],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([2, 1, 2097153, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([2, 2, 1024, 1048577],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([2, 2, 1048577, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([557057, 4, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 134217729, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 134217729],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 71303169],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 71303169, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 2228225, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 4194304, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 4194305, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([202566, 11, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([2228225, 1, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 3395389],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 3395389, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4194304, 1, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4194305, 1, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 291034],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 291034, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 926016],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 926016, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 318318, 32, 32],"float32"), )
paddle.index_fill(Tensor([107374183, 40],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([128],"int64"), Tensor([2147483649],"int64"), 0, 5, )
paddle.index_fill(Tensor([128],"int64"), Tensor([2147483649],"int64"), 0, 6, )
paddle.index_fill(Tensor([128],"int64"), Tensor([2147483649],"int64"), 0, 7, )
paddle.index_fill(Tensor([4],"int64"), Tensor([2147483649],"int64"), 0, 2, )
paddle.index_fill(Tensor([8],"int64"), Tensor([2147483649],"int64"), 0, 2, )
paddle.index_sample(Tensor([1, 32000],"float16"), Tensor([2281701379, 1],"int64"), )
paddle.index_sample(Tensor([1, 99],"float16"), Tensor([2281701379, 1],"int64"), )
paddle.index_sample(Tensor([134217729, 32],"float16"), Tensor([134217729, 1],"int64"), )
paddle.index_sample(Tensor([1865664, 2303],"float16"), Tensor([1865664, 1223],"int64"), )
paddle.index_sample(Tensor([1865664, 2303],"float16"), Tensor([1865664, 1],"int64"), )
paddle.index_sample(Tensor([5460096, 787],"float16"), Tensor([5460096, 1],"int64"), )
paddle.index_sample(Tensor([5460096, 787],"float16"), Tensor([5460096, 418],"int64"), )
paddle.index_sample(Tensor([831232, 5167],"float16"), Tensor([831232, 1],"int64"), )
paddle.index_sample(Tensor([831232, 5167],"float16"), Tensor([831232, 2745],"int64"), )
paddle.index_sample(Tensor([932832, 4605],"float16"), Tensor([932832, 1],"int64"), )
paddle.index_sample(Tensor([932832, 4605],"float16"), Tensor([932832, 2446],"int64"), )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([4294967295],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([4294967295],"bfloat16"), True, True, )
paddle.isin(Tensor([4, 1073741824],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 1073741824],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([1431655765, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([1431655765, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([536870912, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([536870912, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.kthvalue(Tensor([1677722, 128, 10],"float64"), 2, -1, )
paddle.kthvalue(Tensor([1677722, 128, 10],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 107374183, 10],"float64"), 2, -1, )
paddle.kthvalue(Tensor([2, 107374183, 10],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 128, 16777217],"float16"), 2, -1, )
paddle.kthvalue(Tensor([2, 128, 16777217],"float16"), 2, 2, )
paddle.kthvalue(Tensor([2, 128, 8388609],"float64"), 2, -1, )
paddle.kthvalue(Tensor([2, 128, 8388609],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 30, 35791395],"float64"), 244, -1, )
paddle.kthvalue(Tensor([2, 30, 35791395],"float64"), 244, 2, )
paddle.kthvalue(Tensor([2, 4294968, 250],"float64"), 244, -1, )
paddle.kthvalue(Tensor([2, 4294968, 250],"float64"), 244, 2, )
paddle.kthvalue(Tensor([2, 8589935, 250],"float16"), 244, -1, )
paddle.kthvalue(Tensor([2, 8589935, 250],"float16"), 244, 2, )
paddle.kthvalue(Tensor([2281701379],"float32"), 1, )
paddle.kthvalue(Tensor([2281701379],"float32"), k=2, )
paddle.kthvalue(Tensor([285213, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([285213, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([285213, 200, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([286332, 30, 250],"float64"), 244, -1, )
paddle.kthvalue(Tensor([286332, 30, 250],"float64"), 244, 2, )
paddle.kthvalue(Tensor([30, 1901418, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 1901418, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 1901418, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 200, 380284],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 380284],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 380284],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 200, 715828],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 715828],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 715828],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 3579140, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 3579140, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 3579140, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([4294967295],"float32"), 1, )
paddle.kthvalue(Tensor([4294967295],"float32"), k=2, )
paddle.kthvalue(Tensor([536871, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([536871, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([536871, 200, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([572663, 30, 250],"float16"), 244, -1, )
paddle.kthvalue(Tensor([572663, 30, 250],"float16"), 244, 2, )
paddle.kthvalue(x=Tensor([268435457, 2, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([268435457, 2, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([285212673, 2, 4],"float32"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 178956971, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 178956971, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([3, 2, 357913942],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 2, 357913942],"float64"), k=4, axis=2, keepdim=True, )
paddle.ldexp(Tensor([119304648, 6, 6],"float16"), Tensor([6],"int32"), )
paddle.ldexp(Tensor([5, 143165577, 6],"float16"), Tensor([6],"int32"), )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([2910334, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 27163112, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 27163112],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 95070891],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 95070891, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([35651585, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([2910334, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 3, 3],"float16"), Tensor([1, 3, 3],"float16"), Tensor([477218589, 3, 3],"float16"), )
paddle.lerp(Tensor([1, 3, 3],"float16"), Tensor([477218589, 3, 3],"float16"), Tensor([1, 3, 3],"float16"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([253522376, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([253522376, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 4],"float16"), Tensor([1, 3, 4],"float16"), Tensor([357913942, 3, 4],"float16"), )
paddle.lerp(Tensor([1, 3, 4],"float16"), Tensor([357913942, 3, 4],"float16"), Tensor([1, 3, 4],"float16"), )
paddle.lerp(Tensor([1, 3],"float16"), Tensor([1, 3],"float16"), Tensor([1431655766, 3],"float16"), )
paddle.lerp(Tensor([1, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1, 3],"float16"), )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([35651585, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1114113, 2048],"float32"), Tensor([1114113, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([11883862, 1, 1, 1],"float32"), Tensor([11883862, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([11883862, 1, 8, 8],"float32"), Tensor([11883862, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([11883862, 3, 8, 8],"float32"), Tensor([11883862, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([1431655766, 3],"float16"), Tensor([1, 3],"float16"), Tensor([1, 3],"float16"), )
paddle.lerp(Tensor([1],"float16"), Tensor([1],"float16"), Tensor([4294967297],"float16"), )
paddle.lerp(Tensor([1],"float16"), Tensor([4294967297],"float16"), Tensor([1],"float16"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([2281701379],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([2281701379],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 17825793, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 47535446, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 47535446],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 17825793, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1140850690],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 17825793, 8, 8],"float32"), Tensor([2, 17825793, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 17825793, 8, 8],"float32"), Tensor([2, 17825793, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1140850690],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1140850690],"float32"), )
paddle.lerp(Tensor([2, 3, 47535446, 8],"float32"), Tensor([2, 3, 47535446, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 47535446],"float32"), Tensor([2, 3, 8, 47535446],"float32"), 2.1, )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([114085069, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2281701379],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([253522376, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([2910334, 28, 28],"float32"), Tensor([2910334, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([2910334, 28, 28],"float32"), Tensor([2910334, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 27163112, 28],"float32"), Tensor([3, 27163112, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 27163112],"float32"), Tensor([3, 28, 27163112],"float32"), 1.2, )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float16"), Tensor([3, 6, 3, 1, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 1, 2, 5],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float16"), Tensor([3, 6, 3, 4, 1, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 4, 1, 5],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float16"), Tensor([3, 6, 3, 4, 2, 1],"float16"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float16"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 4, 2, 1],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 4, 2, 1],"float16"), Tensor([3, 6, 3, 4, 2, 1],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 4, 1, 5],"float16"), Tensor([3, 6, 3, 4, 1, 5],"float16"), )
paddle.lerp(Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 1, 2, 5],"float16"), Tensor([3, 6, 3, 1, 2, 5],"float16"), )
paddle.lerp(Tensor([3, 8, 95070891],"float32"), Tensor([3, 8, 95070891],"float32"), 2.1, )
paddle.lerp(Tensor([3, 95070891, 8],"float32"), Tensor([3, 95070891, 8],"float32"), 2.1, )
paddle.lerp(Tensor([300, 7605672],"float32"), Tensor([300, 7605672],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([35651585, 8, 8],"float32"), Tensor([35651585, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([35651585, 8, 8],"float32"), Tensor([35651585, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([357913942, 3, 4],"float16"), Tensor([1, 3, 4],"float16"), Tensor([1, 3, 4],"float16"), )
paddle.lerp(Tensor([4, 1, 6],"float16"), Tensor([4, 1, 6],"float16"), Tensor([4, 178956971, 6],"float16"), )
paddle.lerp(Tensor([4, 1, 6],"float16"), Tensor([4, 178956971, 6],"float16"), Tensor([4, 1, 6],"float16"), )
paddle.lerp(Tensor([4, 1073741825],"float16"), Tensor([4, 1],"float16"), Tensor([4, 1],"float16"), )
paddle.lerp(Tensor([4, 178956971, 6],"float16"), Tensor([4, 1, 6],"float16"), Tensor([4, 1, 6],"float16"), )
paddle.lerp(Tensor([4, 1],"float16"), Tensor([4, 1073741825],"float16"), Tensor([4, 1],"float16"), )
paddle.lerp(Tensor([4, 1],"float16"), Tensor([4, 1],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 570425345],"float32"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 570425345],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 570425345],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 7, 153391690],"float16"), Tensor([4, 7, 1],"float16"), Tensor([4, 7, 1],"float16"), )
paddle.lerp(Tensor([4, 7, 1],"float16"), Tensor([4, 7, 153391690],"float16"), Tensor([4, 7, 1],"float16"), )
paddle.lerp(Tensor([4, 7, 1],"float16"), Tensor([4, 7, 1],"float16"), Tensor([4, 7, 153391690],"float16"), )
paddle.lerp(Tensor([4294967297],"float16"), Tensor([1],"float16"), Tensor([1],"float16"), )
paddle.lerp(Tensor([477218589, 3, 3],"float16"), Tensor([1, 3, 3],"float16"), Tensor([1, 3, 3],"float16"), )
paddle.lerp(Tensor([5, 1, 4],"float16"), Tensor([5, 1, 4],"float16"), Tensor([5, 214748365, 4],"float16"), )
paddle.lerp(Tensor([5, 1, 4],"float16"), Tensor([5, 214748365, 4],"float16"), Tensor([5, 1, 4],"float16"), )
paddle.lerp(Tensor([5, 1],"float16"), Tensor([5, 1],"float16"), Tensor([5, 858993460],"float16"), )
paddle.lerp(Tensor([5, 1],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 1],"float16"), )
paddle.lerp(Tensor([5, 214748365, 4],"float16"), Tensor([5, 1, 4],"float16"), Tensor([5, 1, 4],"float16"), )
paddle.lerp(Tensor([5, 858993460],"float16"), Tensor([5, 1],"float16"), Tensor([5, 1],"float16"), )
paddle.lerp(Tensor([7, 1],"float16"), Tensor([7, 1],"float16"), Tensor([7, 613566757],"float16"), )
paddle.lerp(Tensor([7, 1],"float16"), Tensor([7, 613566757],"float16"), Tensor([7, 1],"float16"), )
paddle.lerp(Tensor([7, 613566757],"float16"), Tensor([7, 1],"float16"), Tensor([7, 1],"float16"), )
paddle.lerp(x=Tensor([214748365, 5, 4],"float16"), y=Tensor([214748365, 5, 4],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([2281701379],"float32"), y=Tensor([2281701379],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([4, 1073741825],"float16"), y=Tensor([1],"float16"), weight=0.2, )
paddle.lerp(x=Tensor([4, 1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([4, 268435457, 4],"float16"), y=Tensor([4, 268435457, 4],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 214748365],"float16"), y=Tensor([4, 5, 214748365],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 53687092],"float16"), y=Tensor([4, 5, 4, 53687092],"float16"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 53687092],"float16"), y=Tensor([4, 5, 4, 53687092],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 53687092],"float16"), y=Tensor([4, 5, 4, 53687092],"float16"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 71582789, 3],"float16"), y=Tensor([4, 5, 71582789, 3],"float16"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 71582789, 3],"float16"), y=Tensor([4, 5, 71582789, 3],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 71582789, 3],"float16"), y=Tensor([4, 5, 71582789, 3],"float16"), weight=1.0, )
paddle.lerp(x=Tensor([4, 89478486, 4, 3],"float16"), y=Tensor([4, 89478486, 4, 3],"float16"), weight=0.0, )
paddle.lerp(x=Tensor([4, 89478486, 4, 3],"float16"), y=Tensor([4, 89478486, 4, 3],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([4, 89478486, 4, 3],"float16"), y=Tensor([4, 89478486, 4, 3],"float16"), weight=1.0, )
paddle.lerp(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([71582789, 5, 4, 3],"float16"), y=Tensor([71582789, 5, 4, 3],"float16"), weight=0.0, )
paddle.lerp(x=Tensor([71582789, 5, 4, 3],"float16"), y=Tensor([71582789, 5, 4, 3],"float16"), weight=0.5, )
paddle.lerp(x=Tensor([71582789, 5, 4, 3],"float16"), y=Tensor([71582789, 5, 4, 3],"float16"), weight=1.0, )
paddle.lerp(x=Tensor([858993460, 5],"float16"), y=Tensor([1],"float16"), weight=0.2, )
paddle.lerp(x=Tensor([858993460, 5],"float16"), y=Tensor([858993460, 5],"float16"), weight=0.5, )
paddle.lgamma(Tensor([10, 10, 10, 4294968],"float16"), )
paddle.lgamma(Tensor([10, 10, 21474837, 2],"float16"), )
paddle.lgamma(Tensor([10, 10, 42949673],"float16"), )
paddle.lgamma(Tensor([10, 20, 21474837],"float16"), )
paddle.lgamma(Tensor([10, 214748365, 2],"float16"), )
paddle.lgamma(Tensor([10, 21474837, 10, 2],"float16"), )
paddle.lgamma(Tensor([10, 42949673, 10],"float16"), )
paddle.lgamma(Tensor([10, 429496730],"float16"), )
paddle.lgamma(Tensor([100, 42949673],"float16"), )
paddle.lgamma(Tensor([107374183, 20, 2],"float16"), )
paddle.lgamma(Tensor([114, 37675152],"float16"), )
paddle.lgamma(Tensor([1431655766, 3],"float16"), )
paddle.lgamma(Tensor([2, 1073741825, 2],"float16"), )
paddle.lgamma(Tensor([2, 2147483649],"float16"), )
paddle.lgamma(Tensor([2, 5, 429496730],"float16"), )
paddle.lgamma(Tensor([2147483649, 2],"float16"), )
paddle.lgamma(Tensor([21474837, 10, 10, 2],"float16"), )
paddle.lgamma(Tensor([400, 10737419],"float16"), )
paddle.lgamma(Tensor([4294967297, 1, 1],"float16"), )
paddle.lgamma(Tensor([4294967297, 1],"float16"), )
paddle.lgamma(Tensor([4294967297],"float16"), )
paddle.lgamma(Tensor([42949673, 10, 10],"float16"), )
paddle.lgamma(Tensor([42949673, 100],"float16"), )
paddle.lgamma(Tensor([429496730, 5, 2],"float16"), )
paddle.lgamma(Tensor([858993460, 5],"float16"), )
paddle.lgamma(Tensor([9, 1, 477218589],"float16"), )
paddle.lgamma(Tensor([9, 477218589, 1],"float16"), )
paddle.lgamma(Tensor([91, 47197443],"float16"), )
paddle.lgamma(x=Tensor([119304648, 6, 6],"float16"), )
paddle.lgamma(x=Tensor([1431655766, 3],"float16"), )
paddle.lgamma(x=Tensor([3, 1431655766],"float16"), )
paddle.lgamma(x=Tensor([6, 119304648, 6],"float16"), )
paddle.lgamma(x=Tensor([6, 6, 119304648],"float16"), )
paddle.lgamma(x=Tensor([6, 715827883],"float16"), )
paddle.lgamma(x=Tensor([715827883, 6],"float16"), )
paddle.linalg.cholesky(Tensor([1140850690, 2],"float32"), )
paddle.linalg.cholesky(Tensor([1431655766, 3],"float16"), )
paddle.linalg.cholesky(Tensor([2, 1140850690],"float32"), )
paddle.linalg.cholesky(Tensor([2, 2147483649],"float16"), )
paddle.linalg.cholesky(Tensor([2147483649, 2],"float16"), )
paddle.linalg.cholesky(Tensor([3, 1431655766],"float16"), )
paddle.linalg.cond(Tensor([142606337, 4, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), math.inf, )
paddle.linalg.corrcoef(Tensor([4, 1073741825],"float16"), )
paddle.linalg.corrcoef(Tensor([858993460, 5],"float16"), rowvar=False, )
paddle.linalg.cov(Tensor([10],"float16"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([4294967297],"float16"), )
paddle.linalg.cov(Tensor([20, 10],"float16"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([4294967297],"float16"), )
paddle.linalg.det(Tensor([253522376, 3, 3],"float32"), )
paddle.linalg.det(Tensor([3, 30422686, 5, 5],"float32"), )
paddle.linalg.det(Tensor([30422686, 3, 5, 5],"float32"), )
paddle.linalg.eigh(Tensor([1073741825, 4],"float16"), "U", )
paddle.linalg.eigh(Tensor([32, 71303169],"float32"), "L", )
paddle.linalg.eigh(Tensor([4, 1073741825],"float16"), "U", )
paddle.linalg.eigh(Tensor([4, 570425345],"float32"), "U", )
paddle.linalg.eigh(Tensor([456340276, 5],"float32"), )
paddle.linalg.eigh(Tensor([5, 456340276],"float32"), )
paddle.linalg.eigh(Tensor([570425345, 4],"float32"), "U", )
paddle.linalg.eigh(Tensor([71303169, 32],"float32"), "L", )
paddle.linalg.lstsq(Tensor([253522376, 9],"float32"), Tensor([253522376, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lu(Tensor([152113426, 3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([152113426, 5, 3],"float32"), )
paddle.linalg.lu(Tensor([152113426, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([18253612, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([2, 429496730, 5],"float32"), )
paddle.linalg.lu(Tensor([2, 429496730, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 760567127],"float32"), )
paddle.linalg.lu(Tensor([3, 760567127],"float32"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 760567127],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([30422686, 5, 5, 3],"float32"), )
paddle.linalg.lu(Tensor([30422686, 5, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([456340276, 5],"float32"), )
paddle.linalg.lu(Tensor([456340276, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 456340276],"float32"), )
paddle.linalg.lu(Tensor([5, 456340276],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([760567127, 3],"float32"), )
paddle.linalg.lu(Tensor([760567127, 3],"float32"), get_infos=False, )
paddle.linalg.lu(Tensor([760567127, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float32"), Tensor([2, 1140850690],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 76056713],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float64"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 30422686],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 5, 152113426],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float64"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 114085069],"float32"), Tensor([4, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 3],"float32"), Tensor([4, 570425345],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 3],"float64"), Tensor([4, 570425345],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 22817014],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 5, 114085069],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3, 3, 3],"float64"), Tensor([5, 3, 152113426],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3],"float64"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 456340276],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 5],"float32"), Tensor([2281701379],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_rank(Tensor([3, 47721859, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(x=Tensor([2, 67108865, 4, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 1073741824],"float32"), tol=None, hermitian=False, )
paddle.linalg.multi_dot(list[Tensor([1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 536870913],"float16"),Tensor([536870913, 3],"float16"),Tensor([3, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([858993460],"float16"),Tensor([858993460, 5],"float16"),Tensor([5, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.norm(Tensor([1, 2281701379],"float32"), 2.0, )
paddle.linalg.norm(Tensor([10, 10, 22817014],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 22817014],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 22817014],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 22817014],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 22817014],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 22817014],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 42949673],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 42949673],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 42949673],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 42949673],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 42949673],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 42949673],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 11408507, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([1140850690, 2],"float32"), 2.0, )
paddle.linalg.norm(Tensor([11408507, 10, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([2, 107374183, 4, 5],"float16"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2281701379],"float32"), )
paddle.linalg.norm(Tensor([2281701379],"float32"), 2, )
paddle.linalg.norm(Tensor([2281701379],"float32"), 2.0, )
paddle.linalg.norm(Tensor([2281701379],"float32"), p="fro", axis=0, )
paddle.linalg.norm(Tensor([2281701379],"float32"), p=1, )
paddle.linalg.norm(Tensor([2281701379],"float32"), p=1, axis=0, )
paddle.linalg.norm(Tensor([2281701379],"float32"), p=2, )
paddle.linalg.norm(Tensor([3, 20, 38028357],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 38028357],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 20, 38028357],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 38028357],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 71582789],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 71582789],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 20, 71582789],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 253522376, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 253522376, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([380283564, 6],"float32"), )
paddle.linalg.norm(Tensor([380283564, 6],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([38028357, 20, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([38028357, 20, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([4, 1073741824],"float32"), )
paddle.linalg.norm(Tensor([4, 1073741824],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 570425345],"float32"), )
paddle.linalg.norm(Tensor([4, 570425345],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4294967295],"float32"), )
paddle.linalg.norm(Tensor([4294967295],"float32"), 2.0, )
paddle.linalg.norm(Tensor([4294967295],"float32"), p=1, )
paddle.linalg.norm(Tensor([4294967295],"float32"), p=1, axis=0, )
paddle.linalg.norm(Tensor([50, 50, 1717987],"float16"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([715827883, 6],"float32"), )
paddle.linalg.norm(Tensor([715827883, 6],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(x=Tensor([1073741825, 4],"float16"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([1073741825, 4],"float16"), p=0, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([1431655766, 3],"float16"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([190141782, 3, 4],"float32"), )
paddle.linalg.norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 285212673, 4],"float32"), )
paddle.linalg.norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 380283564],"float32"), )
paddle.linalg.norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 715827883],"float16"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 536870913, 4],"float16"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 1431655766],"float16"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 3, 477218589],"float16"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 477218589],"float16"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 477218589],"float16"), axis=None, )
paddle.linalg.norm(x=Tensor([3, 3, 477218589],"float16"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 477218589],"float16"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 477218589],"float16"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=None, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 477218589, 3],"float16"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([357913942, 3, 4],"float16"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([4294967297],"float16"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=None, )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([477218589, 3, 3],"float16"), axis=list[1,], p=math.inf, )
paddle.linalg.qr(Tensor([2, 3, 380283564],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([2, 3, 380283564],"float32"), mode="r", )
paddle.linalg.qr(Tensor([2, 3, 380283564],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 5, 3, 76056713],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([2, 5, 3, 76056713],"float32"), mode="r", )
paddle.linalg.qr(Tensor([2, 5, 3, 76056713],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 152113426],"float32"), )
paddle.linalg.qr(Tensor([3, 5, 152113426],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 152113426],"float32"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 152113426],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5, 30422686],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 5, 30422686],"float32"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5, 30422686],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 114085069],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 114085069],"float32"), mode="r", )
paddle.linalg.qr(Tensor([4, 5, 114085069],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 5, 22817014],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 5, 22817014],"float32"), mode="r", )
paddle.linalg.qr(Tensor([4, 5, 5, 22817014],"float32"), mode="reduced", )
paddle.linalg.slogdet(Tensor([253522376, 3, 3],"float32"), )
paddle.linalg.slogdet(Tensor([3, 30422686, 5, 5],"float32"), )
paddle.linalg.slogdet(Tensor([30422686, 3, 5, 5],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 228170138],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([228170138, 10],"float32"), left=False, )
paddle.linalg.svd(Tensor([10737419, 100, 2],"float64"), full_matrices=False, )
paddle.linalg.svdvals(Tensor([10, 429496730],"float32"), )
paddle.linalg.svdvals(Tensor([357913942, 12],"float32"), )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 1140850690],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([1140850690, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1073741824, 2, 2],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1073741824, 2, 2],"float32"), Tensor([1073741824, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float32"), Tensor([2, 1140850690],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float64"), Tensor([1073741825, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([3, 3],"float64"), Tensor([1073741825, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([570425345, 2, 2],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([570425345, 2, 2],"float32"), Tensor([570425345, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float32"), y=Tensor([3, 760567127],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linalg.vector_norm(x=Tensor([1073741824, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1073741825, 4],"float16"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1073741825, 4],"float16"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([190141782, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 285212673, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 380283564],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 715827883],"float16"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 715827883],"float16"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 715827883],"float16"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 536870913, 4],"float16"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 536870913, 4],"float16"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 536870913, 4],"float16"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655765],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655765],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 1431655766],"float16"), p=2, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 715827883],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 715827883],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 760567127],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 760567127],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([357913942, 3, 4],"float16"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([357913942, 3, 4],"float16"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([357913942, 3, 4],"float16"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([357913942, 3, 4],"float16"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([536870913, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([536870913, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([570425345, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([570425345, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.log10(x=Tensor([1, 4294967297],"float16"), )
paddle.log10(x=Tensor([2, 2147483649],"float16"), )
paddle.log10(x=Tensor([2, 3, 2, 357913942],"float16"), )
paddle.log10(x=Tensor([2, 3, 357913942, 2],"float16"), )
paddle.log10(x=Tensor([2, 536870913, 2, 2],"float16"), )
paddle.log10(x=Tensor([2147483649, 2],"float16"), )
paddle.log10(x=Tensor([357913942, 3, 2, 2],"float16"), )
paddle.log10(x=Tensor([4294967297],"float16"), )
paddle.log2(Tensor([10, 429496730],"float16"), )
paddle.log2(Tensor([357913942, 12],"float16"), )
paddle.log2(Tensor([4, 5, 214748365],"float16"), )
paddle.log2(Tensor([4, 536870913, 2],"float16"), )
paddle.log2(Tensor([429496730, 5, 2],"float16"), )
paddle.log2(x=Tensor([1, 4294967297],"float16"), )
paddle.log2(x=Tensor([2, 2147483649],"float16"), )
paddle.log2(x=Tensor([2, 3, 2, 357913942],"float16"), )
paddle.log2(x=Tensor([2, 3, 357913942, 2],"float16"), )
paddle.log2(x=Tensor([2, 536870913, 2, 2],"float16"), )
paddle.log2(x=Tensor([2147483649, 2],"float16"), )
paddle.log2(x=Tensor([357913942, 3, 2, 2],"float16"), )
paddle.log2(x=Tensor([4294967297],"float16"), )
paddle.logaddexp(Tensor([1, 2, 3, 380283564],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float16"), Tensor([178956971, 2, 3, 4],"float16"), )
paddle.logaddexp(Tensor([178956971, 2, 3, 4],"float16"), Tensor([1, 2, 3, 4],"float16"), )
paddle.logaddexp(Tensor([95070891, 2, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logcumsumexp(Tensor([10, 10, 42949673],"float32"), )
paddle.logcumsumexp(Tensor([10, 42949673, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 429496730],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([10, 429496730],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([10, 429496730],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([10, 429496730],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([1073741824, 4],"float32"), )
paddle.logcumsumexp(Tensor([1073741824, 4],"float32"), dtype="float32", )
paddle.logcumsumexp(Tensor([357913942, 12],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([357913942, 12],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([357913942, 12],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([357913942, 12],"float32"), dtype="float32", axis=None, )
paddle.logsumexp(Tensor([2, 107374183, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 107374183, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 107374183, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 143165577, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 143165577, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 143165577, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 178956971],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 178956971],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 178956971],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 89478486],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 71582789, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 53687092, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([3, 1431655765],"float32"), axis=None, )
paddle.logsumexp(Tensor([3, 1431655765],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([30, 200, 715828],"float32"), )
paddle.logsumexp(Tensor([30, 200, 715828],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([30, 3579140, 40],"float32"), )
paddle.logsumexp(Tensor([30, 3579140, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([35791395, 3, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([536871, 200, 40],"float32"), )
paddle.logsumexp(Tensor([536871, 200, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([71582789, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([71582789, 3, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([71582789, 3, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([858993459, 5],"float32"), axis=None, )
paddle.logsumexp(Tensor([858993459, 5],"float32"), keepdim=True, )
paddle.logsumexp(x=Tensor([2, 1073741825, 2],"float16"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 715827883],"float16"), axis=0, keepdim=True, )
paddle.masked_fill(Tensor([3, 1431655765],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 14316558],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3314018, 8, 9, 18],"float16"), Tensor([3314018, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), Tensor([4294967295],"float16"), )
paddle.masked_fill(Tensor([4294967297],"float16"), Tensor([4294967297],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([4294967297],"float16"), Tensor([4294967297],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([4294967297],"float16"), Tensor([4294967297],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 4418691, 9, 18],"float16"), Tensor([6, 4418691, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 4971027, 18],"float16"), Tensor([6, 8, 4971027, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 9942054],"float16"), Tensor([6, 8, 9, 9942054],"bool"), Tensor([1],"float16"), )
paddle.matmul(Tensor([100, 4194305],"float16"), Tensor([1024, 4194305],"float16"), False, True, )
paddle.matmul(Tensor([126761188, 18],"float32"), Tensor([126761188],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1431655766],"float16"), Tensor([1431655766, 3],"float16"), False, False, )
paddle.matmul(Tensor([1431655766],"float16"), Tensor([3, 1431655766],"float16"), False, True, )
paddle.matmul(Tensor([2, 1, 100],"float16"), Tensor([2, 100, 21474837],"float16"), )
paddle.matmul(Tensor([2, 1, 33554433],"float16"), Tensor([2, 33554433, 64],"float16"), )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 536870912, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 1073741825],"float16"), Tensor([2, 1073741825, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 3, 715827883],"float16"), False, False, )
paddle.matmul(Tensor([2, 214748365, 5, 2],"float32"), Tensor([1, 214748365, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 21474837, 100],"float16"), Tensor([2, 100, 64],"float16"), )
paddle.matmul(Tensor([2, 3, 429496730],"float16"), Tensor([2, 5, 429496730],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 4, 536870912],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 536870912, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 536870913, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 536870912, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 380283564, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 380283564, 3],"float32"), Tensor([2, 380283564, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 285212673],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 536870912],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 536870913],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 536870912, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 536870913, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 285212673, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 4, 536870912],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 536870912, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 536870912],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 536870912],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 536870912],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 536870912],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 429496730, 3],"float16"), Tensor([2, 429496730, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 429496730, 3],"float16"), Tensor([2, 5, 429496730],"float16"), True, True, )
paddle.matmul(Tensor([2, 536870912, 4],"float16"), Tensor([2, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 536870912, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 536870912, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 715827883, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 715827883, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([228171, 100, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([23, 23],"float16"), Tensor([512, 23, 364723],"float16"), )
paddle.matmul(Tensor([23, 23],"float16"), Tensor([93368855, 23, 2],"float16"), )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 2147483648],"float16"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 1140850690],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 2147483648],"float32"), False, False, )
paddle.matmul(Tensor([3, 1431655765],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([429496730, 1, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([760567127],"float32"), Tensor([760567127, 3],"float32"), False, False, )
paddle.matmul(x=Tensor([1, 12, 2970966, 64],"float32"), y=Tensor([1, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 2469374],"float32"), y=Tensor([1, 12, 77, 2469374],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 64],"float32"), y=Tensor([1, 12, 2970966, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 1048576],"float16"), y=Tensor([1, 2, 2048, 1048576],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 1048577],"float16"), y=Tensor([1, 2, 2048, 1048577],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 134217728, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 134217728, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 268435456],"float32"), y=Tensor([2, 8, 268435456],"float32"), transpose_y=True, )
paddle.max(Tensor([1, 32, 134217728],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 32, 134217728],"float32"), axis=list[2,], )
paddle.max(Tensor([1, 536870912, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 536870912, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([10, 4, 107374183],"int32"), axis=1, )
paddle.max(Tensor([10, 7158279, 60],"int32"), axis=1, )
paddle.max(Tensor([1048576, 32, 128],"float32"), axis=-1, )
paddle.max(Tensor([11008, 390168],"float16"), axis=tuple(0,), )
paddle.max(Tensor([128, 1, 33554432],"float32"), axis=2, )
paddle.max(Tensor([128, 262144, 128],"float32"), axis=2, )
paddle.max(Tensor([128, 33554432],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 33554432],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 33554432],"int32"), axis=0, )
paddle.max(Tensor([13, 110127367, 3],"float32"), 2, )
paddle.max(Tensor([13, 3, 110127367],"float32"), 2, )
paddle.max(Tensor([13, 330382100],"float32"), 1, )
paddle.max(Tensor([1355, 3170304],"float16"), axis=1, )
paddle.max(Tensor([1431655765, 3],"float32"), 1, )
paddle.max(Tensor([16, 32, 8388608],"float32"), axis=0, )
paddle.max(Tensor([16, 4194304, 64],"float32"), axis=0, )
paddle.max(Tensor([16777216, 32, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([16777216, 32, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([17530479, 245],"float32"), axis=0, )
paddle.max(Tensor([17895698, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([193957, 22144],"float16"), axis=1, )
paddle.max(Tensor([2, 1, 2147483648],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 1073741825],"float64"), 0, False, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 67108864],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 67108864],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 67108864, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2147483648],"float16"), axis=1, )
paddle.max(Tensor([2, 2147483648],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 35791395, 60],"int32"), axis=1, )
paddle.max(Tensor([2, 4, 536870912],"int32"), axis=1, )
paddle.max(Tensor([20, 3579140, 60],"int32"), axis=1, )
paddle.max(Tensor([20, 4, 53687092],"int32"), axis=1, )
paddle.max(Tensor([2097152, 32, 64],"float32"), axis=0, )
paddle.max(Tensor([220753, 19456],"float16"), axis=1, )
paddle.max(Tensor([222215, 19328],"float16"), axis=1, )
paddle.max(Tensor([233017, 18432],"float16"), axis=1, )
paddle.max(Tensor([3, 128, 11184811],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 1431655765],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 14913081, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 2, 715827883],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 286331153, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([30, 200, 715828],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 200, 715828],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 2386093, 60],"int32"), axis=1, )
paddle.max(Tensor([30, 3579140, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 3579140, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 4, 35791395],"int32"), axis=1, )
paddle.max(Tensor([32, 1048576, 128],"float32"), axis=-1, )
paddle.max(Tensor([32, 1048576, 128],"float32"), axis=0, )
paddle.max(Tensor([32, 134217728],"float32"), axis=-1, )
paddle.max(Tensor([32, 32, 4194304],"float32"), axis=-1, )
paddle.max(Tensor([32, 64, 2097152],"float32"), axis=0, )
paddle.max(Tensor([33554432, 1, 128],"float32"), axis=2, )
paddle.max(Tensor([33554432, 128],"float32"), axis=-1, )
paddle.max(Tensor([33554432, 128],"int32"), axis=0, )
paddle.max(Tensor([34636834, 124],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([34636834, 124],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([349526, 128, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([349526, 128, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([349526, 128, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([390168, 11008],"float16"), axis=tuple(0,), )
paddle.max(Tensor([4, 17895698, 60],"int32"), axis=1, )
paddle.max(Tensor([4, 256, 16, 262144],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 16, 262144],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 256, 262144, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 262144, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 4, 268435456],"int32"), axis=1, )
paddle.max(Tensor([4, 4194304, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 4194304, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4096, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([429496730, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([477218589, 3, 3],"float32"), 2, )
paddle.max(Tensor([524288, 64, 128],"float32"), axis=0, )
paddle.max(Tensor([536870913, 4],"float64"), 0, False, )
paddle.max(Tensor([536870913, 4],"float64"), 1, True, )
paddle.max(Tensor([536871, 200, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([536871, 200, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([64, 128, 524288],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 128, 524288],"float32"), axis=list[2,], )
paddle.max(Tensor([64, 67108864],"float16"), axis=tuple(0,), )
paddle.max(Tensor([64, 699051, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 699051, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([65536, 256, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([65536, 256, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([67108864, 64],"float16"), axis=tuple(0,), )
paddle.max(Tensor([8, 1024, 524288],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8, 524288, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8388608, 512],"int32"), axis=0, )
paddle.max(Tensor([858993459, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(x=Tensor([1431655765, 3],"float32"), axis=-2, )
paddle.max(x=Tensor([1431655765, 3],"float32"), axis=0, keepdim=True, )
paddle.max(x=Tensor([1431655765, 3],"float32"), axis=1, )
paddle.max(x=Tensor([2, 2147483648],"float32"), axis=1, )
paddle.maximum(Tensor([1, 1, 1, 221848],"float32"), Tensor([1, 1, 10285, 221848],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 110924, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 30798, 37044, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 317080, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 33954, 33600, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 37623, 30324, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 41919, 27216, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 46996, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([110924, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([30798, 1, 37044, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([317080, 1, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([33954, 1, 33600, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([37623, 1, 30324, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([41919, 1, 27216, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([46996, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 61595],"float32"), Tensor([1, 1, 37044, 61595],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 634159],"float32"), Tensor([1, 1, 3598, 634159],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 67908],"float32"), Tensor([1, 1, 33600, 67908],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 75245],"float32"), Tensor([1, 1, 30324, 75245],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 83837],"float32"), Tensor([1, 1, 27216, 83837],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 93991],"float32"), Tensor([1, 1, 24276, 93991],"float32"), )
paddle.maximum(Tensor([1, 1, 1140850690, 2],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2187634],"float32"), Tensor([1043, 2187634],"float32"), )
paddle.maximum(Tensor([1, 1, 2193944],"float32"), Tensor([1040, 2193944],"float32"), )
paddle.maximum(Tensor([1, 1, 2206675],"float32"), Tensor([1034, 2206675],"float32"), )
paddle.maximum(Tensor([1, 1, 2213096],"float32"), Tensor([1031, 2213096],"float32"), )
paddle.maximum(Tensor([1, 1, 221848],"float32"), Tensor([1, 10285, 221848],"float32"), )
paddle.maximum(Tensor([1, 1, 2272611],"float32"), Tensor([1004, 2272611],"float32"), )
paddle.maximum(Tensor([1, 1, 2277148],"float32"), Tensor([1002, 2277148],"float32"), )
paddle.maximum(Tensor([1, 1, 2279422],"float32"), Tensor([1001, 2279422],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([110924, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1140850690, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([185505, 6150, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([209716, 5440, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([273914, 4165, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([29709, 38402, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([30953, 36858, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([317080, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 371009],"float32"), Tensor([1, 6150, 371009],"float32"), )
paddle.maximum(Tensor([1, 1, 419431],"float32"), Tensor([1, 5440, 419431],"float32"), )
paddle.maximum(Tensor([1, 1, 547828],"float32"), Tensor([1, 4165, 547828],"float32"), )
paddle.maximum(Tensor([1, 1, 59417],"float32"), Tensor([1, 38402, 59417],"float32"), )
paddle.maximum(Tensor([1, 1, 61906],"float32"), Tensor([1, 36858, 61906],"float32"), )
paddle.maximum(Tensor([1, 1, 634159],"float32"), Tensor([1, 3598, 634159],"float32"), )
paddle.maximum(Tensor([1, 1140850690, 2],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([285213, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.maximum(Tensor([1, 2281701379],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.maximum(Tensor([10, 1],"float32"), Tensor([10, 228170138],"float32"), )
paddle.maximum(Tensor([10, 228170138],"float32"), Tensor([10, 1],"float32"), )
paddle.maximum(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
paddle.maximum(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.maximum(Tensor([100, 1],"float32"), Tensor([100, 22817014],"float32"), )
paddle.maximum(Tensor([100, 22817014],"float32"), Tensor([100, 1],"float32"), )
paddle.maximum(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), )
paddle.maximum(Tensor([100, 22817014],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([100, 22817014],"float32"), Tensor([22817014],"float32"), )
paddle.maximum(Tensor([1000, 2281702],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([1001, 1],"float32"), Tensor([1001, 2279422],"float32"), )
paddle.maximum(Tensor([1001, 2279422],"float32"), Tensor([1001, 1],"float32"), )
paddle.maximum(Tensor([1001, 2279422],"float32"), Tensor([1001, 2279422],"float32"), )
paddle.maximum(Tensor([1002, 1],"float32"), Tensor([1002, 2277148],"float32"), )
paddle.maximum(Tensor([1002, 2277148],"float32"), Tensor([1002, 1],"float32"), )
paddle.maximum(Tensor([1002, 2277148],"float32"), Tensor([1002, 2277148],"float32"), )
paddle.maximum(Tensor([101, 1],"float32"), Tensor([101, 22591103],"float32"), )
paddle.maximum(Tensor([101, 22591103],"float32"), Tensor([101, 1],"float32"), )
paddle.maximum(Tensor([101, 22591103],"float32"), Tensor([101, 22591103],"float32"), )
paddle.maximum(Tensor([10737419, 20, 20],"float16"), Tensor([10737419, 20, 20],"float16"), )
paddle.maximum(Tensor([1140850690, 2],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([12, 118839, 40, 40, 1],"float32"), Tensor([12, 118839, 40, 40, 1],"float32"), )
paddle.maximum(Tensor([12, 1901418, 10, 10, 1],"float32"), Tensor([12, 1901418, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 6338060, 1],"float32"), Tensor([12, 3, 10, 6338060, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 1584515, 40, 1],"float32"), Tensor([12, 3, 1584515, 40, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 158452],"float32"), Tensor([12, 3, 20, 20, 158452],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 158452],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 158452],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 3169030, 1],"float32"), Tensor([12, 3, 20, 3169030, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 3169030, 20, 1],"float32"), Tensor([12, 3, 3169030, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 40, 1584515, 1],"float32"), Tensor([12, 3, 40, 1584515, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 40, 40, 1],"float32"), Tensor([12, 3, 40, 40, 39613],"float32"), )
paddle.maximum(Tensor([12, 3, 40, 40, 39613],"float32"), Tensor([12, 3, 40, 40, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 40, 40, 39613],"float32"), Tensor([12, 3, 40, 40, 39613],"float32"), )
paddle.maximum(Tensor([12, 3, 6338060, 10, 1],"float32"), Tensor([12, 3, 6338060, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 475355, 20, 20, 1],"float32"), Tensor([12, 475355, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([126761188, 18],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([142606337, 16],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([152113426, 15],"float32"), Tensor([152113426, 15],"float32"), )
paddle.maximum(Tensor([152113426, 15],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([190141782, 12],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([1901418, 3, 20, 20, 1],"float32"), Tensor([1901418, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([1901418, 40],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.maximum(Tensor([1],"float16"), Tensor([4294967297],"float16"), )
paddle.maximum(Tensor([200, 380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([285213, 200, 40],"float32"), )
paddle.maximum(Tensor([2281701379, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([2281701379, 1],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.maximum(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.maximum(Tensor([228170138, 10],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.maximum(Tensor([4, 20, 53687092],"float16"), Tensor([4, 20, 53687092],"float16"), )
paddle.maximum(Tensor([4, 53687092, 20],"float16"), Tensor([4, 53687092, 20],"float16"), )
paddle.maximum(Tensor([40],"float32"), Tensor([285213, 200, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.maximum(Tensor([4294967297],"float16"), Tensor([1],"float16"), )
paddle.maximum(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.maximum(Tensor([475355, 3, 40, 40, 1],"float32"), Tensor([475355, 3, 40, 40, 1],"float32"), )
paddle.maximum(Tensor([7605672, 3, 10, 10, 1],"float32"), Tensor([7605672, 3, 10, 10, 1],"float32"), )
paddle.maximum(x=Tensor([1, 2],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.maximum(x=Tensor([1],"float16"), y=Tensor([4294967297],"float16"), )
paddle.maximum(x=Tensor([2147483649, 2],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.maximum(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.median(Tensor([1073741824, 4],"float16"), -1, False, )
paddle.median(Tensor([1073741824, 4],"float16"), -1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), -1, True, )
paddle.median(Tensor([1073741824, 4],"float16"), -1, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 0, False, )
paddle.median(Tensor([1073741824, 4],"float16"), 0, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 0, True, )
paddle.median(Tensor([1073741824, 4],"float16"), 0, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 1, False, )
paddle.median(Tensor([1073741824, 4],"float16"), 1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 1, True, )
paddle.median(Tensor([1073741824, 4],"float16"), 1, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), -1, False, )
paddle.median(Tensor([1073741824, 4],"float32"), -1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), -1, True, )
paddle.median(Tensor([1073741824, 4],"float32"), -1, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), 1, False, )
paddle.median(Tensor([1073741824, 4],"float32"), 1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), 1, True, )
paddle.median(Tensor([1073741824, 4],"float32"), 1, True, mode="min", )
paddle.median(Tensor([1073741825, 4],"float16"), -1, False, )
paddle.median(Tensor([1073741825, 4],"float16"), -1, True, )
paddle.median(Tensor([1073741825, 4],"float16"), 0, )
paddle.median(Tensor([1073741825, 4],"float16"), 0, False, )
paddle.median(Tensor([1073741825, 4],"float16"), 0, False, mode="min", )
paddle.median(Tensor([1073741825, 4],"float16"), 0, True, )
paddle.median(Tensor([1073741825, 4],"float16"), 0, True, mode="min", )
paddle.median(Tensor([1073741825, 4],"float16"), 1, False, )
paddle.median(Tensor([1073741825, 4],"float16"), 1, True, )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, False, )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, True, )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, False, )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, True, )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, False, )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, True, )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, False, )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, True, )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([285212673, 4, 2],"float32"), -1, False, )
paddle.median(Tensor([285212673, 4, 2],"float32"), -1, True, )
paddle.median(Tensor([285212673, 4, 2],"float32"), 1, False, )
paddle.median(Tensor([285212673, 4, 2],"float32"), 1, True, )
paddle.median(Tensor([285212673, 4, 2],"float32"), 2, False, )
paddle.median(Tensor([285212673, 4, 2],"float32"), 2, True, )
paddle.median(Tensor([285212673, 4, 2],"int32"), -1, False, )
paddle.median(Tensor([285212673, 4, 2],"int32"), -1, True, )
paddle.median(Tensor([285212673, 4, 2],"int32"), 2, False, )
paddle.median(Tensor([285212673, 4, 2],"int32"), 2, True, )
paddle.median(Tensor([3, 1431655765],"float16"), 0, False, )
paddle.median(Tensor([3, 1431655765],"float16"), 0, False, mode="min", )
paddle.median(Tensor([3, 1431655765],"float16"), 0, True, )
paddle.median(Tensor([3, 1431655765],"float16"), 0, True, mode="min", )
paddle.median(Tensor([3, 1431655766],"float16"), 0, )
paddle.median(Tensor([3, 1431655766],"float16"), 0, False, )
paddle.median(Tensor([3, 1431655766],"float16"), 0, True, )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, False, )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, True, )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, False, )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, True, )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, False, )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, True, )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([3, 380283564, 2],"float32"), -1, False, )
paddle.median(Tensor([3, 380283564, 2],"float32"), -1, True, )
paddle.median(Tensor([3, 380283564, 2],"float32"), 0, False, )
paddle.median(Tensor([3, 380283564, 2],"float32"), 0, True, )
paddle.median(Tensor([3, 380283564, 2],"float32"), 2, False, )
paddle.median(Tensor([3, 380283564, 2],"float32"), 2, True, )
paddle.median(Tensor([3, 380283564, 2],"int32"), -1, False, )
paddle.median(Tensor([3, 380283564, 2],"int32"), -1, True, )
paddle.median(Tensor([3, 380283564, 2],"int32"), 0, False, )
paddle.median(Tensor([3, 380283564, 2],"int32"), 0, True, )
paddle.median(Tensor([3, 380283564, 2],"int32"), 2, False, )
paddle.median(Tensor([3, 380283564, 2],"int32"), 2, True, )
paddle.median(Tensor([3, 4, 190141782],"float32"), 0, False, )
paddle.median(Tensor([3, 4, 190141782],"float32"), 0, True, )
paddle.median(Tensor([3, 4, 190141782],"float32"), 1, False, )
paddle.median(Tensor([3, 4, 190141782],"float32"), 1, True, )
paddle.median(Tensor([3, 4, 190141782],"int32"), 0, False, )
paddle.median(Tensor([3, 4, 190141782],"int32"), 0, True, )
paddle.median(Tensor([3, 4, 357913942],"float16"), 0, False, )
paddle.median(Tensor([3, 4, 357913942],"float16"), 0, True, )
paddle.median(Tensor([3, 4, 357913942],"float16"), 1, False, )
paddle.median(Tensor([3, 4, 357913942],"float16"), 1, True, )
paddle.median(Tensor([3, 715827883, 2],"float16"), 0, False, )
paddle.median(Tensor([3, 715827883, 2],"float16"), 0, True, )
paddle.median(Tensor([3, 715827883, 2],"float16"), 1, False, )
paddle.median(Tensor([3, 715827883, 2],"float16"), 1, False, mode="min", )
paddle.median(Tensor([3, 715827883, 2],"float16"), 1, True, )
paddle.median(Tensor([3, 715827883, 2],"float16"), 1, True, mode="min", )
paddle.median(Tensor([3, 760567127],"float32"), 0, False, )
paddle.median(Tensor([3, 760567127],"float32"), 0, True, )
paddle.median(Tensor([5, 456340276],"float32"), 0, False, mode="min", )
paddle.median(Tensor([5, 456340276],"float32"), 0, True, mode="min", )
paddle.median(Tensor([536870913, 4, 2],"float16"), 0, False, )
paddle.median(Tensor([536870913, 4, 2],"float16"), 0, False, mode="min", )
paddle.median(Tensor([536870913, 4, 2],"float16"), 0, True, )
paddle.median(Tensor([536870913, 4, 2],"float16"), 0, True, mode="min", )
paddle.median(Tensor([536870913, 4, 2],"float16"), 1, False, )
paddle.median(Tensor([536870913, 4, 2],"float16"), 1, True, )
paddle.median(Tensor([570425345, 4],"float32"), -1, False, )
paddle.median(Tensor([570425345, 4],"float32"), -1, True, )
paddle.median(Tensor([570425345, 4],"float32"), 1, False, )
paddle.median(x=Tensor([142606337, 4, 4],"float32"), axis=-2, keepdim=True, )
paddle.median(x=Tensor([142606337, 4, 4],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([142606337, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.median(x=Tensor([4, 142606337, 4],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([4, 4, 142606337],"float32"), axis=-2, keepdim=True, )
paddle.median(x=Tensor([4, 4, 142606337],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([4, 4, 142606337],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([4, 4, 142606337],"float32"), axis=1, keepdim=True, )
paddle.minimum(Tensor([1, 1, 1, 221848],"float32"), Tensor([1, 1, 10285, 221848],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 110924, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 37623, 30324, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 41919, 27216, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 46996, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([110924, 1, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([37623, 1, 30324, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([41919, 1, 27216, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 2],"float32"), Tensor([46996, 1, 24276, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 75245],"float32"), Tensor([1, 1, 30324, 75245],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 83837],"float32"), Tensor([1, 1, 27216, 83837],"float32"), )
paddle.minimum(Tensor([1, 1, 1140850690, 2],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2213096],"float32"), Tensor([1031, 2213096],"float32"), )
paddle.minimum(Tensor([1, 1, 221848],"float32"), Tensor([1, 10285, 221848],"float32"), )
paddle.minimum(Tensor([1, 1, 2272611],"float32"), Tensor([1004, 2272611],"float32"), )
paddle.minimum(Tensor([1, 1, 2277148],"float32"), Tensor([1002, 2277148],"float32"), )
paddle.minimum(Tensor([1, 1, 2279422],"float32"), Tensor([1001, 2279422],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([110924, 10285, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([1140850690, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([29709, 38402, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([30953, 36858, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 2],"float32"), Tensor([317080, 3598, 2],"float32"), )
paddle.minimum(Tensor([1, 1, 59417],"float32"), Tensor([1, 38402, 59417],"float32"), )
paddle.minimum(Tensor([1, 1, 61906],"float32"), Tensor([1, 36858, 61906],"float32"), )
paddle.minimum(Tensor([1, 1, 634159],"float32"), Tensor([1, 3598, 634159],"float32"), )
paddle.minimum(Tensor([1, 1140850690, 2],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([285213, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.minimum(Tensor([1, 2281701379],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.minimum(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
paddle.minimum(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.minimum(Tensor([10737419, 20, 20],"float16"), Tensor([10737419, 20, 20],"float16"), )
paddle.minimum(Tensor([12, 118839, 40, 40, 1],"float32"), Tensor([12, 118839, 40, 40, 1],"float32"), )
paddle.minimum(Tensor([12, 1901418, 10, 10, 1],"float32"), Tensor([12, 1901418, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 10, 633806],"float32"), Tensor([12, 3, 10, 10, 633806],"float32"), )
paddle.minimum(Tensor([12, 3, 10, 6338060, 1],"float32"), Tensor([12, 3, 10, 6338060, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 1584515, 40, 1],"float32"), Tensor([12, 3, 1584515, 40, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 158452],"float32"), Tensor([12, 3, 20, 20, 158452],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 158452],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 158452],"float32"), )
paddle.minimum(Tensor([12, 3, 20, 3169030, 1],"float32"), Tensor([12, 3, 20, 3169030, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 3169030, 20, 1],"float32"), Tensor([12, 3, 3169030, 20, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 40, 1584515, 1],"float32"), Tensor([12, 3, 40, 1584515, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 40, 40, 1],"float32"), Tensor([12, 3, 40, 40, 39613],"float32"), )
paddle.minimum(Tensor([12, 3, 40, 40, 39613],"float32"), Tensor([12, 3, 40, 40, 1],"float32"), )
paddle.minimum(Tensor([12, 3, 40, 40, 39613],"float32"), Tensor([12, 3, 40, 40, 39613],"float32"), )
paddle.minimum(Tensor([12, 3, 6338060, 10, 1],"float32"), Tensor([12, 3, 6338060, 10, 1],"float32"), )
paddle.minimum(Tensor([12, 475355, 20, 20, 1],"float32"), Tensor([12, 475355, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([152113426, 15],"float32"), Tensor([152113426, 15],"float32"), )
paddle.minimum(Tensor([152113426, 15],"float32"), Tensor([15],"float32"), )
paddle.minimum(Tensor([1901418, 3, 20, 20, 1],"float32"), Tensor([1901418, 3, 20, 20, 1],"float32"), )
paddle.minimum(Tensor([1901418, 40],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.minimum(Tensor([200, 380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([285213, 200, 40],"float32"), )
paddle.minimum(Tensor([2281701379, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.minimum(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.minimum(Tensor([380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.minimum(Tensor([4, 20, 53687092],"float16"), Tensor([4, 20, 53687092],"float16"), )
paddle.minimum(Tensor([4, 53687092, 20],"float16"), Tensor([4, 53687092, 20],"float16"), )
paddle.minimum(Tensor([40],"float32"), Tensor([285213, 200, 40],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.minimum(Tensor([475355, 3, 40, 40, 1],"float32"), Tensor([475355, 3, 40, 40, 1],"float32"), )
paddle.minimum(Tensor([7605672, 3, 10, 10, 1],"float32"), Tensor([7605672, 3, 10, 10, 1],"float32"), )
paddle.minimum(x=Tensor([1, 2],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.minimum(x=Tensor([1],"float16"), y=Tensor([4294967297],"float16"), )
paddle.minimum(x=Tensor([2147483649, 2],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.minimum(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.mm(Tensor([1024, 4, 17409, 32],"float32"), Tensor([1024, 4, 32, 49],"float32"), )
paddle.mm(Tensor([4, 4194304, 256],"float32"), Tensor([4, 256, 512],"float32"), )
paddle.mm(input=Tensor([2, 3, 4],"float16"), mat2=Tensor([2, 4, 536870913],"float16"), )
paddle.mm(input=Tensor([2, 3, 715827883],"float16"), mat2=Tensor([2, 715827883, 2],"float16"), )
paddle.mm(input=Tensor([2, 536870913, 4],"float16"), mat2=Tensor([2, 4, 2],"float16"), )
paddle.mod(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.mod(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.mod(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.mod(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.mod(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.mod(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.mod(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float16"), )
paddle.mod(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float16"), )
paddle.mod(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float16"), )
paddle.mode(Tensor([2, 10, 107374183],"float64"), -1, )
paddle.mode(Tensor([2, 10, 107374183],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 214748365],"float16"), -1, )
paddle.mode(Tensor([2, 10, 214748365],"float16"), -1, keepdim=True, )
paddle.mode(Tensor([2, 107374183, 10],"float64"), 1, )
paddle.mode(Tensor([2, 107374183, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([2, 214748365, 10],"float16"), 1, )
paddle.mode(Tensor([2, 214748365, 10],"float16"), 1, keepdim=True, )
paddle.mode(Tensor([4294967295],"float32"), )
paddle.mode(x=Tensor([3, 2, 357913942],"float64"), )
paddle.mode(x=Tensor([3, 2, 357913942],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 357913942],"int64"), )
paddle.mode(x=Tensor([3, 2, 380283564],"float32"), )
paddle.mode(x=Tensor([3, 2, 380283564],"int32"), )
paddle.mode(x=Tensor([3, 2, 380283564],"int64"), )
paddle.mode(x=Tensor([3, 2, 715827883],"float16"), )
paddle.mode(x=Tensor([3, 2, 715827883],"float16"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 715827883],"float32"), )
paddle.mode(x=Tensor([3, 2, 715827883],"int32"), )
paddle.mode(x=Tensor([3, 238609295, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 477218589, 3],"float16"), axis=1, keepdim=False, )
paddle.moveaxis(x=Tensor([2147483649, 2],"float16"), source=0, destination=1, )
paddle.multigammaln(Tensor([10, 228170138],"float32"), 2, )
paddle.multigammaln(Tensor([10, 429496730],"float16"), 2, )
paddle.multigammaln(Tensor([114085069, 20],"float32"), 2, )
paddle.multigammaln(Tensor([214748365, 20],"float16"), 2, )
paddle.multiplex(inputs=list[Tensor([2, 1140850690],"float32"),Tensor([2, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([760567127, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([760567127, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([570425345, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([760567127, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([760567127, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 760567127],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([570425345, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([570425345, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([570425345, 4],"float32"),Tensor([2, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([570425345, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([570425345, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([570425345, 4],"float32"),Tensor([7, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([7, 4],"float32"),Tensor([570425345, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([760567127, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([760567127, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiply(Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), name=None, )
paddle.multiply(Tensor([1, 1, 256],"float32"), Tensor([1, 8912897, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 1, 256],"float32"), Tensor([8912897, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 1],"float32"), Tensor([2281701379],"float32"), )
paddle.multiply(Tensor([1, 2, 142606337, 8],"float32"), Tensor([1, 1, 142606337, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 142606337],"float32"), Tensor([1, 1, 8, 142606337],"float32"), )
paddle.multiply(Tensor([1, 2147483649, 2],"float16"), Tensor([1, 2147483649, 2],"float16"), )
paddle.multiply(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.multiply(Tensor([1, 2281701379],"float32"), Tensor([1],"float32"), )
paddle.multiply(Tensor([1, 2],"float32"), Tensor([1140850690, 2],"float32"), )
paddle.multiply(Tensor([1, 35651585, 8, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 35651585, 8, 8],"float32"), Tensor([1, 35651585, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), )
paddle.multiply(Tensor([1, 5, 858993460],"float16"), Tensor([1, 5, 858993460],"float16"), )
paddle.multiply(Tensor([1, 8912897, 256],"float32"), Tensor([1, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 8912897, 256],"float32"), Tensor([1, 8912897, 256],"float32"), name=None, )
paddle.multiply(Tensor([1024, 4194305],"float16"), Tensor([4194305],"float16"), )
paddle.multiply(Tensor([1140850690, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.multiply(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), )
paddle.multiply(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), name=None, )
paddle.multiply(Tensor([128, 112, 14, 21400],"float16"), Tensor([128, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([128, 112, 14, 21400],"float16"), Tensor([128, 1, 1, 21400],"float16"), )
paddle.multiply(Tensor([128, 112, 21400, 14],"float16"), Tensor([128, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([128, 112, 21400, 14],"float16"), Tensor([128, 1, 21400, 1],"float16"), )
paddle.multiply(Tensor([128, 171197, 14, 14],"float16"), Tensor([128, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([128, 171197, 14, 14],"float16"), Tensor([128, 171197, 1, 1],"float16"), )
paddle.multiply(Tensor([13, 1371215, 4, 32],"float32"), Tensor([13, 1371215, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 5484860],"float32"), Tensor([13, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 5484860],"float32"), Tensor([13, 8, 1, 5484860],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 685608, 32],"float32"), Tensor([13, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 685608, 32],"float32"), Tensor([13, 8, 685608, 1],"float32"), name=None, )
paddle.multiply(Tensor([1431655766, 1, 3],"float16"), Tensor([1, 3],"float16"), )
paddle.multiply(Tensor([158452, 3, 3, 40, 40],"float32"), Tensor([158452, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([17825793, 2, 8, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([17825793, 2, 8, 8],"float32"), Tensor([17825793, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([195653, 112, 14, 14],"float16"), Tensor([195653, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([2, 1, 1, 2, 570425345],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 570425345],"float32"), Tensor([2, 1, 1, 1, 570425345],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 380283564, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 380283564, 3],"float32"), Tensor([2, 1, 1, 380283564, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 190141782, 2, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 190141782, 2, 3],"float32"), Tensor([2, 1, 190141782, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), name=None, )
paddle.multiply(Tensor([2, 190141782, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 190141782, 1, 2, 3],"float32"), Tensor([2, 190141782, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2228225, 8, 4, 32],"float32"), Tensor([2228225, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2281701379, 1],"float32"), Tensor([1],"float32"), )
paddle.multiply(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.multiply(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), name=None, )
paddle.multiply(Tensor([3, 158452, 3, 40, 40],"float32"), Tensor([3, 158452, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 158452, 40, 40],"float32"), Tensor([3, 3, 158452, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 2112687, 40],"float32"), Tensor([3, 3, 3, 2112687, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 2112687],"float32"), Tensor([3, 3, 3, 40, 2112687],"float32"), )
paddle.multiply(Tensor([33554432, 128],"float16"), Tensor([128],"float16"), )
paddle.multiply(Tensor([33554433, 128],"float16"), Tensor([128],"float16"), )
paddle.multiply(Tensor([380283564, 1, 1, 2, 3],"float32"), Tensor([380283564, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([4, 16385, 256, 256],"float16"), Tensor([4, 16385, 1, 1],"float16"), name=None, )
paddle.multiply(Tensor([4, 256, 16385, 256],"float16"), Tensor([4, 256, 1, 1],"float16"), name=None, )
paddle.multiply(Tensor([4, 256, 16385, 256],"float16"), Tensor([4, 256, 16385, 1],"float16"), name=None, )
paddle.multiply(Tensor([4, 256, 256, 16385],"float16"), Tensor([4, 256, 1, 16385],"float16"), name=None, )
paddle.multiply(Tensor([4, 256, 256, 16385],"float16"), Tensor([4, 256, 1, 1],"float16"), name=None, )
paddle.multiply(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.multiply(Tensor([429496730, 5, 2],"float16"), Tensor([1, 5, 2],"float16"), )
paddle.multiply(Tensor([429496730, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), )
paddle.multiply(Tensor([429497, 100, 100],"float16"), Tensor([100, 100],"float16"), )
paddle.multiply(Tensor([429497, 100, 100],"float16"), Tensor([429497, 100, 100],"float16"), )
paddle.multiply(Tensor([5, 1, 858993460],"float16"), Tensor([1, 858993460],"float16"), )
paddle.multiply(Tensor([5, 286331154, 3],"float16"), Tensor([1, 3],"float16"), )
paddle.multiply(Tensor([5, 286331154, 3],"float16"), Tensor([286331154, 3],"float16"), )
paddle.multiply(Tensor([64, 3277, 512, 1, 40],"float16"), Tensor([64, 3277, 1, 1, 40],"float16"), )
paddle.multiply(Tensor([8912897, 1, 256],"float32"), Tensor([1, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([8912897, 1, 256],"float32"), Tensor([8912897, 1, 256],"float32"), name=None, )
paddle.multiply(x=Tensor([1, 1024, 123791, 18],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 123791, 18],"float32"), y=Tensor([1, 1024, 123791, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 123791],"float32"), y=Tensor([1, 1024, 1, 123791],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 123791],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1],"float32"), y=Tensor([187679, 12158],"float32"), )
paddle.multiply(x=Tensor([1, 1],"float32"), y=Tensor([2281701379, 1],"float32"), )
paddle.multiply(x=Tensor([1, 7042289, 18, 18],"float32"), y=Tensor([1, 7042289, 1, 1],"float32"), )
paddle.multiply(x=Tensor([187679, 12158],"float32"), y=Tensor([12158],"float32"), )
paddle.multiply(x=Tensor([1],"float32"), y=Tensor([2281701379],"float32"), )
paddle.multiply(x=Tensor([2281701379, 1],"float32"), y=Tensor([2281701379, 1],"float32"), )
paddle.multiply(x=Tensor([2281701379],"float32"), y=Tensor([2281701379],"float32"), )
paddle.multiply(x=Tensor([6878, 1024, 18, 18],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([6878, 1024, 18, 18],"float32"), y=Tensor([6878, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([760567127, 3],"float32"), y=Tensor([3],"float32"), )
paddle.mv(Tensor([126761188, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([190141782, 12],"float32"), Tensor([12],"float32"), )
paddle.mv(Tensor([3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.mv(Tensor([380283564, 6],"float32"), Tensor([6],"float32"), )
paddle.mv(x=Tensor([3, 760567127],"float32"), vec=Tensor([760567127],"float32"), )
paddle.nan_to_num(Tensor([400, 10737419],"float16"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([4294967297, 1],"float16"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([4294967297],"float16"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([91, 47197443],"float16"), neginf=-2.220446049250313e-16, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 95070891],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 95070891],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 95070891],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 76056713, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 76056713, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 76056713, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 76056713, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 57042535, 4, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 57042535, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 57042535, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 57042535, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 57042535, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([22817014, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([38028357, 3, 4, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([38028357, 3, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([38028357, 3, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([38028357, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([38028357, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([42949673, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanquantile(Tensor([325957340, 7],"float32"), q=0.5, axis=1, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([178956971, 3, 8],"float16"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 142606337, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 268435457, 8],"float16"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 715827883],"float16"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 35651585, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 35651585, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 35651585, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 67108864, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 67108864, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([23767723, 3, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([23767723, 3, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([23767723, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([95070891, 3, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([178956971, 3, 8],"float16"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 142606337, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 268435457, 8],"float16"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 715827883],"float16"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([95070891, 3, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 299594],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 18, 233017],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 19, 220753],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 2097152],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 20, 209716],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2097152, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 209716, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 220753, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 233017, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 299594, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1048576, 64, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1048576, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1073741824, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 10737419, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 10737419, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1082402, 62, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 11897417, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 11897417, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 557057],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 557057],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 557057],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 557057, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 557057, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 557057, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 13256072, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 13256072, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 139265, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 139265, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 139265, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 10, 2684355],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 11, 2440323],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 1342178, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 1412819, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 1491309, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 1677722],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 1677722],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 891290],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 891290],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 18, 1491309],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 19, 1412819],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 20, 1342178],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 2440323, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 2684355, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 445645, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 838861, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 838861, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 16384, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 32768, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 32768, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 62, 33826],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 32768],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 32768],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 21913099, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2228225, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2228225, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2228225, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 35495598, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 42949673, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4456449, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4456449, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 34817],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 34817],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 34817],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 4194304],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 34817, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 34817, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 34817, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 4194304, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 524288, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 8388608, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 8388608, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 85599, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1048576, 1024, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10486, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([11369, 64, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([11619, 1024, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 218, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 4353],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 8192],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 8192],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 410, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 410, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 104858, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 104858, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 4974],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 9363],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 9363],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 4974, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 9363, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 9363, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 171197, 14, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 171197, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 22737, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 3979],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 7490],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 7490],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 3979, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7490, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7490, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 42800, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 42800, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 4974, 7],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 4974],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 9363],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 9363, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 55706, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 5685, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 4974, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 56, 4974],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 684785, 7, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([12946, 1024, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 105352, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 12243, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 23046, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 12243],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 23046],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 55968, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13108, 1024, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13108, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([14855, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([171197, 512, 7, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([17409, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([17409, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([17409, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([178258, 256, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1914, 45796, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1917, 45724, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 4, 11651],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 583, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 69906, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 2048, 156, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 2048, 7, 156],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 45629, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1929, 45440, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 134217728, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 134217729, 4, 4],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 134217729, 4, 4],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 67108865],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 67108865],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 67108865],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 89478486, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 89478486, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 89478486, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 318318, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 599187, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 318318],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 599187],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 71303169, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 89478486, 4, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 89478486, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 89478486, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([21400, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([221848, 160, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([22737, 128, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 1171, 7, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 2048, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 7, 1171, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 7, 7, 342393],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([268436, 160, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([273, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([273, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([273, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27853, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27853, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27963, 480, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27963, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2843, 256, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([335545, 256, 2, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([335545, 256, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([36380, 320, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 13108, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 4, 139265],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 4, 262144],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1114113, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1114113, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 139265, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 139265, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 139265, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 139265],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 139265],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 139265],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 111412, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 111412, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 222823],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 222823],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 3355444, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 34817, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 34817, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 34817, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 14855, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 27963, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 4, 297097],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 4, 559241],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 16384],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 16384],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 16384],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 8705],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 8705],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 8705],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16384, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16384, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16384, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 8705, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 8705, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 8705, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 557057, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 557057, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 557057, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 65536, 128, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 65536, 128, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 65536, 128, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 128, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 128, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 7, 7, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([47535446, 3, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 167773, 2, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 167773, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 2048, 64, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 2048, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 1311, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 1311, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 16384],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 16384],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 8705],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 697, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 89129, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([529, 2048, 62, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([5350, 256, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([67109, 160, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([68479, 320, 14, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([68479, 320, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([6964, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([74359, 160, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([82851, 160, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 3, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 480, 4, 12380],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 480, 619, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 74275, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 134217728, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 134217729, 4, 4],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 134217729, 4, 4],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 67108865],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 67108865],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 67108865],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 89478486, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 89478486, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 89478486, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 71303169, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 89478486, 4, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 89478486, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 89478486, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([47535446, 3, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2037234, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2263593, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2546542, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2910334, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 3834793, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 3834793, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 4793491, 16, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 5478275, 16, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 5478275, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 114131, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 114131, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 18569, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 20632, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 23211, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 26527, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 34953, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 34953, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 43691, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 49933, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 49933, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 26527],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 49933],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 49933],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 42443, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 47159, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 53053, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 60632, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 79892, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 79892, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 99865, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 139265, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262144, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1485483, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1485483],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2653, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2948, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([3316, 768, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([3790, 768, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([4994, 768, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([4994, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([6242, 768, 16, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([7134, 768, 16, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([7134, 768, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 139265, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262144, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 371371, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1485483, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1485483],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([92843, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([142606337, 16],"float32"), Tensor([128],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([285212673, 8],"float32"), Tensor([8],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 142606337, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 380283564],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 380283564],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 380283564],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 715827883],"float16"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 715827883],"float16"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 35651585, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 35651585, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108864, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108864, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108865, 32],"float16"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([23767723, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([23767723, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([44739243, 3, 32],"float16"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([95070891, 3, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 142606337, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 380283564],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 715827883],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 715827883],"float16"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 67108865, 32],"float16"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([44739243, 3, 32],"float16"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([95070891, 3, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 268435457, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 8, 268435457],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 67108865, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 142606337, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 268435457, 8],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 142606337],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 268435457],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 17825793, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 33554433, 8, 8],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([33554433, 2, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([35651585, 1, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([67108865, 1, 8, 8],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 268435457, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 8, 268435457],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 67108865, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 142606337, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 268435457, 8],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 142606337],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 268435457],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 17825793, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 33554433, 8, 8],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([33554433, 2, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([35651585, 1, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([67108865, 1, 8, 8],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 17825793, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 33554433, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 17825793, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 33554433, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 17825793],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 33554433],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 4456449, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 8388609, 8, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2228225, 2, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([4194305, 2, 8, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 17825793, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 33554433, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 17825793, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 33554433, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 17825793],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 33554433],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 4456449, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 8388609, 8, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2228225, 2, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([4194305, 2, 8, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.avg_pool1d(Tensor([13, 1, 330382100],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 2753185, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 1, 268435456],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 2, 134217728],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 2236963, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([178956971, 3, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([17895698, 2, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 17895698, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 2, 1073741824],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 268435456, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([2, 67108864, 32],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 67108864, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([2, 67108864, 32],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([3, 1, 1431655765],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([3, 11930465, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([35791395, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([44739243, 3, 32],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([44739243, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([44739243, 3, 32],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([178956971, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 268435456, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 40, 104858],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 42, 99865],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 44, 95326],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 65536, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 67651, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 69906, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 77673, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 10737419, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 1677722, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 20, 1677722],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1597831, 42, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1626882, 44, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 171798692, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1731842, 40, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1789570, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1988411, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 2, 4, 536870912],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 2, 536870912, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 21913099, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 10, 1677722],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 1677722, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 268435456, 4, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 4, 3, 357913942],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 4, 357913942, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 42949673, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 477218589, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 1677722, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 5, 1677722],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 8, 14, 38347923],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 8, 38347923, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([105352, 208, 14, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([10700, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([119304648, 4, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 10324441, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 4, 82595525],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 7, 47197443],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1474921, 7, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 2581111, 4, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([134217728, 2, 4, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([134218, 1280, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([14514, 1024, 17, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([14514, 1024, 17, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1561, 1024, 42, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1589, 1024, 44, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 32768, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 4, 65536],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 65536, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 8, 32768],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 8192],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 32, 65536],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 32768, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 64, 32768],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 65536, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 8192, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 16777216, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 262144, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 4096, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 4194304, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 65536, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([167773, 256, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1692, 1024, 40, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1748, 1024, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([19173962, 1, 7, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([1942, 1024, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1056, 14, 145258],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1056, 145258, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 10956550, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 12707004, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1280, 335545, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1280, 5, 335545],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 134217729, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 192, 25, 447393],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 192, 447393, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2048, 209716, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2048, 5, 209716],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 25, 335545],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 256, 335545, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 288, 25, 298262],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 288, 298262, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3435974, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 13, 322639],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 322639, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 13, 312862],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 312862, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 85899346, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([20752, 1056, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([21400, 1024, 14, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([21400, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([22369622, 3, 8, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([23861, 288, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2440323, 1, 40, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([2440323, 1, 44, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 2622, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 2622, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 8, 16384],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 8, 16384],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 20972, 16, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 256, 1311, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 256, 1311, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 256, 4, 16384],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 256, 4, 16384],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 41944, 8, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 41944, 8, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 64, 16, 16384],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 64, 5243, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 83887, 4, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 83887, 4, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([262144, 1024, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([26844, 256, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2739138, 8, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 32537632, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 35791395, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 40, 35791395],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 44, 32537632],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 813441, 40, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 813441, 44, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 14, 9363],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 9363, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 171197, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 56, 9363],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 9363, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 42800, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 512, 28, 9363],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 512, 9363, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 684785, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([33554432, 1, 4, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([335545, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([349526, 3, 64, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([34953, 384, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([34953, 512, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([34953, 512, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([34953, 512, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([35792, 192, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 3355444, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 34953, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 4, 699051],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([43691, 1536, 8, 8],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([43691, 1536, 8, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48133, 528, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([49637, 512, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([512, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([52676, 104, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([52676, 104, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([5350, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([5592406, 3, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 1198373, 8, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 18725, 64, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 299594, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 1597831, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 16, 1597831],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 3195661, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 32, 798916],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 399458, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 4, 6391321],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 6391321, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 64, 399458],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 798916, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 8, 3195661],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 4793491, 4, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 74899, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([57066, 1536, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([57066, 1536, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 2487],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 4682],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 4682],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 17, 3856],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 17, 3856],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 2487, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 3856, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 3856, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 4682, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 4682, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 23046, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 23046, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 23046],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 23046],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1048576, 8, 8],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1048576, 8, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 8192],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 8192],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 8192],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 8192],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 8192, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 8192, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 8192, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 8192, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1369569, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1369569, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 5462, 8],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 5462, 8],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 6242, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 6242],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 6242],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 8, 5462],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 8, 5462],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 16384, 64, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 16384, 64, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 16384, 64, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 16384, 64, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 208, 14, 23046],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 208, 23046, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 232211, 17, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 232211, 17, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 279621, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 279621, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 342393, 14, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 342393, 14, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 342393, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 384, 35, 4994],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 384, 4994, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 1639, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 1639, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 43691],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 43691],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 54783, 35, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 85599, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 85599, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([65536, 1024, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 2236963, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 13108, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 3, 349526],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 128, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 128, 8, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 128, 8, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 2048, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 256, 4, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 256, 4, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 64, 16, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([89478486, 3, 4, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([9131, 384, 35, 35],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([1398102, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 134217729, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 2097152, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 22369622, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 22369622],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool3d(Tensor([127827, 1, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([127827, 1, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1485483, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 11184811, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2228225, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5941931, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 11184811, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5941931],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194304, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 5592406, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 5592406, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 11184811, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 5592406, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 2097153],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 4194305],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([203724, 1, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([203724, 1, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 8, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 127827, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 158452, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 2716312, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 298262, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 1600, 158452],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 1600, 298262],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 68174085, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 40, 475355],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 40, 894785],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 5113057, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 475355, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 5113057, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 67908, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 127827, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 3, 36217483],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 3, 68174085],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 40, 2716312],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 40, 5113057],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 5113057, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 67908, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 894785, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 127827, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 127827, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 22636, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 22636, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 42609, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 42609, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 67908, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 67908, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([383480, 1, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([383480, 1, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([67908, 1, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([67908, 1, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(x=Tensor([10700, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([10700, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([1485483, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 11184811, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2228225, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5941931, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 11184811, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5941931],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194304, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 5592406, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 5592406, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 11184811, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 5592406, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 2097153],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 4194305],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 8, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([5685, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([5685, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 1455167, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 181896, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 2843, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 4974, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 4974],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 9363],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 9363, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 5350, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 22737, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 4974, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 4974],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 9363],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 9363, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 42800, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2739138, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 342393, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 2228225],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 4194304],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 128, 33554432],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 16777216, 256],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 16777216, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 3728271, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 8388608, 512],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 8388608, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 8912897, 256],"float32"), Tensor([8912897],"float32"), Tensor([8912897],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1048576, 8, 16, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1048577, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1048577, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1048577, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([107374183, 40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1114113, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1114113, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1114113, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1114113, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1114113, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1114113, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1114113, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([119304648, 4, 3, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([119304648, 4, 3, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([119304648, 4, 3, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1242757, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1242757, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1242757, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1242757, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1242757, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1242757, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([131072, 128, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1320430, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([1320430, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([1398102, 24, 16, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 1048577, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 1048577, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 1114113, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 1114113, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 1114113, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048576],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048576],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048576],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048576],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048576],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048577],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048577],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 1048577],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 524289],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 524289],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 557057],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 557057],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 557057],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097152, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097152, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097152, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097152, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097152, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097153, 8],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097153, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 2097153, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 1398102, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 16, 699051],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16384, 1024, 256],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([16777216, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16777216, 8, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([19015, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([19015, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([19015, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([19015, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 1073741824],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 1073741824],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 570425345],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 380283564, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 715827883, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 715827883, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 119304648, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 119304648, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 119304648, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 119304648, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 119304648, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 119304648, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 134217729, 4, 4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 134217729, 4, 4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 190141782, 2, 3],"float32"), Tensor([190141782],"float32"), Tensor([190141782],"float32"), Tensor([190141782],"float32"), Tensor([190141782],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 238609295, 3, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 238609295, 3, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 238609295, 3, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 178956971, 4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 178956971, 4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 89478486],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 89478486],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 89478486, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 89478486, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 89478486, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 89478486, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 178956971, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 178956971, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 178956971, 3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), Tensor([3],"float16"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 89478486, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 89478486, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 89478486, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 89478486, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 89478486, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 89478486, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 67108865, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 67108865, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2097152, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2097152, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2097152, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2097152, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2097152, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2097152, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2097153, 16, 16, 8],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), Tensor([16],"float16"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2097153, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2097153, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2485514, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2485514, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2485514, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2485514, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2485514, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2485514, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([29128, 128, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([30, 25353, 50, 60],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 25353, 50, 60],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 25353, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 25353, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 31691, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 31691, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 31691, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 31691, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 38029],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 38029],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 71583],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 71583],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 59653, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 59653, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 59653, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 47722, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 47722, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 76056713],"float32"), Tensor([76056713],"float32"), Tensor([76056713],"float32"), Tensor([76056713],"float32"), Tensor([76056713],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([35792, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([35792, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([35792, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([35792, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([380283564, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 17825793, 32],"float32"), Tensor([17825793],"float32"), Tensor([17825793],"float32"), Tensor([17825793],"float32"), Tensor([17825793],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 1980644, 12, 24],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 1980644, 12, 24],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 570425345],"float32"), Tensor([570425345],"float32"), Tensor([570425345],"float32"), Tensor([570425345],"float32"), Tensor([570425345],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 14913081],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 14913081],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 14913081],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 14913081],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 14913081],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 14913081],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7456541],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7456541],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7456541],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7456541],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7456541],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7456541],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7922575],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 7922575],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3728271, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3728271, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3728271, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3728271, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3728271, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3728271, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3961288, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 3961288, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 7456541, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 7456541, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 7456541, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 7456541, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 7456541, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 7456541, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 134217728],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 16, 8388608],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 4194304, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 71303169],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([44739243, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([44739243, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([44739243, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([44739243, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([57042535, 40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([59652324, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([59652324, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([59652324, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([59652324, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([59652324, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([59652324, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([65536, 128, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([715827883, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([715827883, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 1048577, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 1114113, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 1114113, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 2097152, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 2097152, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 2097152, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 2097152, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2097153],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2097153],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2097153],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2097153],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2097153],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2228225],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 2228225],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 4194304],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 4194304],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 4194304],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 4194304],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 4194304],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2097153, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2228225, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2228225, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2228225, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 2228225, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 4194304, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8192, 1024, 512],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([8705, 1024, 256],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([8912897, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8912897, 8, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([89478486, 3, 4, 4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([89478486, 3, 4, 4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), Tensor([4],"float16"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(x=Tensor([1431655766, 1, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([1431655766, 1, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([1431655766, 1, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 1073741825],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 1073741825],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 1073741825],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 1073741824],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 1073741825],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 1073741825],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 1073741825],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 1073741825],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 536870913],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 536870913],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 536870913],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 536870913],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 536870913],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 570425345],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2147483649],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2147483649],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2147483649],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 357913942, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 357913942, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 357913942, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 357913942, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 357913942, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 380283564, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 715827883, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 715827883, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 715827883, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 715827883, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 715827883, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 190141782, 2, 3],"float32"), running_mean=Tensor([190141782],"float32"), running_var=Tensor([190141782],"float32"), weight=Tensor([190141782],"float32"), bias=Tensor([190141782],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 715827883, 3],"float16"), running_mean=Tensor([715827883],"float16"), running_var=Tensor([715827883],"float16"), weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 715827883, 3],"float16"), running_mean=Tensor([715827883],"float16"), running_var=Tensor([715827883],"float16"), weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 715827883, 3],"float16"), running_mean=Tensor([715827883],"float16"), running_var=Tensor([715827883],"float16"), weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([357913942, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([357913942, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([357913942, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([357913942, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([357913942, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([380283564, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 2, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 2, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 2, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 2, 3],"float16"), running_mean=Tensor([1],"float16"), running_var=Tensor([1],"float16"), weight=Tensor([1],"float16"), bias=Tensor([1],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([715827883, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 570425345],"float32"), Tensor([4, 1, 570425345],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 760567127],"float32"), Tensor([4, 1, 760567127],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), 10, 8, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), 20, 8, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.conv1d(Tensor([1, 1024, 2228225],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([1398102, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 4194304],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 17825793],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 17825793],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 17825793],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 33554432],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1118482, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1280, 1280, 2622],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3355444],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([30678338, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 16777216],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([1525202, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([1525202, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([1525202, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([2396746, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([2396746, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([2396746, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([5592406, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([5592406, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([5592406, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 1431655765],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 760567127],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([1, 32, 7],"float32"), bias=Tensor([1],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 32, 134217728],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 384, 11184811],"float32"), Tensor([384, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 384, 3000],"float32"), Tensor([3728271, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 512, 3000],"float32"), Tensor([2796203, 512, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 512, 8388608],"float32"), Tensor([512, 512, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([22369622, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([22369622, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([22369622, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([6100806, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([6100806, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([6100806, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([9586981, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 448],"float32"), Tensor([9586981, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 64, 67108864],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 768, 3000],"float32"), Tensor([1864136, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 768, 5592406],"float32"), Tensor([768, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([10186167, 32, 7],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([10186167, 7, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([107375, 400, 100],"float32"), Tensor([256, 100, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1119, 1280, 3000],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1119, 80, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([12782641, 24, 14],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 10324441, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 1295617, 255],"float32"), Tensor([32, 1295617, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 161320, 2048],"float32"), Tensor([20, 161320, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 161320, 2048],"float32"), Tensor([256, 161320, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 171402, 1024],"float32"), Tensor([32, 171402, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 13765921],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([22369622, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 7313146],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 1290556],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 1290556],"float32"), Tensor([256, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 10324441],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 10324441],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 10324441],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 5484860],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 62],"float32"), Tensor([16777216, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 322639, 1024],"float32"), Tensor([32, 322639, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 5328744, 62],"float32"), Tensor([32, 5328744, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 5484860, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 64, 5162221],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([67108864, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 7, 25073642],"float32"), Tensor([16, 25073642, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 85701, 2048],"float32"), Tensor([256, 85701, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1399, 1024, 3000],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1399, 64, 25500],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([149797, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([152113426, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([159159, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 10527, 25500],"float32"), Tensor([128, 10527, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 1602319, 89],"float32"), Tensor([80, 1602319, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 3016129, 89],"float32"), Tensor([80, 3016129, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 5593, 25500],"float32"), Tensor([128, 5593, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 2228225],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 4194304],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 1782580],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 1782580],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 3355444],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 3355444],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([167773, 256, 100],"float16"), Tensor([1, 256, 1],"float16"), bias=Tensor([1],"float16"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([167773, 256, 100],"float16"), Tensor([128, 256, 3],"float16"), bias=Tensor([128],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([167773, 256, 100],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([167773, 256, 100],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 4, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([1865, 768, 3000],"float32"), Tensor([768, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([190141782, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([190141782, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([190141782, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([190141782, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([190141782, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([19173962, 32, 7],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([19173962, 32, 7],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([19173962, 7, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 16777216],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 357913942],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 357913942],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 357913942],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 357913942],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 380283564],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 380283564],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 380283564],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 380283564],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 1431655765],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 1431655765],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 1431655765],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 715827883],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 715827883],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 715827883],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 715827883],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 357913942, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 380283564, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 715827883, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2106, 80, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2164803, 32, 62],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([23767723, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([23767723, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([23767723, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([23767723, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([23767723, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([23767723, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([23767723, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([256, 200, 44565],"float32"), Tensor([256, 44565, 4],"float32"), bias=Tensor([256],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2632, 64, 25500],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2797, 512, 3000],"float32"), Tensor([512, 512, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([286331153, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([299594, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([320464, 80, 89],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([357913942, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([357913942, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([357913942, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([357913942, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([357913942, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([357913942, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([3729, 384, 3000],"float32"), Tensor([384, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 16, 35651585],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 35651585],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 178956971, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([238609295, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([238609295, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 89478486],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 178956971],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 95070891],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 95070891],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 95070891],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 95070891],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 95070891],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 95070891, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 95070891, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([44739243, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([52, 2581111, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([526345, 32, 255],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([599187, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([603226, 80, 89],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([6790778, 24, 14],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([743, 1024, 3000],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([1, 32, 7],"float32"), bias=Tensor([1],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([74899, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 1114113],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 2097152],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 2097152],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 2097153],"float16"), Tensor([1, 256, 1],"float16"), bias=Tensor([1],"float16"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 2097153],"float16"), Tensor([128, 256, 3],"float16"), bias=Tensor([128],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 2097153],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 400, 1342178],"float32"), Tensor([256, 100, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 5368710, 100],"float16"), Tensor([1, 5368710, 1],"float16"), bias=Tensor([1],"float16"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 5368710, 100],"float16"), Tensor([128, 5368710, 3],"float16"), bias=Tensor([128],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8192, 256, 2048],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8192, 256, 2048],"float32"), Tensor([256, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([89129, 256, 100],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([9586981, 64, 7],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([178956971, 4, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([190141782, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([190141782, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([190141782, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([190141782, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([190141782, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([190141782, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 285212673, 4],"float32"), weight=Tensor([1, 285212673, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 357913942],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 357913942],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 357913942],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 357913942],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 357913942],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 1431655765],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 1431655765],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([380283564, 3, 2],"float32"), bias=Tensor([380283564],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([715827883, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([715827883, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([357913942, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 357913942, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 380283564, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 715827883, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([357913942, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 64, 524288],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 33554432],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 16777216],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 128, 131072],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 32768],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 8388608],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 64, 448],"float32"), Tensor([64, 32, 2097152],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 64, 448],"float32"), Tensor([64, 8388608, 8],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 64, 67108864],"float32"), Tensor([64, 32, 8],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1198373, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([149797, 64, 448],"float32"), Tensor([64, 32, 8],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 128, 112],"float32"), Tensor([128, 4194304, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 128, 112],"float32"), Tensor([128, 64, 524288],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 128, 16777216],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 1431655765],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 1431655765],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 715827883],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 715827883],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 238609295, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 238609295, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 1431655765],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 1431655765],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 1431655765],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2, 715827883],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 715827883],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 715827883],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 380283564],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 380283564],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 380283564],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 380283564],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 715827883],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 715827883],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 715827883],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 715827883],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 715827883],"float16"), Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 380283564, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 715827883, 3],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 3, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 35651585],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 35651585],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 35651585],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 47535446],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 95070891],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 95070891],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 95070891],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 95070891],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 95070891],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 95070891],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([715827883, 2, 3],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([715827883, 3, 2],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([715827883, 3, 2],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([715827883, 3, 2],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([715827883, 3, 2],"float16"), Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([178956971, 3, 8],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([178956971, 3, 8],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([178956971, 8, 3],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 380283564],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 715827883],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 380283564, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 715827883, 3],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 715827883, 3],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 715827883, 3],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([286331154, 3, 5],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([286331154, 3, 5],"float16"), weight=Tensor([3, 2, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 2, 3],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 2, 3],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([715827883, 3, 2],"float16"), weight=Tensor([3, 1, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv2d(Tensor([1, 101009, 101, 421],"float32"), Tensor([64, 101009, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 222823],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([2228225, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([4194304, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 419431],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 116509, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 32],"float32"), Tensor([4194304, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 349526],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 123362, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 17409],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 17409],"float32"), Tensor([12, 256, 1, 17409],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 17409],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 32768],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 32768],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 32768],"float32"), Tensor([12, 256, 1, 32768],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 131072, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 161320, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 16384, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 16384, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 16384, 256],"float32"), Tensor([24, 128, 16384, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 17409, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 17409, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 17409, 128],"float32"), Tensor([12, 256, 17409, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 2097152],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 32],"float32"), Tensor([4194304, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 34],"float32"), Tensor([4194304, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 2, 36],"float32"), Tensor([4194304, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 16384],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 16384],"float32"), Tensor([24, 128, 1, 16384],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 16384],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 8705],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 8705],"float32"), Tensor([24, 128, 1, 8705],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 32768, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 32768, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 32768, 128],"float32"), Tensor([12, 256, 32768, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 85701, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 8705, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 8705, 256],"float32"), Tensor([24, 128, 8705, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 109318, 101, 389],"float32"), Tensor([64, 109318, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 11184811, 12, 32],"float32"), Tensor([256, 11184811, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 1048576, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 2796203],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 36],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 48],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 52],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 131072, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 131072, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 131072, 256],"float32"), Tensor([3, 128, 131072, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 1677722, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 131072],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 131072],"float32"), Tensor([3, 128, 1, 131072],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 131072],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 69633],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 69633],"float32"), Tensor([3, 128, 1, 69633],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 645278, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 69633, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 69633, 256],"float32"), Tensor([3, 128, 69633, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 699051, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 932068, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 145135, 101, 293],"float32"), Tensor([64, 145135, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 162929, 101, 261],"float32"), Tensor([64, 162929, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 16519105, 10, 26],"float32"), Tensor([256, 16519105, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 16777216, 16, 16],"float32"), Tensor([3, 16777216, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 16384],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 16384],"float32"), Tensor([24, 256, 1, 16384],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 16384],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 8705],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 8705],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 8705],"float32"), Tensor([24, 256, 1, 8705],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 131072, 16],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 131072, 16],"float32"), Tensor([12, 512, 131072, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 131072, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 131072],"float32"), Tensor([12, 512, 1, 131072],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 131072],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 131072],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([8388608, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 69633],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16384, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16384, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16384, 128],"float32"), Tensor([24, 256, 16384, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32, 32],"float32"), Tensor([8388608, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32, 65536],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32, 65536],"float32"), Tensor([12, 512, 1, 65536],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32, 65536],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32768, 64],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32768, 64],"float32"), Tensor([12, 512, 32768, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 32768, 64],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 4, 4],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 4, 524288],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 4, 524288],"float32"), Tensor([12, 512, 1, 524288],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 4, 524288],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 524288, 4],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 524288, 4],"float32"), Tensor([12, 512, 524288, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 524288, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 64, 32768],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 64, 32768],"float32"), Tensor([12, 512, 1, 32768],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 64, 32768],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 64, 64],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 65536, 32],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 65536, 32],"float32"), Tensor([12, 512, 65536, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 65536, 32],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 69633, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 8705, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 8705, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 8705, 128],"float32"), Tensor([24, 256, 8705, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 131072],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 131072],"float32"), Tensor([3, 256, 1, 131072],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 131072],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 131072, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 131072, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 131072, 128],"float32"), Tensor([3, 256, 131072, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 257724, 101, 165],"float32"), Tensor([64, 257724, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 262144, 128, 128],"float32"), Tensor([256, 262144, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 262144, 128, 128],"float32"), Tensor([3, 262144, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 268435456, 4, 4],"float32"), Tensor([3, 268435456, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 3395389],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 3395389],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 6391321],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 6391321],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 3395389, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 3395389, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 6391321, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 6391321, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 34817, 256, 256],"float32"), Tensor([3, 34817, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 16],"float32"), Tensor([8388608, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 34817],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 65536],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 65536],"float32"), Tensor([24, 512, 1, 65536],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 16, 65536],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 262144, 4],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 262144, 4],"float32"), Tensor([24, 512, 262144, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 262144, 4],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32, 32768],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32, 32768],"float32"), Tensor([24, 512, 1, 32768],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32, 32768],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32, 32],"float32"), Tensor([8388608, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32768, 32],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32768, 32],"float32"), Tensor([24, 512, 32768, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 32768, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 34817, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 4, 262144],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 4, 262144],"float32"), Tensor([24, 512, 1, 262144],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 4, 262144],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 65536, 16],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 65536, 16],"float32"), Tensor([24, 512, 65536, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4096, 65536, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 4194304, 32, 32],"float32"), Tensor([3, 4194304, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 16],"float32"), Tensor([8388608, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 16],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 524288],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 524288],"float32"), Tensor([3, 512, 1, 524288],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 524288],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 17409, 256],"float32"), Tensor([12, 128, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 17409, 256],"float32"), Tensor([12, 128, 17409, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 2097152, 4],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 2097152, 4],"float32"), Tensor([3, 512, 2097152, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 2097152, 4],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 256, 17409],"float32"), Tensor([12, 128, 1, 17409],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 256, 17409],"float32"), Tensor([12, 128, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 262144, 32],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 262144, 32],"float32"), Tensor([3, 512, 262144, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 262144, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 262144],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 262144],"float32"), Tensor([3, 512, 1, 262144],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 262144],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 32],"float32"), Tensor([8388608, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 32],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 2097152],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 2097152],"float32"), Tensor([3, 512, 1, 2097152],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 2097152],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 4],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 524288, 16],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 524288, 16],"float32"), Tensor([3, 512, 524288, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 524288, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([28633116, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 44739243],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 44739243, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 65536, 256, 256],"float32"), Tensor([128, 65536, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 65536, 256, 256],"float32"), Tensor([3, 65536, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 8775775, 10, 26],"float32"), Tensor([256, 8775775, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 8912897, 10, 26],"float32"), Tensor([256, 8912897, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 104858, 16, 136],"float32"), Tensor([64, 104858, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 222823],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 26215, 136],"float32"), Tensor([64, 64, 26215, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 26215, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1009, 256, 129, 129],"float32"), Tensor([1009, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([1009, 256, 129, 129],"float32"), Tensor([512, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 17010],"float32"), Tensor([1, 1, 4, 17010],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 17010],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 32018],"float32"), Tensor([1, 1, 4, 32018],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 32018],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 16132, 260],"float32"), Tensor([1, 1, 16132, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 16132, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 16195, 259],"float32"), Tensor([1, 1, 16195, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 16195, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 16257, 258],"float32"), Tensor([1, 1, 16257, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 16257, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 17010, 131],"float32"), Tensor([1, 1, 17010, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 17010, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 16257],"float32"), Tensor([1, 1, 4, 16257],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 16257],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 16195],"float32"), Tensor([1, 1, 4, 16195],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 16195],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 16132],"float32"), Tensor([1, 1, 4, 16132],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 16132],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 32018, 131],"float32"), Tensor([1, 1, 32018, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 32018, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 130, 131, 131],"float32"), Tensor([1, 130, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([1024, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1024, 256, 128, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1024, 4096, 32, 32],"float32"), Tensor([1024, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1024, 4096, 32, 32],"float32"), Tensor([1024, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1024, 4096, 32, 32],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1024, 4096, 32, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1041, 256, 127, 127],"float32"), Tensor([1041, 256, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([1041, 256, 127, 127],"float32"), Tensor([512, 256, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([10923, 1024, 12, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1104673, 48, 9, 9],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([11184811, 96, 2, 2],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([12, 1, 11, 32537632],"float32"), Tensor([1, 1, 4, 32537632],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 11, 32537632],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 32537632, 11],"float32"), Tensor([1, 1, 32537632, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 1, 32537632, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 2957967, 11, 11],"float32"), Tensor([1, 2957967, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([32],"float32"), )
paddle.nn.functional.conv2d(Tensor([128, 2048, 128, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([128, 2048, 128, 128],"float32"), Tensor([128, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([128, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([128, 2048, 128, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([131072, 2048, 4, 4],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([131072, 2048, 4, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([132959, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([134217728, 8, 2, 2],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([137, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([137, 1024, 128, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1398102, 192, 4, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1398102, 192, 4, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1398102, 192, 4, 4],"float32"), Tensor([96, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([139811, 128, 12, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1485483, 24, 8, 8],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1485483, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1485483, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([15158, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([15158, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 344149],"float32"), weight=Tensor([3, 1, 5, 344149],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 333875],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 333875],"float32"), weight=Tensor([3, 1, 13, 333875],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16385, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([17409, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([1760573, 1, 36, 36],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([19807, 512, 15, 15],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([2, 192, 1485483, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 1485483, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 1485483],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 1485483],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 5941931],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 47535446, 4, 4],"float32"), Tensor([48, 47535446, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2177, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([273, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([273, 128, 256, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([275, 128, 255, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([275, 128, 255, 255],"float32"), Tensor([275, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([2970966, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([2970966, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([2970966, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([2970966, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([2970966, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([2970966, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 23767723],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 23767723, 2],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([30, 113180, 12, 56],"float32"), Tensor([512, 113180, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 10611, 56],"float32"), Tensor([512, 128, 10611, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 34953],"float32"), Tensor([128, 128, 3, 34953],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 34953],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 3884, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 3884, 153],"float32"), Tensor([128, 128, 3884, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 29242, 17, 153],"float32"), Tensor([128, 29242, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([35, 1024, 256, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([35651585, 16, 2, 2],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 11883862, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 11883862, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 11883862, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 11883862, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 11883862, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 11883862, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 11883862, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 11883862, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 11883862, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 11883862, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 3, 11883862, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 11883862],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 5941931],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 5941931, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4096, 1, 15474, 36],"float32"), Tensor([1, 1, 15474, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 15474, 36],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 36, 15474],"float32"), Tensor([1, 1, 4, 15474],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 1, 36, 15474],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4096, 430, 36, 36],"float32"), Tensor([1, 430, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([4353, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([545, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([64, 1, 1273271, 28],"float32"), Tensor([6, 1, 1273271, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 1273271],"float32"), Tensor([6, 1, 3, 1273271],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 45474, 28, 28],"float32"), Tensor([6, 45474, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([6854, 128, 17, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([69, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([69, 2048, 128, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([69, 512, 256, 256],"float32"), Tensor([12, 128, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([742742, 192, 4, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([742742, 192, 4, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([74275, 128, 12, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 1267612, 15, 15],"float32"), Tensor([512, 1267612, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 8739],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 8739],"float32"), Tensor([256, 128, 1, 8739],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 8739, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 8739, 255],"float32"), Tensor([256, 128, 8739, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 17409, 128, 128],"float32"), Tensor([256, 17409, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 8705],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 8705],"float32"), Tensor([256, 256, 3, 8705],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 8705, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 8705, 128],"float32"), Tensor([256, 256, 8705, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 32, 241, 36983],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([32],"float32"), )
paddle.nn.functional.conv2d(Tensor([8, 32, 36983, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([32],"float32"), )
paddle.nn.functional.conv2d(Tensor([8, 4387, 255, 255],"float32"), Tensor([256, 4387, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 15, 37138],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 16, 34817],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 34817, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 512, 37138, 15],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8571, 1024, 10, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(x=Tensor([100, 2535224, 3, 3],"float32"), weight=Tensor([36, 2535224, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 36, 211269, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 36, 211269, 3],"float32"), weight=Tensor([36, 36, 211269, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 36, 3, 211269],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 36, 3, 211269],"float32"), weight=Tensor([36, 36, 1, 211269],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([190141782, 3, 2, 2],"float32"), bias=Tensor([190141782],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 95070891],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 95070891, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 95070891, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 71303169, 4, 4],"float32"), weight=Tensor([1, 71303169, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 95070891, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([47535446, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([47535446, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([7042289, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 1048576, 4],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 32768],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 4, 4096],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 4096, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 262144],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2097152],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 2048, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 4, 2048],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2097152, 2],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 262144, 16],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 32768, 128],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 1048576],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 512, 2048, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 512, 4, 2048],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 524288, 8],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 524288],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 512, 2048, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 512, 4, 2048],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 3, 2796203, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 3, 4, 2796203],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 131072, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 174763, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 3, 174763],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 4, 131072],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 139265],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 262144],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 262144],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 262144],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 139265, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 262144, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 262144, 128],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 262144, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 128, 131072, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 128, 2, 131072],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 139265, 128, 128],"float32"), Tensor([139265, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 16384],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16384, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 32, 32],"float32"), Tensor([2048, 233017, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 32768, 64],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 64, 32768],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 64, 64],"float32"), Tensor([2048, 233017, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 3, 43691],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 43691, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 131072],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 131072, 128],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 2, 32768],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 32768, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 4194304, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 262144, 64],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 262144],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 3, 43691],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 43691, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16384, 64],"float32"), Tensor([4096, 256, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 32, 32],"float32"), Tensor([4096, 116509, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 64, 16384],"float32"), Tensor([4096, 256, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 64, 64],"float32"), Tensor([4096, 116509, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 131072, 64],"float32"), Tensor([512, 256, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 3, 5462],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 5462, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 512, 3, 5462],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 512, 5462, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 512, 3, 5462],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 512, 5462, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 131072],"float32"), Tensor([512, 256, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 256, 10923, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 256, 3, 10923],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([10, 256, 14, 14],"float32"), Tensor([256, 256, 2, 32768],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([10, 256, 14, 14],"float32"), Tensor([256, 256, 32768, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1000, 35652, 8, 8],"float32"), Tensor([35652, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1024, 256, 128, 128],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1048576, 1024, 2, 2],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 11306, 14],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 11306],"float16"), Tensor([256, 256, 2, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float16"), Tensor([256, 256, 2, 32768],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float16"), Tensor([256, 256, 32768, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1089, 128, 128, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([119304648, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([119304648, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([119304648, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([119304648, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([119304648, 4, 3, 3],"float16"), Tensor([4, 2, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1253, 256, 124, 108],"float32"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1253, 64, 248, 216],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([128, 2048, 128, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16384, 1024, 16, 16],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178956971, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190141782, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 128, 131072, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 128, 2, 131072],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 178956971, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 178956971, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 178956971, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 178956971, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 178956971, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 238609295, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 238609295, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 238609295, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 238609295, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 238609295],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 238609295],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 238609295],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 238609295],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 79536432, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 79536432, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 79536432, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 79536432, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 119304648, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 119304648, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 357913942],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 357913942],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 357913942],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 357913942, 3],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 357913942, 3],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 95070891, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 95070891, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 21298, 248, 216],"float32"), Tensor([21298, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 285212673, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 190141782, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 190141782],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([253522376, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2281701379],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 84507459, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 357913942, 2],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 357913942, 3, 2],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 178956971, 3],"float16"), Tensor([4, 2, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 178956971],"float16"), Tensor([4, 2, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 95070891],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 95070891],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 95070891, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 95070891, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 95070891, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 95070891, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2228225, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2228225, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2228225, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2228225, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2228225, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([238609295, 2, 3, 3],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([238609295, 2, 3, 3],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([238609295, 2, 3, 3],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([238609295, 3, 3, 2],"float16"), Tensor([2, 2, 1, 1],"float16"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([377266, 32, 21, 9],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 11883862, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 11883862, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 63380594],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 63380594, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 5941931, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 5941931, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 8912897, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 8912897, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 8912897, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 8912897],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 8912897],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 8912897],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 8912897, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 8912897, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 8912897, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 5941931, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 5941931, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 5941931],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 5941931],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 5941931],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 5941931],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 5941931],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 5941931],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 5941931, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 5941931, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 5941931, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 5941931, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 5941931, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 5941931, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 8912897, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 8912897, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 8912897, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([43638, 64, 43, 19],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 123791, 9],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 32, 21, 53053],"float32"), Tensor([32, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 29319, 19],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 43, 12955],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([95070891, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([95070891, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([95070891, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([95070891, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([178956971, 6, 2, 2],"float16"), weight=Tensor([6, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([190141782, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([190141782, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([190141782, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([190141782, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 178956971, 2, 6],"float16"), weight=Tensor([6, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 178956971, 6],"float16"), weight=Tensor([6, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 285212673],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 126761188, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 126761188],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 95070891, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 95070891, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 178956971, 4],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 190141782, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 190141782, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 190141782, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 190141782],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 190141782],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 190141782],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 357913942],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 357913942],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 357913942],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 357913942],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 357913942, 2],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 357913942, 2],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 357913942, 2],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 178956971, 2],"float16"), weight=Tensor([6, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 178956971],"float16"), weight=Tensor([6, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 95070891],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 95070891, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([22369622, 3, 8, 8],"float16"), weight=Tensor([3, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([22369622, 3, 8, 8],"float16"), weight=Tensor([3, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([22369622, 3, 8, 8],"float16"), weight=Tensor([3, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([357913942, 3, 2, 2],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([357913942, 3, 2, 2],"float16"), weight=Tensor([3, 1, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([95070891, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([95070891, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([95070891, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv3d(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([2796203, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([2796203, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([2796203, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 2970966, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 2970966, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 3, 5592406, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 5592406, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 5592406],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 5592406, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 5592406, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 6, 1485483, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 2796203, 8, 8],"float32"), Tensor([12, 1, 2796203, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 2796203, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 2796203, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 2796203, 8],"float32"), Tensor([12, 1, 3, 2796203, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 2796203, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 2796203, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 1485483],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 2796203],"float32"), Tensor([12, 1, 3, 3, 2796203],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 2796203],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 2796203],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 19884108, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 19884108, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 19884108],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 8, 2970966, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 2970966, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 2970966, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 2970966, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 2970966, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 5592406, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 5592406, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 2970966, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 2970966, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 2970966, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 5592406, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 5592406, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 5592406, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([742742, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11184811, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([11184811, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 22369622, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 23767723, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 22369622, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 23767723, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 22369622, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 23767723, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 23767723, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 23767723, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 23767723, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 23767723, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 23767723, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 22369622],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 23767723],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([178956971, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([178956971, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([89478486, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 22369622, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 23767723, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 22369622, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 23767723, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 44739243, 3],"float16"), weight=Tensor([2, 3, 3, 3, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 44739243, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 44739243, 4, 3],"float16"), weight=Tensor([2, 3, 3, 3, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 44739243, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 44739243, 4, 4, 3],"float16"), weight=Tensor([2, 3, 3, 3, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 44739243, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([22369622, 4, 4, 4, 3],"float16"), weight=Tensor([2, 3, 3, 3, 3],"float16"), bias=Tensor([2],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([22369622, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([1114113, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1114113, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([1398102, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([178956971, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([178956971, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([178956971, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([178956971, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 178956971, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 178956971, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 178956971, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 84507459],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 84507459, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 89478486, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 95070891, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 178956971, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 178956971, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 178956971, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 178956971, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 178956971, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 19884108, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 178956971, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 178956971, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 178956971, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 178956971, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 178956971, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 178956971],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 178956971],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 178956971],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 178956971],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 178956971],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 84507459],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 84507459, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 828505],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 828505, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 828505, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 79536432],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 79536432, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 79536432, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 828505, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 3, 3, 39768216],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 3, 39768216, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 39768216, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 89478486],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 89478486],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 89478486],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 89478486],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 89478486],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 95070891],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 95070891],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 89478486, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 89478486, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 89478486, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 89478486, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 89478486, 2],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 95070891, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 95070891, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 95070891, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 95070891, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 19884108, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 19884108],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 11184811, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 11184811],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 89478486, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 89478486, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 89478486, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 89478486, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 89478486, 2, 2],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 95070891, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 95070891, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 5592406, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 5592406, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 2970966, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 5592406, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 5592406, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 5592406, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 5592406, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 5592406, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 5592406, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 2970966, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 5592406, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 5592406, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 5592406, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 5592406, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 5592406, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 5592406, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 2970966],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 5592406],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 5592406],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 5592406],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 5592406],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 5592406],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 5592406],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 89478486],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 5592406, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 5592406, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 5592406, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 5592406, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 26512144, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 89478486, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2796203, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 2228225, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 5592406, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 5592406, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 5592406],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 2228225, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 4194304, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 4194304, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 4194304, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 2228225, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 4194304, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 4194304, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 4194304, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 2228225],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 4194304],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 4194304],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 4194304],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4194304, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4194304, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4194304, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 5592406, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 2228225, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 4194304, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 4194304, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 5592406, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 2228225, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 4194304, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 4194304, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 4194304, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 5592406, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 21126865],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 39768216],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 39768216, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 39768216, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 37138, 12, 32, 32],"float32"), Tensor([37138, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([6628036, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([742742, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([95070891, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([95070891, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 178956971, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 178956971, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 178956971, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 84507459],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 84507459, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 89478486, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 95070891, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 84507459],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 42253730],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 79536432],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 79536432, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 42253730, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 79536432, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 39768216],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 39768216, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 39768216, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 95070891],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 95070891],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 95070891, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 95070891, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 95070891, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 95070891, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 95070891, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 95070891, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 89478486, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([95070891, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([95070891, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.cosine_similarity(Tensor([1, 2147483649, 2],"float16"), Tensor([1, 2147483649, 2],"float16"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 2147483649, 2],"float16"), Tensor([1, 2147483649, 2],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 4294967297],"float16"), Tensor([1, 4294967297],"float16"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 4294967297],"float16"), Tensor([1, 4294967297],"float16"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 4294967297],"float16"), Tensor([1, 4294967297],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 4294967297],"float16"), Tensor([1, 4294967297],"float16"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 858993460],"float16"), Tensor([1, 5, 858993460],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 858993460],"float16"), Tensor([1, 5, 858993460],"float16"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 858993460],"float16"), Tensor([1, 5, 858993460],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 858993460],"float16"), Tensor([1, 5, 858993460],"float16"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 19014179],"float32"), Tensor([10, 1, 19014179],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 22817014, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([175515491, 13],"float32"), Tensor([175515491, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([17825793, 128],"float32"), Tensor([17825793, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([178956971, 2, 3, 4],"float16"), Tensor([2, 3, 4],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([19014179, 12, 10],"float32"), Tensor([19014179, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([210, 10865245],"float32"), Tensor([210, 10865245],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([2228225, 1024],"float32"), Tensor([2228225, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([268435457, 8, 2],"float16"), Tensor([268435457, 8, 2],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 715827883, 2],"float16"), Tensor([3, 715827883, 2],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 178956971],"float16"), Tensor([3, 8, 178956971],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([32, 71303169],"float32"), Tensor([32, 71303169],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([429496730, 5, 2],"float16"), Tensor([1, 5, 2],"float16"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([429496730, 5, 2],"float16"), Tensor([1, 5, 2],"float16"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([429496730, 5, 2],"float16"), Tensor([1, 5, 2],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([429496730, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([429496730, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([429496730, 5, 2],"float16"), Tensor([429496730, 5, 2],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([1, 5],"float16"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([1, 5],"float16"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([1, 5],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([1, 5],"float16"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(x1=Tensor([1431655766, 3],"float16"), x2=Tensor([1431655766, 3],"float16"), axis=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 1140850690],"float32"), x2=Tensor([2, 1140850690],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 2147483649],"float16"), x2=Tensor([2, 2147483649],"float16"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 2147483649],"float16"), x2=Tensor([2, 2147483649],"float16"), axis=1, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 536870913, 4],"float16"), x2=Tensor([2, 536870913, 4],"float16"), axis=1, eps=0, )
paddle.nn.functional.cross_entropy(Tensor([1, 103713700, 22],"float32"), Tensor([1, 103713700],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([10, 10371370, 22],"float32"), Tensor([10, 10371370],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 2281702, 10],"float32"), Tensor([100, 2281702],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1073741825, 4],"float16"), Tensor([1073741825],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([10762743, 212],"float32"), Tensor([10762743, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([114085069, 20],"float32"), Tensor([114085069, 1],"int64"), reduction="none", use_softmax=True, )
paddle.nn.functional.cross_entropy(Tensor([1140850690, 2],"float32"), label=Tensor([1140850690, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1140851, 20, 100],"float32"), Tensor([1140851, 20, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 1772884, 99],"float32"), Tensor([13, 1772884, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 1646250, 99],"float32"), Tensor([14, 1646250, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 11408507, 100],"float32"), Tensor([2, 11408507, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([20259280, 212],"float16"), Tensor([20259280, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([20259280, 212],"float16"), Tensor([20259280],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([22369622, 102],"float32"), label=Tensor([22369622, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([228170138, 10],"float32"), Tensor([228170138, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([228170138, 10],"float32"), Tensor([228170138, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([230, 512, 1024, 19],"float32"), Tensor([230, 512, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([252645136, 17],"float16"), Tensor([252645136],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([25928425, 4, 22],"float32"), Tensor([25928425, 4],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([286331154, 15],"float16"), Tensor([286331154],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 357913942],"float16"), Tensor([3, 2, 2],"int64"), soft_label=True, label_smoothing=0.7336344401714625, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([3292499, 7, 99],"float32"), Tensor([3292499, 7, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([3292499, 7, 99],"float32"), Tensor([3292499, 7, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([39269, 125, 125, 7],"float16"), Tensor([39269, 125, 125],"int64"), weight=Tensor([7],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 29319, 1024, 19],"float32"), Tensor([4, 29319, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 58638, 19],"float32"), Tensor([4, 512, 58638],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([429496730, 10],"float16"), Tensor([429496730, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([429496730, 10],"float16"), Tensor([429496730, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([456340276, 5],"float32"), Tensor([456340276, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([536870913, 8],"float16"), Tensor([536870913],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([57042535, 4, 10],"float32"), Tensor([57042535, 4],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([8388609, 512],"float16"), Tensor([8388609],"int64"), weight=None, ignore_index=512, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(input=Tensor([1140850690, 2],"float32"), label=Tensor([1140850690, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([22369622, 102],"float32"), label=Tensor([22369622, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([228170138, 10],"float32"), label=Tensor([228170138, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([429496730, 10],"float16"), label=Tensor([429496730, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([53024288, 81],"float16"), label=Tensor([53024288],"int64"), reduction="mean", )
paddle.nn.functional.flashmask_attention(Tensor([2731, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([2731, 2048, 8, 96],"float16"), Tensor([2731, 2048, 8, 96],"float16"), Tensor([2731, 2048, 8, 96],"float16"), startend_row_indices=Tensor([2731, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3130443, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3130443, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2086962, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2086962, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.glu(Tensor([214748365, 20],"float16"), -1, )
paddle.nn.functional.glu(Tensor([214748365, 20],"float16"), -1, None, )
paddle.nn.functional.glu(Tensor([214748365, 20],"float16"), 1, None, )
paddle.nn.functional.glu(Tensor([5, 858993460],"float16"), -1, )
paddle.nn.functional.glu(Tensor([6, 715827883],"float16"), 0, None, )
paddle.nn.functional.glu(x=Tensor([10, 53687092, 8],"float16"), )
paddle.nn.functional.glu(x=Tensor([1073741825, 4],"float16"), )
paddle.nn.functional.glu(x=Tensor([268435457, 2, 8],"float16"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 89478486],"float16"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 89478486],"float16"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 89478486],"float16"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 22369622, 8],"float16"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 22369622, 8],"float16"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 6, 22369622, 8],"float16"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 67108865, 2, 8],"float16"), )
paddle.nn.functional.glu(x=Tensor([4, 67108865, 2, 8],"float16"), axis=0, )
paddle.nn.functional.glu(x=Tensor([4, 67108865, 2, 8],"float16"), axis=2, )
paddle.nn.functional.glu(x=Tensor([44739243, 6, 2, 8],"float16"), )
paddle.nn.functional.glu(x=Tensor([44739243, 6, 2, 8],"float16"), axis=2, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 30316, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 176, 176],"float32"), Tensor([1, 90948, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 184, 184],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 184, 184],"float32"), Tensor([1, 30316, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 184, 184],"float32"), Tensor([1, 90948, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 192, 192],"float32"), Tensor([1, 1, 1140850690, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 1, 192, 192],"float32"), Tensor([1, 90948, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 128, 128, 139265],"float32"), Tensor([1, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 128, 139265],"float32"), Tensor([1, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 139265, 128],"float32"), Tensor([1, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 139265, 128],"float32"), Tensor([1, 128, 139265, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 128, 139265, 128],"float32"), Tensor([1, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 139265, 128, 128],"float32"), Tensor([1, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1, 14905, 368, 416],"float32"), Tensor([1, 391, 436, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 19015, 400, 300],"float32"), Tensor([1, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 21035, 298, 364],"float32"), Tensor([1, 352, 407, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 23283, 280, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 23283, 280, 350],"float32"), Tensor([1, 298, 364, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 23283, 280, 350],"float32"), Tensor([1, 368, 416, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 2742430, 32, 26],"float32"), Tensor([1, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 2910334, 28, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 2910334, 28, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 20372334],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 557057, 64, 64],"float32"), Tensor([1, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 557057, 64, 64],"float32"), Tensor([1, 76, 76, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 61896, 192, 192],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 67395, 184, 184],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 67395, 184, 184],"float32"), Tensor([1, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 73661, 176, 176],"float32"), Tensor([1, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 73661, 176, 176],"float32"), Tensor([1, 1, 37632, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1089, 128, 128, 128],"float32"), Tensor([1089, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([11142, 32, 80, 80],"float32"), Tensor([11142, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([11606, 3, 256, 256],"float32"), Tensor([11606, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([11606, 3, 256, 256],"float32"), Tensor([11606, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([128, 11142, 40, 40],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 2786, 80, 80],"float32"), Tensor([128, 2786, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 2786, 80, 80],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 13927, 40],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 20, 27853],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 27853, 20],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 40, 13927],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 6964, 80],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([128, 32, 80, 6964],"float32"), Tensor([128, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([139265, 4, 64, 64],"float32"), Tensor([139265, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([139265, 4, 64, 64],"float32"), Tensor([139265, 76, 76, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 2177, 256, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 2177, 256, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 64, 8705],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 8705, 64],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 256, 8705, 64],"float32"), Tensor([16, 64, 8705, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 185686, 256],"float32"), Tensor([16, 256, 185686, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 185686, 256],"float32"), Tensor([16, 256, 185686, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 185686, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 185686, 256],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 185686],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 185686],"float32"), Tensor([16, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 278529, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 256, 278529, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 278529, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 3, 256, 256],"float32"), Tensor([16, 278529, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 10, 445645],"float32"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 32, 297097, 15],"float32"), Tensor([16, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([16, 34817, 64, 64],"float32"), Tensor([16, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([17409, 32, 64, 64],"float32"), Tensor([17409, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 64, 64],"float32"), Tensor([176, 101283, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 64, 64],"float32"), Tensor([176, 64, 101283, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 64, 67522],"float32"), Tensor([176, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 67522, 64],"float32"), Tensor([176, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3, 67522, 64],"float32"), Tensor([176, 64, 67522, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([176, 3166, 64, 64],"float32"), Tensor([176, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([185686, 3, 64, 64],"float32"), Tensor([185686, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([190141782, 3, 2, 2],"float32"), Tensor([190141782, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2177, 256, 64, 64],"float32"), Tensor([2177, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2970966, 3, 16, 16],"float32"), Tensor([2970966, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([3727, 4, 368, 416],"float32"), Tensor([3727, 391, 436, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 34817],"float32"), Tensor([4, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 128, 34817],"float32"), Tensor([4, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 34817, 128],"float32"), Tensor([4, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 34817, 128],"float32"), Tensor([4, 128, 34817, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 128, 34817, 128],"float32"), Tensor([4, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4, 139265, 64, 64],"float32"), Tensor([4, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 32, 278529, 64],"float32"), Tensor([4, 64, 278529, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 32, 278529, 64],"float32"), Tensor([4, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 32, 64, 278529],"float32"), Tensor([4, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4, 34817, 128, 128],"float32"), Tensor([4, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([44565, 32, 40, 40],"float32"), Tensor([44565, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([46422, 3, 64, 256],"float32"), Tensor([46422, 32, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([47535446, 3, 4, 4],"float32"), Tensor([47535446, 4, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([4754, 4, 400, 300],"float32"), Tensor([4754, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([512, 273, 64, 256],"float32"), Tensor([512, 273, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 273, 64, 256],"float32"), Tensor([512, 32, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 5803, 256],"float32"), Tensor([512, 32, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 5803, 256],"float32"), Tensor([512, 32, 5803, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 64, 23211],"float32"), Tensor([512, 32, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 64, 256],"float32"), Tensor([512, 22283, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([512, 3, 64, 256],"float32"), Tensor([512, 32, 69633, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([5259, 4, 298, 364],"float32"), Tensor([5259, 352, 407, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([56, 10186167, 2, 2],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 159159, 16, 16],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 2546542, 4, 4],"float32"), Tensor([56, 4, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 1273271, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 16],"float32"), Tensor([56, 16, 1273271, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 16, 848848],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 10186167, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 2],"float32"), Tensor([56, 2, 10186167, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 2, 6790778],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 212212, 64],"float32"), Tensor([56, 64, 212212, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 212212, 64],"float32"), Tensor([56, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 32, 32],"float32"), Tensor([56, 32, 636636, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 32, 32],"float32"), Tensor([56, 636636, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 32, 424424],"float32"), Tensor([56, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 3395389, 4],"float32"), Tensor([56, 4, 3395389, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 3395389, 4],"float32"), Tensor([56, 4, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 4, 3395389],"float32"), Tensor([56, 4, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 4, 4],"float32"), Tensor([56, 4, 5093084, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 4, 4],"float32"), Tensor([56, 5093084, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 424424, 32],"float32"), Tensor([56, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 424424, 32],"float32"), Tensor([56, 32, 424424, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 64, 212212],"float32"), Tensor([56, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 64, 64],"float32"), Tensor([56, 318318, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 64, 64],"float32"), Tensor([56, 64, 318318, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 6790778, 2],"float32"), Tensor([56, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 6790778, 2],"float32"), Tensor([56, 2, 6790778, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 848848, 16],"float32"), Tensor([56, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 3, 848848, 16],"float32"), Tensor([56, 16, 848848, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 39790, 32, 32],"float32"), Tensor([56, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([56, 9948, 64, 64],"float32"), Tensor([56, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([5821, 4, 280, 350],"float32"), Tensor([5821, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([5821, 4, 280, 350],"float32"), Tensor([5821, 298, 364, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([5821, 4, 280, 350],"float32"), Tensor([5821, 368, 416, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([61896, 1, 192, 192],"float32"), Tensor([61896, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([67395, 1, 184, 184],"float32"), Tensor([67395, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([685608, 4, 32, 26],"float32"), Tensor([685608, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([727584, 4, 28, 28],"float32"), Tensor([727584, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([727584, 4, 28, 28],"float32"), Tensor([727584, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([73661, 1, 176, 176],"float32"), Tensor([73661, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([742742, 3, 32, 32],"float32"), Tensor([742742, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(x=Tensor([16, 64, 80, 94, 311],"float32"), grid=Tensor([16, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.group_norm(Tensor([1, 1024, 10, 222823],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 10, 419431],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 116509, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 12, 185686],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 12, 349526],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 123362, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 123791, 18],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 131072, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 139265, 16],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 159159, 14],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 2, 1114113],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 2, 2097152],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 222823, 10],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 53053, 42],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 55706, 40],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 58638, 38],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 6, 371371],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 61896, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 65537, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 69633, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 79580, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 8, 278529],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 85701, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 92843, 24],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 12, 1485483],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 16, 1114113],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 20, 891290],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 222823, 80],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 234550, 76],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 247581, 72],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 318318, 56],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 342804, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 371371, 48],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 495161, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 557057, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 636636, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 128, 891290, 20],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([10316, 1024, 6, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([10923, 1024, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([13264, 1024, 6, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([14284, 1024, 6, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([15474, 1024, 6, 24],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([16132, 1024, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([17141, 128, 20, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([178956971, 4, 3, 2],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([18569, 128, 12, 80],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([19546, 128, 12, 76],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([19895, 1024, 8, 14],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([2, 134217729, 2, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 134217729, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 268435457, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 268435457, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 44739243, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 89478486, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 44739243, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 89478486, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 89478486, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 4, 134217729, 2, 2],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 134217729, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 268435457, 2],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 268435457],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 178956971],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 44739243],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 89478486],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 44739243, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 89478486, 2],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 89478486],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 536870913],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 67108865, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 536870913, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 67108865, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([20632, 1024, 6, 18],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([20632, 128, 12, 72],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([23211, 1024, 6, 16],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([26527, 1024, 2, 42],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([26527, 128, 12, 56],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([28567, 128, 12, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([30948, 1024, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([30948, 128, 12, 48],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([32769, 1024, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([34817, 1024, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([357913942, 3, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([357913942, 4, 3],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([37138, 1024, 6, 10],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([39790, 128, 16, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([41264, 128, 12, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([44739243, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([44739243, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([46422, 128, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([5803, 1024, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([58255, 1024, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([61681, 1024, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([65536, 1024, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([74275, 128, 12, 20],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.group_norm(Tensor([8571, 1024, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([89478486, 3, 2, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([89478486, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([89478486, 4, 3, 2, 2],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([89478486, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([9285, 1024, 6, 40],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([9773, 1024, 6, 38],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.hardshrink(Tensor([2281701379],"float32"), 0.5, None, )
paddle.nn.functional.hardshrink(Tensor([4294967297],"float16"), 0, None, )
paddle.nn.functional.hardshrink(Tensor([4294967297],"float16"), 0.5, None, )
paddle.nn.functional.hardshrink(x=Tensor([2281701379],"float32"), )
paddle.nn.functional.hardshrink(x=Tensor([4294967297],"float16"), )
paddle.nn.functional.hardshrink(x=Tensor([4294967297],"float16"), threshold=0, )
paddle.nn.functional.instance_norm(Tensor([1048576, 32, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([10737419, 100, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([1073742, 100, 4, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([1140851, 100, 4, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([1426064, 100, 16],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([1426064, 100, 4, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([1431656, 100, 3, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([1521135, 100, 3, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 11408507],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 21474837],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 2147484, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 2281702, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 3579140],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 3802836],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 7158279],"float16"), None, None, Tensor([100],"float16"), Tensor([100],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 7158279],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 2684355],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 2852127],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 5368710],"float16"), None, None, Tensor([100],"float16"), Tensor([100],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 5368710],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4294968, 5],"float16"), None, None, Tensor([100],"float16"), Tensor([100],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4294968, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 16777216, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 2147483648],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 32, 35651585],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 32, 67108864],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 8912897, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2147484, 100, 4, 5],"float16"), None, None, Tensor([100],"float16"), Tensor([100],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2147484, 100, 4, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2684355, 100, 16],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([2684355, 100, 4, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([2684355, 100, 4, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([2863312, 100, 3, 5],"float16"), None, None, Tensor([100],"float16"), Tensor([100],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2863312, 100, 3, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([33554432, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([34817, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([4, 100, 10737419],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 1426064, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 2684355, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 2684355, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 1426064],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 2684355],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 2684355],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 5704254],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 67108865, 4, 4],"float16"), None, None, Tensor([67108865],"float32"), Tensor([67108865],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([557057, 32, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([5704254, 100, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([65536, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([65537, 32, 32, 64],"float16"), None, None, Tensor([32],"float16"), Tensor([32],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 139265, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 262144, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 262145, 64],"float16"), None, None, Tensor([32],"float16"), Tensor([32],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 278529],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 524288],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 524289],"float16"), None, None, Tensor([32],"float16"), Tensor([32],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(x=Tensor([1431655766, 1, 3],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([178956971, 2, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([178956971, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([178956971, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([190141782, 2, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 1, 1073741825],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 1, 2147483649],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 178956971, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 178956971, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 178956971, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 190141782, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 178956971, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 178956971, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 178956971, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 190141782, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 268435457],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 268435457],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 268435457],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 285212673],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 536870912],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 536870913],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 536870913],"float16"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 536870913],"float16"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 357913942, 3],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 357913942, 3],"float16"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 357913942, 3],"float16"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 357913942, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 2, 3],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 2, 3],"float16"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 2, 3],"float16"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 715827883, 3],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([357913942, 2, 2, 3],"float16"), )
paddle.nn.functional.instance_norm(x=Tensor([357913942, 2, 2, 3],"float16"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([357913942, 2, 2, 3],"float16"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([357913942, 2, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([715827883, 1, 3],"float64"), )
paddle.nn.functional.interpolate(Tensor([1, 1, 128, 17825793],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 134217728, 32],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 142606337, 16],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 16, 142606337],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 16, 268435456],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 16777216, 256],"float32"), tuple(1024,1024,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 17825793, 128],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 2228225, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 256, 16777216],"float32"), tuple(1024,1024,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 268435456, 16],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 2859275, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 2859275, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 2859275, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 2859275, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 2970966, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 3100138, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 32, 134217728],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 3241054, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 3565159, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 3961288, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 4194304, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 4753545, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 4753545, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 4753545, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5592406, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 3961288],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 3961288],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 3961288],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5835554, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 6100806, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 64, 67108864],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 3565159],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 3565159],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 3565159],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 3565159],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 67108864, 64],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 6710887, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 686, 6260886],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 704, 3241054],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 704, 6100806],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 3227301],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 3227301],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 3227301],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 736, 3100138],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 736, 5835554],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 2970966],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 2970966],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 2970966],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 2970966],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8912897, 256],"float32"), tuple(1024,1024,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 100, 55925, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 58356, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 61009, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 704, 61009],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 736, 58356],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 768, 55925],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1048576, 64, 64],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 1048576, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 10486, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1101274, 50, 78],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 1130255, 50, 76],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 1130255, 76, 50],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 116320, 181, 204],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 1263226, 50, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1, 17825793],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1, 17825793],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1, 33554432],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1, 33554432],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1048576, 32],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1048576, 32],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 1048576, 32],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 11184811, 3],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 128, 262144],"float32"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 16, 1114113],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 16, 1114113],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 16, 2097152],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 16, 2097152],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 16777216, 2],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 16777216, 2],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 17825793, 1],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 17825793, 1],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 193759, 92],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 2, 16777216],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 2, 16777216],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 262144, 128],"float32"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 3, 11184811],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 32, 1048576],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 32, 557057],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 33554432, 1],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 33554432, 1],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 33554433],"float16"), size=tuple(16,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 128, 364723, 92],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 4, 8388608],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 557057, 32],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 557057, 32],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 557057, 32],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 5592406, 6],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 6, 5592406],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 8388608, 4],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 92, 193759],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 92, 364723],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 1429638, 19, 84],"float32"), size=list[17,82,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 14514, 544, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 146576, 182, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 16519105, 13, 20],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 16777216, 16, 16],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 167773, 100, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 167773, 100, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 168715, 276, 49],"float32"), size=list[274,47,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 17388532, 13, 19],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 17388532, 19, 13],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 19, 128, 1766023],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 128, 1766023],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 19, 128, 938200],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 128, 938200],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 19, 1766023, 128],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 1766023, 128],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 256, 469100],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 256, 883012],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 256, 883012],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 469100, 256],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 19, 469100, 256],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 64, 1876400],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 64, 3532046],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 883012, 256],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 883012, 256],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 19, 883012, 256],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 938200, 128],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 938200, 128],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 192, 1398102, 16],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 192, 16, 1398102],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 192, 16, 742742],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 192, 22369622],"float16"), size=tuple(8,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 192, 742742, 16],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19434242, 13, 17],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 2, 124, 17318417],"float32"), list[496,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 124, 17318417],"float32"), size=list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 124, 9200409],"float32"), list[496,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 124, 9200409],"float32"), size=list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 1249563, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777216],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777216],"float32"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777216],"float32"), size=list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777217],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 8912897],"float32"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 8912897],"float32"), size=list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), list[496,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), size=list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), size=list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777217, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 17825793, 64],"float32"), list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 17825793, 64],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 2097153, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 256, 4456449],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 2, 33554432, 64],"float32"), list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 33554432, 64],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 3947581, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 544, 2097153],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 544, 3947581],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 608, 1876400],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 2, 62, 18400818],"float32"), list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 62, 34636834],"float32"), list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 64, 17825793],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 64, 33554432],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 8912897, 128],"float32"), list[496,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 8912897, 128],"float32"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 8912897, 128],"float32"), size=list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 8912897, 128],"float32"), size=list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 200, 39476, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 200, 544, 39476],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 23283, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float16"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float32"), list[62,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float32"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float32"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 8912897],"float32"), list[62,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 8912897],"float32"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 8912897],"float32"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 101283, 88],"float32"), size=list[88,88,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 1048576, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 1048576, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 128, 131072],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 128, 69633],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 1290556, 13],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 1290556],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 1290556],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 1290556],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 685608],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 685608],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 685608],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 131072, 128],"float32"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 131072, 128],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 139265, 64],"float32"), list[124,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16, 1048576],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16, 1048576],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16, 557057],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16, 557057],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float16"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float32"), list[62,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float32"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float32"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 19, 469100],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 19, 883012],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 190651, 88],"float32"), size=list[88,88,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 200, 44565],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 200, 83887],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), list[124,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 262145, 64],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 304, 55189],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 31, 541201],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 32, 524288],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 32, 524288],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 32769, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 445645, 20],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 469100, 19],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524288, 32],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524288, 32],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524288, 32],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524289, 17],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 53774, 312],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 55189, 304],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 557057, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 557057, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 61681, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 62, 143757],"float32"), list[124,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 62, 270601],"float32"), list[124,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 62, 270601],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262145],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 685608, 13],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 69633, 128],"float32"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 69633, 128],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 838861, 20],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 83887, 200],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 88, 101283],"float32"), size=list[88,88,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 88, 190651],"float32"), size=list[88,88,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 883012, 19],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 8912897, 1],"float32"), list[62,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 8912897, 1],"float32"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 8912897, 1],"float32"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 986896, 17],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 100, 166472],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 100, 166472],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 100, 88439],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 100, 88439],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 106713, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 106713, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 109521, 152],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 109521, 152],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 122406, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 122406, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 130056, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 152, 109521],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 152, 109521],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 166472, 100],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 166472, 100],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 213426, 78],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 219042, 76],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 244812, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 25, 353753],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 25, 353753],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 25, 665887],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 25, 665887],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 260112, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 260112, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 332944, 50],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 38, 438084],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 38, 438084],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 426851, 39],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 426851, 39],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 438084, 38],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 438084, 38],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 489623, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 489623, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 50, 176877],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 50, 332944],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 65028, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 65028, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 665887, 25],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 665887, 25],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 76, 219042],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 268435457, 16],"float16"), size=tuple(8,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 2684355, 25, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 2684355, 25, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 275319, 100, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 275319, 100, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 100, 152],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 100, 152],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 152, 100],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 152, 100],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 29104, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 11883862, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 11883862, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 1431655765],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 3, 1431655765],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 3, 181, 4202029],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 181, 7909701],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 182, 4178941],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 182, 7866241],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 200, 7158279],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 212, 6753094],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 2173049, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 22369622, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 22369622, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 227, 6306854],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 235, 6092153],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 250, 5726624],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 256, 2970966],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 256, 5592406],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 2716312, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 28, 27163112],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 28, 51130564],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 2716312],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 2716312],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 5113057],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 5113057],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 31690297, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 3728271, 204],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 374, 3827957],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 3802836, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 4090446, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 4724020, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 4820390, 297],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5113057, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5187159, 276],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5225022, 274],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5506369, 260],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5658719, 253],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 59652324, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 11883862],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 11883862],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 22369622],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 22369622],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 6817409, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 7017921, 204],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 7158279, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 8892272, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3145, 800, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 315807, 100, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 315807, 100, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 32, 1, 134217728],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 1, 71303169],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 134217728, 1],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 2, 35651585],"float32"), size=tuple(2,2,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 32, 2, 67108864],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 2, 67108864],"float32"), size=tuple(2,2,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 32, 22369622, 6],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 3, 44739243],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 35651585, 2],"float32"), size=tuple(2,2,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 32, 44739243, 3],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 6, 22369622],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 67108864, 2],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 67108864, 2],"float32"), size=tuple(2,2,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 32, 71303169, 1],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 3249, 686, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 34817, 256, 256],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 38667, 374, 297],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3869, 768, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 4, 1183839, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 4, 628915, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 4, 800, 1342178],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 4, 800, 713032],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 4111, 608, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([1, 41944, 200, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 4213, 736, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 43827, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 4405095, 25, 39],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4405095, 25, 39],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 44565, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 25, 38],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 25, 38],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 38, 25],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 38, 25],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4604, 704, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 4965, 576, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 4965, 576, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 4965, 576, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 4965, 576, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 4965, 576, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 5052903, 25, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 5052903, 25, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 5158, 768, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 5158, 768, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 5158, 768, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 5158, 768, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 54783, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 557057, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 5571, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 5603, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 5603, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 5603, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 5603, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 5920, 800, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 6115, 686, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 6391321, 28, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 64, 1048576, 64],"float32"), list[64,128,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 64, 32, 1114113],"float32"), list[64,128,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 64, 32, 2097152],"float32"), list[64,128,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 64, 371371, 96],"float32"), size=list[96,96,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 557057, 64],"float32"), list[64,128,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 64, 699051, 96],"float32"), size=list[96,96,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 729445, 92],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 92, 729445],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 96, 371371],"float32"), size=list[96,96,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 96, 699051],"float32"), size=list[96,96,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 671089, 50, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 68553, 227, 276],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 68830, 200, 312],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 70295, 235, 260],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 70641, 200, 304],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 70641, 304, 200],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 7282, 768, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 73939, 212, 274],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 7428, 640, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 7428, 640, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 768, 14, 212212],"float32"), size=tuple(28,28,), align_corners=False, mode="bicubic", )
paddle.nn.functional.interpolate(Tensor([1, 768, 14, 399458],"float32"), size=tuple(28,28,), align_corners=False, mode="bicubic", )
paddle.nn.functional.interpolate(Tensor([1, 768, 16, 349526],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 16, 349526],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 174763, 32],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 174763, 32],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 212212, 14],"float32"), size=tuple(28,28,), align_corners=False, mode="bicubic", )
paddle.nn.functional.interpolate(Tensor([1, 768, 31, 180401],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 32, 174763],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 349526, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 349526, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 399458, 14],"float32"), size=tuple(28,28,), align_corners=False, mode="bicubic", )
paddle.nn.functional.interpolate(Tensor([1, 7711, 544, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 77869, 182, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 78952, 200, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 7929, 736, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 81809, 250, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 83887, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 84881, 200, 253],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 8666, 704, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([10226113, 5, 6, 7],"float64"), size=None, scale_factor=list[1.2,3.3,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([10226113, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([10226113, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([10405, 258, 25, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([10405, 258, 25, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([10486, 1, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([10486, 256, 40, 40],"float16"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([10486, 64, 80, 80],"float16"), size=list[160,160,], )
paddle.nn.functional.interpolate(Tensor([10486, 64, 80, 80],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1068, 258, 100, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1068, 258, 100, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([1073742, 10, 10, 10, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([1073742, 10, 10, 10, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([1398102, 192, 16],"float16"), size=tuple(8,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([14855, 3, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([16, 32, 19, 234550],"float32"), size=tuple(19,19,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 32, 20, 222823],"float32"), size=list[40,40,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 32, 222823, 20],"float32"), size=list[40,40,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 32, 234550, 19],"float32"), size=tuple(19,19,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 64, 10, 222823],"float32"), size=list[20,20,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 64, 10, 222823],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([16, 64, 222823, 10],"float32"), size=list[20,20,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([16, 64, 222823, 10],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([164, 256, 200, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([168715, 1, 276, 49],"float32"), size=list[274,47,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([17409, 2, 256, 256],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([185686, 3, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 2147484],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 10, 2147484],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 21474837],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 21474837],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 21474837],"float16"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 21474837],"float16"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 21474837],"float16"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 21474837],"float16"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 5368710, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 10, 5368710, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 5368710, 10, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 5368710, 10, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 1140851, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 1140851, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 1140851, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 1140851, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 16, 35651585],"float32"), size=list[32,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 214748365, 5],"float16"), size=list[9,10,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 35651585, 16],"float32"), size=list[32,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 35791395, 5, 6],"float16"), size=list[9,10,11,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 268435457],"float16"), size=list[9,10,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 44739243, 6],"float16"), size=list[9,10,11,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 4, 5, 53687092],"float16"), size=list[9,10,11,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 38028357, 10],"float32"), size=list[12,12,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 44739243],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 44739243, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 44739243, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 119304648],"float16"), size=list[12,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 119304648],"float16"), size=list[256,256,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 119304648],"float16"), size=tuple(12,13,), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 63380594],"float32"), size=list[12,12,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 71582789, 10],"float16"), size=list[12,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 71582789, 10],"float16"), size=list[256,256,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 71582789, 10],"float16"), size=tuple(12,13,), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 33554433, 4, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 2852127],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 2852127],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 2852127],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 10, 2852127],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 2852127, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 2852127, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 2852127, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 10, 2852127, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 2852127, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 2852127, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 2852127, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 33554433],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 44739243, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 44739243, 4, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 5368710, 10, 10, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 5368710, 10, 10, 4],"float16"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 64, 262145, 68],"float32"), size=list[68,68,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 64, 68, 262145],"float32"), size=list[68,68,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([20, 64, 1782580],"float32"), size=list[2001,], mode="linear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([2056, 2, 608, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([22369622, 3, 4, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([22369622, 4, 4, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(257,455,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(258,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(259,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(260,461,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(261,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(262,464,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(263,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(264,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(265,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(266,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(267,473,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(268,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(269,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(270,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(271,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(272,482,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(273,484,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(274,485,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(275,487,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(276,489,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(277,491,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(278,493,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(279,494,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(280,496,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(281,498,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(282,500,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(283,501,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(284,503,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(285,505,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(286,507,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(287,508,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(288,510,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(289,512,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(290,514,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(291,516,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(292,517,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(293,519,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(294,521,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(295,523,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(296,524,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(297,526,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(298,528,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(299,530,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(300,532,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(301,533,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(302,535,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(303,537,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(304,539,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(305,540,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(306,542,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(307,544,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(308,546,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(309,547,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(310,549,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(311,551,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(312,553,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(313,555,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(314,556,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(315,558,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(316,560,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(317,562,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(318,563,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(319,565,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(320,567,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([25957, 3, 182, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2602, 258, 50, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(257,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(258,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(259,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(260,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(261,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(262,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(263,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(264,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(265,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(266,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(267,400,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(268,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(269,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(270,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(271,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(272,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(273,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(274,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(275,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(276,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(277,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(278,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(279,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(280,420,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(281,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(282,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(283,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(284,426,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(285,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(286,429,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(287,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(288,432,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(289,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(290,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(291,436,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(292,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(293,439,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(294,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(295,442,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(296,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(297,445,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(298,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(299,448,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(300,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(301,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(302,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(303,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(304,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(305,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(306,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(307,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(308,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(309,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(310,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(311,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(312,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(313,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(314,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(315,472,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(316,474,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(317,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(318,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(319,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(320,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(257,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(258,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(259,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(260,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(261,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(262,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(263,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(264,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(265,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(266,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(267,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(268,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(269,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(270,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(271,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(272,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(273,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(274,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(275,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(276,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(277,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(278,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(279,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(280,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(281,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(282,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(283,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(284,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(285,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(286,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(287,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(288,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(289,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(290,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(291,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(292,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(293,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(294,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(295,428,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(296,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(297,431,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(298,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(299,434,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(300,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(301,437,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(302,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(303,440,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(304,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(305,443,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(306,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(307,446,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(308,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(309,449,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(310,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(311,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(312,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(313,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(314,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(315,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(316,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(317,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(318,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(320,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 1, 5941931, 128],"float32"), list[256,256,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(341,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(342,257,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(344,258,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(345,259,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(346,260,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(348,261,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(349,262,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(350,263,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(257,455,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(258,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(259,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(260,461,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(261,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(262,464,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(263,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(264,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(265,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(266,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(268,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(269,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(270,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(271,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(272,482,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(273,484,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(274,485,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(275,487,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(276,489,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(277,491,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(278,493,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(279,494,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(280,496,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(281,498,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(282,500,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(283,501,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(284,503,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(285,505,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(286,507,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(287,508,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(288,510,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(289,512,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(290,514,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(291,516,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(292,517,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(293,519,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(294,521,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(295,523,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(296,524,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(297,526,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(298,528,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(299,530,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(300,532,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(301,533,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(302,535,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(303,537,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(304,539,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(305,540,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(306,542,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(307,544,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(308,546,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(309,547,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(310,549,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(311,551,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(312,553,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(313,555,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(314,556,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(315,558,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(316,560,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(317,562,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(318,563,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(319,565,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(320,567,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(257,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(258,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(259,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(260,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(261,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(262,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(263,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(264,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(265,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(266,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(267,400,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(268,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(269,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(270,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(271,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(272,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(273,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(274,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(275,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(276,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(277,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(278,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(279,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(280,420,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(281,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(282,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(283,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(284,426,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(285,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(286,429,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(287,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(288,432,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(289,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(290,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(291,436,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(292,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(293,439,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(294,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(295,442,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(296,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(297,445,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(298,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(299,448,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(300,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(301,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(302,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(303,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(304,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(305,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(306,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(307,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(308,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(309,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(310,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(311,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(312,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(313,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(314,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(315,472,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(317,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(318,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(319,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(320,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(257,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(258,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(259,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(260,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(261,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(262,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(263,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(264,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(265,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(266,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(267,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(268,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(269,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(270,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(271,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(272,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(273,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(274,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(275,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(276,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(277,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(278,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(279,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(280,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(282,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(283,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(284,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(285,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(286,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(287,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(288,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(289,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(290,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(291,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(292,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(293,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(294,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(295,428,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(296,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(297,431,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(299,434,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(300,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(301,437,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(302,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(303,440,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(304,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(305,443,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(306,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(307,446,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(308,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(309,449,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(310,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(311,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(312,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(313,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(314,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(315,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(316,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(317,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(318,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(319,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(320,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(257,455,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(258,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(259,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(260,461,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(261,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(262,464,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(263,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(264,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(265,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(266,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(267,473,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(268,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(269,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(271,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(272,482,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(273,484,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(274,485,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(275,487,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(276,489,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(277,491,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(278,493,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(279,494,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(280,496,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(281,498,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(282,500,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(283,501,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(284,503,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(285,505,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(286,507,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(287,508,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(288,510,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(289,512,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(290,514,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(291,516,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(292,517,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(293,519,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(294,521,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(295,523,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(296,524,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(297,526,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(298,528,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(299,530,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(300,532,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(302,535,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(303,537,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(304,539,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(305,540,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(306,542,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(307,544,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(308,546,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(309,547,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(310,549,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(311,551,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(312,553,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(313,555,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(314,556,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(315,558,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(316,560,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(317,562,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(318,563,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(319,565,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 209408, 454],"float32"), size=tuple(320,567,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(257,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(258,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(259,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(260,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(261,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(262,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(263,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(264,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(265,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(266,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(267,400,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(268,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(269,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(270,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(271,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(272,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(273,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(274,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(275,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(276,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(277,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(278,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(279,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(280,420,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(281,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(282,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(283,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(284,426,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(285,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(286,429,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(287,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(288,432,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(289,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(290,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(291,436,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(292,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(293,439,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(294,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(295,442,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(296,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(297,445,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(298,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(299,448,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(300,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(301,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(302,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(303,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(304,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(305,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(306,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(307,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(308,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(309,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(310,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(311,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(312,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(314,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(315,472,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(316,474,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(317,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(318,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(319,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 247581, 384],"float32"), size=tuple(320,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(257,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(258,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(259,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(260,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(261,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(262,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(263,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(264,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(265,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(266,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(267,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(268,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(269,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(270,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(271,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(272,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(273,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(274,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(275,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(276,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(277,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(278,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(279,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(280,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(281,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(282,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(283,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(284,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(285,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(286,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(287,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(288,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(289,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(290,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(291,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(292,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(293,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(294,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(295,428,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(296,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(297,431,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(298,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(299,434,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(300,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(301,437,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(302,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(303,440,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(304,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(305,443,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(306,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(307,446,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(308,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(309,449,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(310,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(311,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(312,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(314,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(315,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(316,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(317,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(318,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(319,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 255567, 372],"float32"), size=tuple(320,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(257,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(257,341,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(257,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(257,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(257,455,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(258,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(258,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(258,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(258,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(259,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(259,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(259,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(259,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(259,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(260,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(260,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(260,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(260,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(260,461,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(261,320,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(261,346,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(261,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(261,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(261,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(262,321,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(262,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(262,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(262,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(262,464,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(263,322,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(263,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(263,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(263,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(263,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(264,323,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(264,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(264,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(264,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(264,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(265,325,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(265,351,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(265,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(265,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(265,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(266,326,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(266,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(266,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(266,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(266,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(267,327,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(267,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(267,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(267,473,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(268,328,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(268,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(268,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(268,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(268,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(269,329,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(269,357,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(269,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(269,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(269,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(270,331,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(270,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(270,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(270,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(270,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(271,332,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(271,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(271,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(271,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(271,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(272,333,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(272,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(272,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(272,482,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(273,334,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(273,362,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(273,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(273,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(273,484,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(274,336,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(274,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(274,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(274,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(274,485,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(275,337,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(275,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(275,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(275,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(275,487,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(276,338,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(276,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(276,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(276,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(276,489,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(277,339,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(277,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(277,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(277,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(277,491,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(278,340,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(278,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(278,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(278,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(278,493,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(279,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(279,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(279,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(279,494,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(280,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(280,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(280,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(280,420,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(280,496,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(281,344,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(281,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(281,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(281,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(281,498,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(282,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(282,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(282,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(282,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(282,500,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(283,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(283,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(283,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(283,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(283,501,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(284,348,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(284,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(284,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(284,426,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(284,503,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(285,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(285,378,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(285,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(285,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(285,505,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(286,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(286,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(286,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(286,429,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(286,507,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(287,352,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(287,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(287,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(287,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(287,508,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(288,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(288,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(288,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(288,432,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(288,510,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(289,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(289,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(289,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(289,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(289,512,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(290,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(290,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(290,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(290,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(290,514,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(291,356,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(291,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(291,436,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(291,516,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(292,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(292,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(292,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(292,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(292,517,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(293,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(293,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(293,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(293,439,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(293,519,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(294,360,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(294,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(294,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(294,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(294,521,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(295,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(295,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(295,428,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(295,442,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(295,523,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(296,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(296,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(296,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(296,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(296,524,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(297,364,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(297,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(297,431,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(297,445,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(297,526,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(298,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(298,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(298,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(298,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(298,528,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(299,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(299,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(299,434,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(299,448,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(299,530,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(300,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(300,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(300,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(300,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(300,532,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(301,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(301,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(301,437,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(301,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(301,533,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(302,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(302,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(302,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(302,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(302,535,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(303,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(303,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(303,440,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(303,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(303,537,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(304,372,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(304,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(304,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(304,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(304,539,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(305,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(305,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(305,443,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(305,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(305,540,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(306,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(306,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(306,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(306,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(307,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(307,407,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(307,446,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(307,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(307,544,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(308,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(308,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(308,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(308,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(308,546,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(309,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(309,410,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(309,449,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(309,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(309,547,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(310,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(310,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(310,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(310,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(310,549,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(311,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(311,413,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(311,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(311,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(311,551,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(312,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(312,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(312,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(312,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(312,553,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(313,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(313,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(313,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(313,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(313,555,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(314,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(314,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(314,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(314,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(314,556,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(315,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(315,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(315,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(315,472,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(315,558,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(316,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(316,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(316,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(316,474,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(316,560,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(317,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(317,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(317,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(317,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(317,562,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(318,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(318,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(318,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(318,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(318,563,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(319,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(319,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(319,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(319,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(319,565,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(320,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(320,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(320,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(320,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(320,567,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(341,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(342,257,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(344,258,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(345,259,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(346,260,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(348,261,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(349,262,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(350,263,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(352,264,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(353,265,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(354,266,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(356,267,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(357,268,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(358,269,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(360,270,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(361,271,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(362,272,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(364,273,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(365,274,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(366,275,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(368,276,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(369,277,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(370,278,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(372,279,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(373,280,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(374,281,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(376,282,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(377,283,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(378,284,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(380,285,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(381,286,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(382,287,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(384,288,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(385,289,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(386,290,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(388,291,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(390,293,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(392,294,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(393,295,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(394,296,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(396,297,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(397,298,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(398,299,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(400,300,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(401,301,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(402,302,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(404,303,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(405,304,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(406,305,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(408,306,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(409,307,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(410,308,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(412,309,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(413,310,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(414,311,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(416,312,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(417,313,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(418,314,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(420,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(421,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(422,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(424,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(425,319,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 256, 371371],"float32"), size=tuple(426,320,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(257,341,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(258,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(259,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(260,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(261,346,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(262,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(263,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(264,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(265,351,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(266,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(267,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(268,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(269,357,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(270,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(271,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(272,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(273,362,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(274,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(275,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(276,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(277,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(278,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(279,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(280,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(281,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(282,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(283,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(284,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(285,378,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(286,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(287,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(288,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(289,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(290,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(291,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(292,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(293,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(294,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(295,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(296,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(297,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(298,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(299,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(300,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(301,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(302,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(303,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(304,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(305,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(306,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(307,407,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(308,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(309,410,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(310,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(311,413,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(312,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(313,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(314,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(315,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(316,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(317,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(318,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(319,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 279621, 340],"float32"), size=tuple(320,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(257,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(258,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(259,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(260,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(261,320,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(262,321,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(263,322,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(264,323,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(265,325,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(266,326,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(267,327,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(268,328,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(270,331,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(271,332,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(272,333,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(273,334,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(274,336,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(275,337,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(276,338,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(277,339,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(278,340,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(279,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(280,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(281,344,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(282,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(284,348,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(285,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(286,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(287,352,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(288,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(289,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(290,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(291,356,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(292,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(293,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(294,360,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(295,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(296,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(297,364,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(298,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(299,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(300,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(301,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(302,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(303,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(304,372,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(305,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(307,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(308,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(309,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(310,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(311,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(312,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(313,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(314,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(315,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(316,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(317,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(318,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(319,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 302774, 314],"float32"), size=tuple(320,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(341,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(342,257,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(344,258,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(345,259,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(346,260,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(348,261,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(349,262,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(350,263,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(352,264,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(353,265,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(354,266,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(356,267,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(357,268,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(358,269,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(360,270,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(361,271,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(362,272,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(364,273,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(365,274,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(366,275,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(368,276,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(369,277,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(370,278,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(372,279,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(374,281,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(376,282,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(377,283,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(378,284,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(380,285,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(381,286,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(382,287,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(384,288,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(385,289,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(386,290,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(388,291,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(389,292,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(390,293,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(392,294,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(393,295,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(394,296,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(396,297,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(397,298,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(398,299,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(400,300,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(401,301,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(402,302,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(404,303,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(405,304,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(406,305,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(408,306,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(409,307,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(410,308,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(412,309,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(413,310,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(414,311,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(416,312,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(417,313,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(418,314,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(420,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(421,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(422,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(424,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(425,319,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8, 495161, 192],"float32"), size=tuple(426,320,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(257,341,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(258,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(259,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(260,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(261,346,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(262,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(263,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(264,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(265,351,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(266,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(268,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(269,357,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(270,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(271,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(272,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(273,362,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(274,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(275,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(277,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(278,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(279,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(280,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(281,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(282,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(283,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(284,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(285,378,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(286,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(287,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(288,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(289,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(290,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(291,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(292,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(294,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(295,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(296,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(297,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(298,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(299,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(300,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(301,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(302,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(303,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(304,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(305,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(306,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(307,407,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(308,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(309,410,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(310,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(311,413,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(312,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(313,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(314,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(315,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(316,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(317,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(318,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(319,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(320,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(257,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(258,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(259,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(260,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(262,321,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(263,322,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(264,323,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(265,325,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(266,326,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(267,327,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(268,328,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(269,329,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(270,331,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(271,332,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(272,333,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(273,334,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(274,336,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(275,337,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(276,338,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(277,339,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(278,340,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(279,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(280,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(281,344,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(282,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(283,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(284,348,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(285,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(286,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(287,352,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(288,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(289,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(290,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(291,356,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(292,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(293,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(294,360,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(295,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(296,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(297,364,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(298,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(299,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(300,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(301,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(302,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(303,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(304,372,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(305,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(306,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(307,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(308,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(309,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(310,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(311,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(312,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(313,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(314,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(315,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(316,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(317,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(318,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(319,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(320,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3249, 1, 686, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(257,341,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(258,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(259,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(260,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(261,346,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(262,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(263,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(264,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(265,351,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(266,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(267,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(268,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(269,357,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(270,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(271,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(272,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(273,362,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(274,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(275,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(276,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(277,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(278,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(279,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(280,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(281,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(282,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(283,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(284,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(285,378,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(286,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(287,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(288,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(289,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(290,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(291,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(292,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(293,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(294,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(295,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(297,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(298,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(299,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(300,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(301,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(302,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(303,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(304,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(305,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(306,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(307,407,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(308,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(309,410,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(310,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(311,413,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(312,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(313,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(314,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(315,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(316,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(317,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(318,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(319,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(320,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(257,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(258,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(259,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(260,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(261,320,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(263,322,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(264,323,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(265,325,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(266,326,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(267,327,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(268,328,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(269,329,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(270,331,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(271,332,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(272,333,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(273,334,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(274,336,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(275,337,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(276,338,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(277,339,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(278,340,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(279,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(280,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(281,344,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(282,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(283,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(284,348,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(285,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(286,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(287,352,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(288,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(289,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(290,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(291,356,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(292,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(293,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(294,360,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(295,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(296,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(297,364,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(298,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(299,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(300,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(301,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(302,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(303,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(304,372,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(305,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(306,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(307,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(308,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(309,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(310,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(311,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(312,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(313,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(314,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(315,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(316,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(317,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(318,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(319,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(320,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3856, 2, 544, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3869, 1, 768, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 128, 16, 524289],"float16"), size=tuple(32,32,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 128, 2097153, 4],"float16"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 128, 262145, 32],"float16"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 128, 262145, 32],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 128, 32, 262145],"float16"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 128, 32, 262145],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 128, 4, 2097153],"float16"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 128, 524289, 16],"float16"), size=tuple(32,32,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 19, 128, 441506],"float16"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([4, 19, 220753, 256],"float16"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 19, 220753, 256],"float16"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([4, 19, 220753, 256],"float16"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 19, 256, 220753],"float16"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 19, 256, 220753],"float16"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 192, 699051, 8],"float16"), size=tuple(16,16,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 192, 8, 699051],"float16"), size=tuple(16,16,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[25,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[25,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[25,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[25,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[25,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[25,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[26,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[26,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[26,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 13, 322639],"float16"), size=list[26,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 14, 299594],"float16"), size=list[27,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 14, 299594],"float16"), size=list[27,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 14, 299594],"float16"), size=list[27,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 14, 299594],"float16"), size=list[28,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 15, 279621],"float16"), size=list[29,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 15, 279621],"float16"), size=list[29,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 15, 279621],"float16"), size=list[30,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[31,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[31,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[31,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[32,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[32,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[32,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 262145],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[33,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[33,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[33,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[33,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[33,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,27,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 17, 246724],"float16"), size=list[34,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[35,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[35,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[35,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[35,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[35,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[35,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[36,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[36,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 18, 233017],"float16"), size=list[36,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[37,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[37,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[37,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[37,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,27,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,33,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 19, 220753],"float16"), size=list[38,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[25,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[25,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[26,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[26,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[31,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[32,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[33,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[34,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[34,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[35,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[35,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[36,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[37,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[37,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[38,41,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[38,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[39,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 199729, 21],"float16"), size=list[42,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 20, 209716],"float16"), size=list[39,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 20, 209716],"float16"), size=list[39,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 20, 209716],"float16"), size=list[39,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 20, 209716],"float16"), size=list[39,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 20, 209716],"float16"), size=list[40,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 20, 209716],"float16"), size=list[40,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[25,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[27,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[29,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[33,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[34,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[34,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[35,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[38,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[38,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[42,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 209716, 20],"float16"), size=list[42,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[41,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[41,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[41,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[41,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 21, 199729],"float16"), size=list[42,42,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[25,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[26,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[27,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[27,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[28,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[30,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[31,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[32,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[33,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[33,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[34,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[34,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[35,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[36,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[37,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[38,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[38,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[39,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[39,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[40,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[41,37,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[41,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 220753, 19],"float16"), size=list[42,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[25,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[25,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[33,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[34,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[35,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[38,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[38,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 233017, 18],"float16"), size=list[42,35,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[26,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[31,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[32,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[34,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[35,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[36,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[37,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[38,33,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[38,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[39,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[40,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[41,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 246724, 17],"float16"), size=list[42,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 262145, 16],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 299594, 14],"float16"), size=list[34,27,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 299594, 14],"float16"), size=list[38,27,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 322639, 13],"float16"), size=list[34,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 322639, 13],"float16"), size=list[41,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 322639, 13],"float16"), size=list[42,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([4, 256, 64, 65537],"float16"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 256, 65537, 64],"float16"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4213, 1, 736, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4604, 1, 704, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4965, 1, 576, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([4965, 1, 576, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([4965, 1, 576, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([4965, 1, 576, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([4965, 1, 576, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([5158, 1, 768, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([5158, 1, 768, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([5158, 1, 768, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([5158, 1, 768, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([5571, 1, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([56, 2, 318318, 64],"float32"), size=tuple(64,64,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([56, 2, 64, 318318],"float32"), size=tuple(64,64,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5603, 1, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([5603, 1, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([5603, 1, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([5603, 1, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([570426, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([570426, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([570426, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([570426, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(341,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(342,257,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(344,258,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(345,259,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(346,260,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(348,261,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(349,262,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(350,263,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([651, 258, 100, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([651, 258, 100, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([714819, 2, 19, 84],"float32"), size=list[17,82,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([7428, 1, 640, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([7428, 1, 640, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([7428, 1, 640, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([7761, 3, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([787, 4, 800, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([8, 3, 148549, 640],"float32"), size=tuple(640,640,), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([8, 3, 640, 148549],"float32"), size=tuple(640,640,), mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([8, 64, 104858, 80],"float16"), size=list[160,160,], )
paddle.nn.functional.interpolate(Tensor([8, 64, 20, 222823],"float32"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([8, 64, 20, 419431],"float16"), size=list[40,40,], )
paddle.nn.functional.interpolate(Tensor([8, 64, 209716, 40],"float16"), size=list[80,80,], )
paddle.nn.functional.interpolate(Tensor([8, 64, 222823, 20],"float32"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([8, 64, 40, 209716],"float16"), size=list[80,80,], )
paddle.nn.functional.interpolate(Tensor([8, 64, 419431, 20],"float16"), size=list[40,40,], )
paddle.nn.functional.interpolate(Tensor([8, 64, 80, 104858],"float16"), size=list[160,160,], )
paddle.nn.functional.interpolate(Tensor([9702, 3, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 285212673, 4],"float32"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 1, 3, 380283564],"float32"), size=list[6,6,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 63380594],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 63380594, 6],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.l1_loss(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.nn.functional.l1_loss(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([1, 3, 256, 256],"float32"), Tensor([11606, 3, 256, 256],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([1, 3, 256, 2970966],"float32"), Tensor([1, 3, 256, 2970966],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([1, 3, 2970966, 256],"float32"), Tensor([1, 3, 2970966, 256],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([1, 34817, 256, 256],"float32"), Tensor([1, 34817, 256, 256],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([1, 4],"float32"), Tensor([570425345, 4],"float32"), )
paddle.nn.functional.l1_loss(Tensor([1, 4],"float32"), Tensor([570425345, 4],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([10, 10, 22817014],"float32"), Tensor([10, 10, 22817014],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 10, 22817014],"float32"), Tensor([10, 10, 22817014],"float32"), "none", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 10, 22817014],"float32"), Tensor([10, 10, 22817014],"float32"), "sum", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 10, 22817014],"float32"), Tensor([10, 10, 22817014],"float32"), )
paddle.nn.functional.l1_loss(Tensor([10, 10, 22817014],"float32"), Tensor([10, 10, 22817014],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([10, 10, 22817014],"float32"), Tensor([10, 10, 22817014],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([10, 114085069, 2],"float32"), Tensor([10, 114085069, 2],"float32"), "sum", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
paddle.nn.functional.l1_loss(Tensor([10, 45634028, 5],"float32"), Tensor([10, 45634028, 5],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 45634028, 5],"float32"), Tensor([10, 45634028, 5],"float32"), "none", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 45634028, 5],"float32"), Tensor([10, 45634028, 5],"float32"), "sum", name=None, )
paddle.nn.functional.l1_loss(Tensor([10, 45634028, 5],"float32"), Tensor([10, 45634028, 5],"float32"), )
paddle.nn.functional.l1_loss(Tensor([10, 45634028, 5],"float32"), Tensor([10, 45634028, 5],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([10, 45634028, 5],"float32"), Tensor([10, 45634028, 5],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([10, 499, 457255],"float32"), Tensor([10, 499, 457255],"float32"), "sum", name=None, )
paddle.nn.functional.l1_loss(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), )
paddle.nn.functional.l1_loss(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([101, 22591103],"float32"), Tensor([101, 22591103],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([1118482, 12, 170, 1],"float32"), Tensor([1118482, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([11606, 3, 256, 256],"float32"), Tensor([1, 3, 256, 256],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([11606, 3, 256, 256],"float32"), Tensor([11606, 3, 256, 256],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([16, 107, 1332770],"float32"), Tensor([16, 107, 1332770],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 139129, 1025],"float32"), Tensor([16, 139129, 1025],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 213, 669514],"float32"), Tensor([16, 213, 669514],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 277986, 513],"float32"), Tensor([16, 277986, 513],"float32"), )
paddle.nn.functional.l1_loss(Tensor([187679, 12158],"float32"), Tensor([187679, 12158],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([187679, 1],"float32"), Tensor([187679, 12158],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([2, 1114113, 32, 32],"float32"), Tensor([2, 1114113, 32, 32],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2, 2147483649],"float16"), label=Tensor([2, 2147483649],"float16"), reduction="mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2, 3, 11883862, 32],"float32"), Tensor([2, 3, 11883862, 32],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2, 3, 32, 11883862],"float32"), Tensor([2, 3, 32, 11883862],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([20, 500, 228171],"float32"), Tensor([20, 500, 228171],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20805, 107, 1025],"float32"), Tensor([20805, 107, 1025],"float32"), )
paddle.nn.functional.l1_loss(Tensor([20882, 213, 513],"float32"), Tensor([20882, 213, 513],"float32"), )
paddle.nn.functional.l1_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2147483649, 2],"float16"), label=Tensor([2147483649, 2],"float16"), reduction="mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([2281702, 500, 2],"float32"), Tensor([2281702, 500, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 170, 1],"float32"), Tensor([28, 12, 170, 39946],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 170, 39946],"float32"), Tensor([28, 12, 170, 39946],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 12, 6790778, 1],"float32"), Tensor([28, 12, 6790778, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([28, 479350, 170, 1],"float32"), Tensor([28, 479350, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3, 760567127],"float32"), Tensor([3, 760567127],"float32"), reduction="mean", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 316],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 316],"float32"), Tensor([3548, 12, 170, 316],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 53592, 1],"float32"), Tensor([3548, 12, 53592, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 3783, 170, 1],"float32"), Tensor([3548, 3783, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([4, 500, 1140851],"float32"), Tensor([4, 500, 1140851],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([4, 57042535, 10],"float32"), Tensor([4, 57042535, 10],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([4, 71303169, 8],"float32"), Tensor([4, 71303169, 8],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([456340276, 5],"float32"), Tensor([456340276, 5],"float32"), reduction="mean", )
paddle.nn.functional.l1_loss(Tensor([45634028, 10, 5],"float32"), Tensor([45634028, 10, 5],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([45634028, 10, 5],"float32"), Tensor([45634028, 10, 5],"float32"), "none", name=None, )
paddle.nn.functional.l1_loss(Tensor([45634028, 10, 5],"float32"), Tensor([45634028, 10, 5],"float32"), "sum", name=None, )
paddle.nn.functional.l1_loss(Tensor([45634028, 10, 5],"float32"), Tensor([45634028, 10, 5],"float32"), )
paddle.nn.functional.l1_loss(Tensor([45634028, 10, 5],"float32"), Tensor([45634028, 10, 5],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([45634028, 10, 5],"float32"), Tensor([45634028, 10, 5],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([456341, 500, 10],"float32"), Tensor([456341, 500, 10],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([46422, 3, 128, 128],"float32"), Tensor([46422, 3, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([570425345, 4],"float32"), Tensor([1, 4],"float32"), )
paddle.nn.functional.l1_loss(Tensor([570425345, 4],"float32"), Tensor([570425345, 4],"float32"), )
paddle.nn.functional.l1_loss(Tensor([570425345, 4],"float32"), Tensor([570425345, 4],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([570426, 500, 8],"float32"), Tensor([570426, 500, 8],"float32"), reduction="none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 170, 17477],"float32"), Tensor([64, 12, 170, 17477],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 170, 1],"float32"), Tensor([64, 12, 170, 17477],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 12, 2970966, 1],"float32"), Tensor([64, 12, 2970966, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 209716, 170, 1],"float32"), Tensor([64, 209716, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 2177, 128, 128],"float32"), Tensor([64, 2177, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([64, 3, 128, 92843],"float32"), Tensor([64, 3, 128, 92843],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([64, 3, 92843, 128],"float32"), Tensor([64, 3, 92843, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([742742, 3, 32, 32],"float32"), Tensor([742742, 3, 32, 32],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([8, 1, 512, 512],"float16"), Tensor([8, 1089, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 2049, 512, 512],"float16"), Tensor([8, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.label_smooth(Tensor([1431655766, 3],"float16"), epsilon=0.5986189939413826, )
paddle.nn.functional.label_smooth(Tensor([1431655766, 3],"float16"), epsilon=0.8211263365048883, )
paddle.nn.functional.label_smooth(Tensor([214748365, 2, 2, 5],"float16"), epsilon=0.18833946207874966, )
paddle.nn.functional.label_smooth(Tensor([214748365, 2, 2, 5],"float16"), epsilon=0.7642113030841614, )
paddle.nn.functional.label_smooth(Tensor([3, 143165577, 2, 5],"float16"), epsilon=0.18833946207874966, )
paddle.nn.functional.label_smooth(Tensor([3, 143165577, 2, 5],"float16"), epsilon=0.7642113030841614, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 143165577, 5],"float16"), epsilon=0.18833946207874966, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 143165577, 5],"float16"), epsilon=0.7642113030841614, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 2, 357913942],"float16"), epsilon=0.18833946207874966, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 2, 357913942],"float16"), epsilon=0.7642113030841614, )
paddle.nn.functional.label_smooth(Tensor([4, 1073741825],"float16"), epsilon=0.5986189939413826, )
paddle.nn.functional.label_smooth(Tensor([4, 1073741825],"float16"), epsilon=0.8211263365048883, )
paddle.nn.functional.layer_norm(Tensor([10129, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([10662, 209, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([10817, 206, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([11980, 186, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([13505, 165, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([14, 424424, 384],"float32"), 384, weight=Tensor([384],"float32"), bias=Tensor([384],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([14260634, 10, 4, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([19066, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20069, 209, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20361, 206, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([22551, 186, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([25421, 165, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([28431, 209, 384],"float32"), 384, weight=Tensor([384],"float32"), bias=Tensor([384],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 14260634, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([4, 35651585, 4, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([5123, 435, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([570425345, 4],"float32"), list[4,], None, None, )
paddle.nn.functional.layer_norm(Tensor([69633, 128, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7, 318318, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7, 599187, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7791, 286, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 1114113, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([715827883, 2, 3],"float16"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([715827883, 2, 3],"float16"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([1431655766, 3],"float16"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([1431655766, 3],"float16"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([760567127, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([760567127, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.linear(Tensor([2, 64, 5592406],"float16"), Tensor([5592406, 768],"float16"), Tensor([768],"float16"), )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 1369569],"float16"), weight=Tensor([1369569, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([10],"float32"), weight=Tensor([10, 429496730],"float32"), bias=Tensor([10],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([10],"float32"), weight=Tensor([10, 429496730],"float32"), bias=Tensor([1],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([10],"float32"), weight=Tensor([10, 429496730],"float32"), bias=Tensor([3],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 1, 1, 7, 7, 684785],"float16"), weight=Tensor([684785, 1536],"float16"), bias=Tensor([1536],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 14, 14, 171197],"float16"), weight=Tensor([171197, 384],"float16"), bias=Tensor([384],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([128],"float32"), weight=Tensor([128, 33554432],"float32"), bias=Tensor([100],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([14336],"float32"), weight=Tensor([14336, 159159],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([14336],"float32"), weight=Tensor([14336, 299594],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([16, 197, 1362617],"float16"), weight=Tensor([1362617, 2304],"float16"), bias=Tensor([2304],"float16"), )
paddle.nn.functional.linear(x=Tensor([4097, 1048576],"float16"), weight=Tensor([1048576, 1],"float16"), bias=Tensor([1],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([4097, 1048576],"float16"), weight=Tensor([1048576, 4097],"float16"), bias=Tensor([4097],"float16"), name=None, )
paddle.nn.functional.linear(x=Tensor([64],"float32"), weight=Tensor([64, 67108864],"float32"), bias=None, name=None, )
paddle.nn.functional.local_response_norm(Tensor([3, 40, 40, 894785],"float32"), 5, 0.0001, 0.75, 1.0, "NHWC", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 894785, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(x=Tensor([2684355, 40, 40],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([2684355, 40, 40],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 298262, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 298262],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 35791395, 40],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 35791395, 40],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 35791395],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 35791395],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40, 894785],"float32"), size=5, data_format="NHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 894785, 40, 40],"float32"), size=5, data_format="NCHW", )
paddle.nn.functional.log_loss(Tensor([2281701600, 1],"float32"), label=Tensor([2281701600, 1],"float32"), epsilon=0.0001, name=None, )
paddle.nn.functional.log_loss(Tensor([2147483648, 1],"float32"), label=Tensor([2147483648, 1],"float32"), epsilon=0.0001, name=None, )
paddle.nn.functional.log_loss(Tensor([2415919552, 1],"float32"), Tensor([2415919552, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([2550137504, 1],"float32"), Tensor([2550137504, 1],"float32"), )
paddle.nn.functional.log_loss(Tensor([2684355456, 1],"float32"), Tensor([2684355456, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([3221225472, 1],"float32"), Tensor([3221225472, 1],"float32"), )
paddle.nn.functional.log_softmax(Tensor([1, 300, 14316558],"float32"), )
paddle.nn.functional.log_softmax(Tensor([1, 4294967295],"float16"), )
paddle.nn.functional.log_softmax(Tensor([1, 4294967297],"float16"), )
paddle.nn.functional.log_softmax(Tensor([100000, 7606, 3],"float32"), )
paddle.nn.functional.log_softmax(Tensor([1024, 4194304],"float16"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([1024, 4194304],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([1140850690, 2],"float32"), )
paddle.nn.functional.log_softmax(Tensor([1140850690, 2],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([12, 357913942],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([124, 34636834],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([128, 33554432],"float16"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([128, 33554432],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([14350324, 159],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([178956971, 3, 2, 4],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([178956971, 3, 4],"float64"), 0, )
paddle.nn.functional.log_softmax(Tensor([178956971, 3, 4],"float64"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 107374183, 4, 5],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 107374183, 4, 5],"float32"), 1, None, )
paddle.nn.functional.log_softmax(Tensor([2, 268435457, 4],"float64"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 143165577, 5],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 143165577, 5],"float32"), 1, None, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 357913942],"float64"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 178956971],"float32"), -1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 178956971],"float32"), -1, None, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 178956971],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 178956971],"float32"), 1, None, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 76056713, 5],"float32"), -1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 76056713, 5],"float32"), -1, None, )
paddle.nn.functional.log_softmax(Tensor([2, 536870913, 4],"float16"), -1, )
paddle.nn.functional.log_softmax(Tensor([2, 536870913, 4],"float16"), 2, )
paddle.nn.functional.log_softmax(Tensor([2, 57042535, 4, 5],"float32"), -1, )
paddle.nn.functional.log_softmax(Tensor([2, 57042535, 4, 5],"float32"), -1, None, )
paddle.nn.functional.log_softmax(Tensor([20, 214748365],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([2112, 2033602],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([22369622, 102],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([28, 153391690],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([285212673, 8],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([2944, 1458889],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([357913942, 3, 4],"float16"), -1, )
paddle.nn.functional.log_softmax(Tensor([357913942, 3, 4],"float16"), 2, )
paddle.nn.functional.log_softmax(Tensor([380283564, 2, 3],"float32"), )
paddle.nn.functional.log_softmax(Tensor([380283564, 6],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([38028357, 3, 4, 5],"float32"), -1, )
paddle.nn.functional.log_softmax(Tensor([38028357, 3, 4, 5],"float32"), -1, None, )
paddle.nn.functional.log_softmax(Tensor([456340276, 5],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([5, 107374183, 2, 4],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([5, 3, 2, 143165577],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([5, 3, 71582789, 4],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([5, 858993459],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([5, 858993459],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.log_softmax(Tensor([570425345, 4],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([570425345, 4],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([71582789, 3, 4, 5],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([71582789, 3, 4, 5],"float32"), 1, None, )
paddle.nn.functional.log_softmax(Tensor([760567127, 3],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([760567127, 3],"float32"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([178956971, 3, 4],"float64"), axis=0, )
paddle.nn.functional.log_softmax(x=Tensor([178956971, 3, 4],"float64"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([178956971, 3, 4],"float64"), axis=2, dtype="float32", )
paddle.nn.functional.log_softmax(x=Tensor([178956971, 3, 4],"float64"), axis=2, dtype=type(numpy.float32), )
paddle.nn.functional.log_softmax(x=Tensor([2, 268435457, 4],"float64"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 268435457, 4],"float64"), axis=2, dtype="float32", )
paddle.nn.functional.log_softmax(x=Tensor([2, 268435457, 4],"float64"), axis=2, dtype=type(numpy.float32), )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 357913942],"float64"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 536870913, 4],"float16"), )
paddle.nn.functional.log_softmax(x=Tensor([2, 536870913, 4],"float16"), axis=-1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 536870913, 4],"float16"), axis=2, )
paddle.nn.functional.log_softmax(x=Tensor([2, 536870913, 4],"float16"), axis=2, dtype="float32", )
paddle.nn.functional.log_softmax(x=Tensor([2, 536870913, 4],"float16"), axis=2, dtype=type(numpy.float32), )
paddle.nn.functional.log_softmax(x=Tensor([357913942, 3, 4],"float16"), )
paddle.nn.functional.log_softmax(x=Tensor([357913942, 3, 4],"float16"), axis=-1, )
paddle.nn.functional.log_softmax(x=Tensor([357913942, 3, 4],"float16"), axis=2, )
paddle.nn.functional.log_softmax(x=Tensor([357913942, 3, 4],"float16"), axis=2, dtype="float32", )
paddle.nn.functional.log_softmax(x=Tensor([357913942, 3, 4],"float16"), axis=2, dtype=type(numpy.float32), )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 380283564],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 380283564],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 35651585],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 35651585],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 67108864],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 67108864],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 33554433, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 33554433, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 35651585, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 35651585, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 380283564, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 380283564, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108865, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108865, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 715827883, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 715827883, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([22369622, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([22369622, 3, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 32, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 32, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 1048577, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 1048577, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 22369622, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 22369622, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 11883862, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 11883862, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 11883862],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 11883862],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 22369622, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 22369622, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 2097152],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 2097152],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([699051, 3, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([699051, 3, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([1073741825, 4],"float16"), label=Tensor([1073741825],"int64"), margin1=0.8, margin2=0.0, margin3=0.15, scale=40.0, group=None, return_softmax=False, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([1073741825, 4],"float16"), label=Tensor([1073741825],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([1073741825, 4],"float16"), label=Tensor([1073741825],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([116080198, 37],"float16"), Tensor([116080198],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([116080198, 37],"float16"), Tensor([116080198],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="sum", )
paddle.nn.functional.margin_cross_entropy(Tensor([116080198, 37],"float16"), Tensor([116080198],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([116080198, 37],"float16"), Tensor([116080198],"int64"), return_softmax=False, margin1=1.0, margin2=0.0, margin3=0.35, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([116080198, 37],"float16"), Tensor([116080198],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([116080198, 37],"float16"), Tensor([116080198],"int64"), return_softmax=False, margin1=1.35, margin2=0.0, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 456340276],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="sum", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.0, margin3=0.35, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.35, margin2=0.0, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([61667605, 37],"float32"), Tensor([61667605],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2147483649],"float16"), other=Tensor([2, 2147483649],"float16"), label=Tensor([2, 2147483649],"float16"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2147483649, 2],"float16"), other=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649, 2],"float16"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "sum", None, )
paddle.nn.functional.max_pool1d(Tensor([1, 1, 2147483649],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 1073741825, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 134217729, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 134217729, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 142606337, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 1431655765],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 715827883],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 715827883],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 380283564, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 715827883, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1073741825, 1, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([126761188, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([178956971, 3, 8],"float32"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([19173962, 32, 7],"float32"), 7, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 1, 1, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, 0, False, True, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, list[1,1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, list[1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 2, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 2, list[1,], 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), 3, 4, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 134217729, 8],"float64"), list[3,], 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 268435456, 8],"float32"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 1, 1, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, 0, False, True, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, list[1,1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, list[1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 2, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 2, list[1,], 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), 3, 4, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 357913942],"float64"), list[3,], 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 715827883],"float32"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 715827883],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 35651585, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 67108864, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 67108864, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 67108864, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([23767723, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([238609295, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([47535446, 3, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 1, 1, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, 0, False, True, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, list[1,1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, list[1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 2, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 2, list[1,], 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), 3, 4, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([89478486, 3, 8],"float64"), list[3,], 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([91, 32, 1474921],"float32"), 7, )
paddle.nn.functional.max_pool1d(Tensor([91, 6742492, 7],"float32"), 7, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1, 2147483649],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1073741825, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([1073741825, 1, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([178956971, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=list[1,1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=list[1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=2, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=list[1,], padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=list[3,], stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 268435456, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=list[1,1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=list[1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=2, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=list[1,], padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=list[3,], stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=list[1,1,], )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=list[1,], )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=2, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=list[1,], padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=list[3,], stride=1, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 1073741824, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 1073741824, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 1073741824],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 1073741824],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 570425345],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 570425345],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 456340276, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 570425345, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 570425345, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 858993459, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 10737419, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 10737419, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 10737419, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 10737419, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 114085069, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 119304648, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 40, 838861],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 838861, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 142606337, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 142606337, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 10, 26843546],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 12, 22369622],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 22369622, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 26843546, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 1118482, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 1118482, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 1118482, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 20, 1118482],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 20, 1118482],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 192, 20, 1118482],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 67108864],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 67108864, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 220, 976129],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 976129, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 214748365, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 2228225, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 368, 486297],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 384, 466034],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 40, 4473925],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 4473925, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 466034, 384],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 486297, 368],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 25363, 336, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 838861],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 838861],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 21, 798916],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 508401, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 524288, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 541201, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 559241, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 621379, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 838861, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 262144, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 268435456, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 268435456, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 2684355, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2684355, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 27061, 320, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 27963, 320, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 29128, 384, 384],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2974355, 38, 38],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2974355, 38, 38],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2974355, 38, 38],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 29826162, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 224, 6391321],"float32"), kernel_size=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 224, 6391321],"float32"), kernel_size=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 224, 6391321],"float32"), kernel_size=3, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 238609295, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 238609295],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6391321, 224],"float32"), kernel_size=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6391321, 224],"float32"), kernel_size=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6391321, 224],"float32"), kernel_size=3, )
paddle.nn.functional.max_pool2d(Tensor([1, 31069, 320, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 31715, 368, 368],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 32, 364723, 368],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 32, 368, 364723],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3314018, 36, 36],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3314018, 36, 36],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3314018, 36, 36],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 342393, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3715370, 34, 34],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3715370, 34, 34],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 3715370, 34, 34],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 37377, 288, 399],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 294338, 38],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 294338, 38],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 294338, 38],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 310690, 36],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 310690, 36],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 310690, 36],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 32, 349526],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 32, 349526],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 32, 349526],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 328966, 34],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 328966, 34],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 328966, 34],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 34, 328966],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 34, 328966],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 34, 328966],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 349526, 32],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 349526, 32],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 349526, 32],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 36, 310690],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 36, 310690],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 36, 310690],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 38, 294338],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 38, 294338],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 384, 38, 294338],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 4194304, 32, 32],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 4194304, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 4194304, 32, 32],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 4194304, 32, 32],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 41944, 320, 320],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 42949673, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 48, 279621, 320],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 48, 288, 310690],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 48, 310690, 288],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 48, 320, 279621],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 51782, 288, 288],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6197645, 21, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 63380594, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 6391321, 21, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 112, 599187],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 128, 524288],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 133153, 504],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 135301, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 139811, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 155345, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 168193, 399],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 17, 3947581],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 199137, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 232211, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 245821, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 248, 270601],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 256, 262144],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 261124, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 262144, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 262144, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 288, 233017],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 320, 209716],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 336, 199729],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 49, 1369569],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 520224, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 524288, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 599187, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 65536, 256, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 67651, 248, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 679476, 49, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 6927367, 20, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 7158279, 20, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 749689, 17, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 7953644, 20, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 85599, 224, 224],"float32"), kernel_size=1, )
paddle.nn.functional.max_pool2d(Tensor([1, 85599, 224, 224],"float32"), kernel_size=2, )
paddle.nn.functional.max_pool2d(Tensor([1, 85599, 224, 224],"float32"), kernel_size=3, )
paddle.nn.functional.max_pool2d(Tensor([1, 874205, 17, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 88739, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 925441, 17, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1, 983055, 17, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1024, 64, 256, 256],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1058, 64, 248, 256],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10617, 64, 49, 129],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1073741824, 1, 4, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([1079, 48, 288, 288],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10923, 384, 32, 32],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10923, 384, 32, 32],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10923, 384, 32, 32],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([11093, 128, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1114113, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([111849, 24, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([114085069, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([11714, 64, 17, 337],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([12, 128, 40, 69906],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 128, 40, 69906],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 128, 69906, 40],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 128, 69906, 40],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 223697, 40, 40],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 223697, 40, 40],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 256, 20, 69906],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 256, 20, 69906],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 256, 69906, 20],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 256, 69906, 20],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 3579140, 10, 10],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 10, 69906],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 512, 69906, 10],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 894785, 20, 20],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([12, 894785, 20, 20],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([1214, 24, 384, 384],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([13, 1, 330382100, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([13, 1, 4, 82595525],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([13, 1, 7, 47197443],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([13, 256, 184366, 7],"float32"), kernel_size=1, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([13, 256, 7, 184366],"float32"), kernel_size=1, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([13, 47197443, 7, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([13, 6742492, 7, 7],"float32"), kernel_size=1, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([13, 82595525, 4, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([1314652, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1322, 24, 368, 368],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([13660, 64, 17, 289],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([142606337, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([142606337, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([14461, 64, 17, 273],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([15361, 64, 17, 257],"float32"), tuple(3,3,), tuple(2,2,), tuple(0,0,), False, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 222823, 40],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 40, 222823],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 32, 20, 222823],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 32, 222823, 20],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1748, 24, 320, 320],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1864136, 16, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1047614, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,0,0,], return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1114113, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 12707004, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 12707004, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 305041, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 55, 305041],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 203361, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 215093, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 414253],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 414253],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 414253, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 414253, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 52, 215093],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 55, 203361],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1971978, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 16, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 22369622, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 244, 36071],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 4400582, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 13, 645278],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 310690],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 310690, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 645278, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 2945794, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 2945794, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,0,0,], return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 21691755, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 224, 3195661],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 3195661, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,0,0,], return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,2,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 21691755],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 22369622, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 32, 2097152],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 33554432, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 6710887],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 6710887],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 6710887],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 6710887],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 6710887, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 6710887, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 6710887, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 6710887, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 42800, 224, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 4400582, 244, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 13, 344149],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 344149, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 13, 322639],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 322639, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 13, 312862],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 312862, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 17, 1973791],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 1973791, 17],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 671089, 40, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 671089, 40, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 671089, 40, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 671089, 40, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 709912, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 7430740, 17, 17],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 794188, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 16, 16777216],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 16777216, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 4, 67108864],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 4194304, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 8, 33554432],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 8388608, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8388608, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([207127, 64, 18, 18],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2097152, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2097152, 8, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([209716, 512, 1, 40],"float16"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([209716, 512, 1, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([20972, 128, 40, 40],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([20972, 128, 40, 40],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([20972, 128, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([21126865, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([214748365, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([23015, 256, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([232211, 64, 17, 17],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([24210, 256, 21, 33],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([24967, 256, 21, 32],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([256, 112, 112, 1338],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 112, 2341, 64],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool2d(Tensor([256, 2341, 112, 64],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool2d(Tensor([268435456, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([268435456, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2684355, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([27061, 256, 20, 31],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([27963, 256, 20, 30],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([28533, 3, 224, 224],"float32"), kernel_size=1, )
paddle.nn.functional.max_pool2d(Tensor([28533, 3, 224, 224],"float32"), kernel_size=2, )
paddle.nn.functional.max_pool2d(Tensor([28533, 3, 224, 224],"float32"), kernel_size=3, )
paddle.nn.functional.max_pool2d(Tensor([28533, 3, 224, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([3, 4418691, 18, 18],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 1242757, 18],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 18, 1242757],"float32"), kernel_size=tuple(3,3,), stride=tuple(2,2,), padding=tuple(0,0,), return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([30686, 192, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([30686, 192, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([31069, 256, 20, 27],"float32"), 1, stride=2, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([342393, 256, 7, 7],"float32"), kernel_size=1, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([36071, 244, 244, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([377266, 32, 21, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([39768216, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([4, 10486, 320, 320],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 24, 139811, 320],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 24, 320, 139811],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 4, 67108864],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 67108864, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 67108864, 4, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4096, 64, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([41944, 256, 20, 20],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([41944, 256, 20, 20],"float32"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([41944, 256, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([423, 64, 320, 496],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([42519, 16, 86, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([437, 64, 320, 480],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([4437, 20, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([48133, 528, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([486, 64, 320, 432],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([49637, 512, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([524288, 8, 16, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([52946, 480, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([5350, 112, 112, 64],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool2d(Tensor([5350, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([55925, 192, 20, 20],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([55925, 192, 20, 20],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([55925, 192, 20, 20],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([613566757, 1, 7, 1],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 10630, 86, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 57134, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 86, 25910],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 1677722, 1, 40],"float16"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 1677722, 1, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 188633, 21, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 123791, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 21, 53053],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 43, 25910],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 58638, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 43638, 43, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 1, 131072],"float16"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 1, 131072],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 3277, 40],"float16"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 3277, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([67108864, 4, 4, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([698409, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,0,0,], return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([7395, 192, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([742742, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([7746, 384, 38, 38],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([7746, 384, 38, 38],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([7746, 384, 38, 38],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 13421773, 1, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 1, 1048576],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([8, 512, 26215, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([8273, 192, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8388608, 8, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([83887, 512, 10, 10],"float16"), 3, stride=1, padding=1, data_format="NCHW", )
paddle.nn.functional.max_pool2d(Tensor([8631, 384, 36, 36],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8631, 384, 36, 36],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8631, 384, 36, 36],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([87275, 32, 43, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([874, 48, 320, 320],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([9676, 384, 34, 34],"float32"), kernel_size=13, stride=1, padding=6, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([9676, 384, 34, 34],"float32"), kernel_size=5, stride=1, padding=2, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([9676, 384, 34, 34],"float32"), kernel_size=9, stride=1, padding=4, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([992, 32, 368, 368],"float32"), kernel_size=2, stride=1, padding="SAME", return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([99274, 256, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(x=Tensor([1398102, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([16777216, 4, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 24, 44739243],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 44739243, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2097152, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 22369622, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 22369622],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 33554432, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3728271, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 67108864, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 8, 67108864],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([3728271, 2, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool3d(Tensor([1, 15845149, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 1971978, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 10845878, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 10845878],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 22369622, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 22369622, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 23767723, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 26512144, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 29826162, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 29826162, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 29826162, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 29826162, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 29826162, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 44739243],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 44739243],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 89478486],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 89478486],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 89478486],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 59652324, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 59652324, 4, 6],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 59652324, 4, 6],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 59652324, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 349205, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 67108864],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 67108864],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 67108864, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 67108864, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 67108864, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 67108864, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 44739243, 4, 4, 6],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 44739243, 4, 4, 6],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 44739243, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 35791395, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 25352238, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 47721859, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 17895698],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 9507090],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 39768216, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 26512144, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 13256072],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 657326, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 67108864, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 67108864, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([11184811, 3, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([13256072, 3, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1398102, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([14913081, 3, 4, 4, 6],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([14913081, 3, 4, 4, 6],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([14913081, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([16777216, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([16777216, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([174603, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 11362348, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 16777217, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 19884108, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 11184811, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 22369622, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 39768216, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 22369622, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 4, 22369622],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 39768216, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 19884108],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 11184811, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 11184811],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 32, 65536],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 699051, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 699051, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 4194304, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 5592406, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 13256072, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 17043522, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 9, 5681174],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 699051, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 5592406, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 8, 5592406, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 8, 8, 2097153],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2796203, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([328663, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([3787450, 6, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([43691, 32, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([4418691, 6, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([5965233, 5, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([7456541, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([7456541, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([7922575, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([8, 2675, 16, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 16, 112, 4682],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 16, 4682, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 669, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(x=Tensor([1070, 320, 4, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([1338, 32, 32, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([1338, 64, 4, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([1338, 8, 32, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([1398102, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 11184811, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 5592406, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 4194304, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 5592406, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 5592406, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 8, 5592406, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 8, 8, 2097153],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([8, 10700, 4, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 1338, 32, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 32, 56, 9363],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 32, 9363, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 5350, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 4, 56, 7490],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 4, 7490, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 535, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 42800, 4, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 5350, 32, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 4, 112, 18725],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 4, 18725, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 669, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 32, 112, 18725],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 32, 18725, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 5350, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.maxout(Tensor([10, 9, 15907287, 3],"float16"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([10, 9, 3, 15907287],"float16"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([10, 9, 3, 7953644],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([10, 9, 7953644, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 2535224, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 1789570, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 1901418, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 1789570],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 1901418],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 3579140],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 3579140],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3579140, 3],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3579140, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4772186, 3, 3],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4772186, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([119304648, 4, 3, 3],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([119304648, 4, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([178956971, 2, 2, 6],"float16"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([17895698, 6, 5, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([17895698, 6, 5, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([17895698, 6, 5, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 107374183, 5, 4],"float16"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 53687092, 5, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 53687092, 5, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 53687092, 5, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 44739243, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 6, 44739243, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 44739243, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 35791395],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 35791395],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 71582789],"float16"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 71582789],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 89478486, 4],"float16"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 6, 89478486, 4],"float16"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 89478486, 4],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([26512144, 9, 3, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([35791395, 6, 5, 4],"float16"), 2, -1, )
paddle.nn.functional.maxout(Tensor([35791395, 6, 5, 4],"float16"), 2, 1, )
paddle.nn.functional.maxout(Tensor([35791395, 6, 5, 4],"float16"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([53024288, 9, 3, 3],"float16"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([59652324, 4, 3, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([63380594, 4, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([89478486, 2, 2, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 19884108, 2, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 19884108, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 2, 119304648],"float16"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 2, 59652324],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 39768216, 6],"float16"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 39768216, 2, 6],"float16"), 2, 3, None, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 15907287, 3],"float16"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 3, 15907287],"float16"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 3, 7953644],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 7953644, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([100, 2535224, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 1789570, 3],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 1901418, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 1789570],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 1901418],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 3579140],"float16"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 3579140],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3579140, 3],"float16"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3579140, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4772186, 3, 3],"float16"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4772186, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([119304648, 4, 3, 3],"float16"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([119304648, 4, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([178956971, 2, 2, 6],"float16"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([26512144, 9, 3, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([53024288, 9, 3, 3],"float16"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([59652324, 4, 3, 3],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([63380594, 4, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([89478486, 2, 2, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 19884108, 2, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 19884108, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 2, 119304648],"float16"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 2, 59652324],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 39768216, 6],"float16"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 39768216, 2, 6],"float16"), groups=2, axis=3, )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([1, 2281701379],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([2281701379, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([4, 570425345],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([100, 22817014, 1],"float32"), Tensor([100, 22817014, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([100, 376, 1],"float32"), Tensor([100, 376, 60684],"float32"), )
paddle.nn.functional.mse_loss(Tensor([100, 376, 60684],"float32"), Tensor([100, 376, 60684],"float32"), )
paddle.nn.functional.mse_loss(Tensor([10000, 1],"float32"), Tensor([10000, 228171],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([10000, 228171],"float32"), Tensor([10000, 228171],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([101, 1],"float32"), Tensor([101, 22591103],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([101, 22591103],"float32"), Tensor([101, 22591103],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([11661, 195670],"float32"), Tensor([11661, 195670],"float32"), )
paddle.nn.functional.mse_loss(Tensor([11883862, 96, 2],"float32"), Tensor([11883862, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([11883862, 96, 2],"float32"), Tensor([11883862, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([15548, 146753],"float32"), Tensor([15548, 146753],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 142606337, 1],"float32"), Tensor([16, 142606337, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 71303169, 2],"float32"), Tensor([16, 71303169, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 71303169, 2],"float32"), Tensor([16, 71303169, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1485483],"float32"), Tensor([16, 96, 1485483],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1485483],"float32"), Tensor([16, 96, 1485483],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1],"float32"), Tensor([16, 96, 1485483],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1],"float32"), Tensor([16, 96, 2796203],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2796203],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([17825793, 128, 1],"float32"), Tensor([17825793, 128, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.mse_loss(Tensor([2, 10, 114085069],"float32"), Tensor([2, 10, 114085069],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 114085069],"float32"), Tensor([2, 10, 114085069],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 114085069],"float32"), Tensor([2, 10, 114085069],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 114085069, 10],"float32"), Tensor([2, 114085069, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 114085069, 10],"float32"), Tensor([2, 114085069, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 114085069, 10],"float32"), Tensor([2, 114085069, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 570425345, 2],"float32"), Tensor([2, 570425345, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 11883862],"float32"), Tensor([2, 96, 11883862],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2049, 32, 256, 256],"float16"), Tensor([2049, 32, 256, 256],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([2147483649, 2],"float16"), label=Tensor([2147483649, 2],"float16"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.mse_loss(Tensor([228170138, 10],"float32"), Tensor([228170138, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([228170138, 10],"float32"), Tensor([228170138, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([228170138, 10],"float32"), Tensor([228170138, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([22817014, 10, 10],"float32"), Tensor([22817014, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([22817014, 10, 10],"float32"), Tensor([22817014, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([22817014, 10, 10],"float32"), Tensor([22817014, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([23211, 4, 3, 64, 128],"float32"), Tensor([23211, 4, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([23767723, 96, 1],"float32"), Tensor([23767723, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([256, 128, 1],"float32"), Tensor([256, 128, 69633],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 128, 69633],"float32"), Tensor([256, 128, 69633],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 15, 594194],"float32"), Tensor([256, 15, 594194],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 2970966, 3],"float32"), Tensor([256, 2970966, 3],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([256, 8912897, 1],"float32"), Tensor([256, 8912897, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([26736, 85342],"float32"), Tensor([26736, 85342],"float32"), )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 25352238],"float32"), Tensor([3, 3, 10, 25352238],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 25352238],"float32"), Tensor([3, 3, 10, 25352238],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 25352238],"float32"), Tensor([3, 3, 10, 25352238],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 25352238, 10],"float32"), Tensor([3, 3, 25352238, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 25352238, 10],"float32"), Tensor([3, 3, 25352238, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 25352238, 10],"float32"), Tensor([3, 3, 25352238, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 7605672, 10, 10],"float32"), Tensor([3, 7605672, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 7605672, 10, 10],"float32"), Tensor([3, 7605672, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 7605672, 10, 10],"float32"), Tensor([3, 7605672, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 96, 14913081],"float32"), Tensor([3, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([3, 96, 1],"float32"), Tensor([3, 96, 14913081],"float32"), )
paddle.nn.functional.mse_loss(Tensor([30948, 3, 3, 64, 128],"float32"), Tensor([30948, 3, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 316],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 316],"float32"), Tensor([3548, 12, 170, 316],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 53592, 1],"float32"), Tensor([3548, 12, 53592, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 3783, 170, 1],"float32"), Tensor([3548, 3783, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([4097, 256, 64, 64],"float16"), Tensor([4097, 256, 64, 64],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([5, 858993460],"float16"), label=Tensor([5, 858993460],"float16"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([50704476, 15, 3],"float32"), Tensor([50704476, 15, 3],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([6068355, 376, 1],"float32"), Tensor([6068355, 376, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([64, 1451, 3, 64, 128],"float32"), Tensor([64, 1451, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 1451, 64, 128],"float32"), Tensor([64, 3, 1451, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 30948, 128],"float32"), Tensor([64, 3, 3, 30948, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 64, 61896],"float32"), Tensor([64, 3, 3, 64, 61896],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 1089, 64, 128],"float32"), Tensor([64, 4, 1089, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 23211, 128],"float32"), Tensor([64, 4, 3, 23211, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 64, 46422],"float32"), Tensor([64, 4, 3, 64, 46422],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), )
paddle.nn.functional.mse_loss(Tensor([7605672, 3, 10, 10],"float32"), Tensor([7605672, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([7605672, 3, 10, 10],"float32"), Tensor([7605672, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([7605672, 3, 10, 10],"float32"), Tensor([7605672, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([8, 128, 64, 65537],"float16"), Tensor([8, 128, 64, 65537],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 128, 65537, 64],"float16"), Tensor([8, 128, 65537, 64],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 131073, 64, 64],"float16"), Tensor([8, 131073, 64, 64],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 256, 32769, 64],"float16"), Tensor([8, 256, 32769, 64],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 256, 64, 32769],"float16"), Tensor([8, 256, 64, 32769],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 32, 256, 65537],"float16"), Tensor([8, 32, 256, 65537],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 32, 65537, 256],"float16"), Tensor([8, 32, 65537, 256],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8, 8193, 256, 256],"float16"), Tensor([8, 8193, 256, 256],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(Tensor([8193, 128, 64, 64],"float16"), Tensor([8193, 128, 64, 64],"float16"), reduction="sum", )
paddle.nn.functional.mse_loss(input=Tensor([2, 1140850690],"float32"), label=Tensor([2, 1140850690],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2, 1],"float32"), label=Tensor([2, 1140850690],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2281701379, 1],"float32"), label=Tensor([2281701379, 1],"float32"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 429496730],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([95070891, 3, 2, 4],"float32"), Tensor([95070891, 2, 4],"int64"), )
paddle.nn.functional.normalize(Tensor([1, 128, 32, 557057],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 128, 557057, 32],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 2228225, 32, 32],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 2281701379],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 256, 16, 557057],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 256, 557057, 16],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 557057, 64, 64],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 64, 557057, 64],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 64, 64, 557057],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1, 8912897, 16, 16],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([10, 228170138],"float32"), )
paddle.nn.functional.normalize(Tensor([10, 228170138],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([10, 228170138],"float32"), p=1.5, )
paddle.nn.functional.normalize(Tensor([10, 429496730],"float16"), )
paddle.nn.functional.normalize(Tensor([1006, 2268093],"float32"), )
paddle.nn.functional.normalize(Tensor([1006, 4269352],"float16"), )
paddle.nn.functional.normalize(Tensor([101, 22591103],"float32"), )
paddle.nn.functional.normalize(Tensor([101, 42524429],"float16"), )
paddle.nn.functional.normalize(Tensor([1015, 2247982],"float32"), )
paddle.nn.functional.normalize(Tensor([1015, 4231495],"float16"), )
paddle.nn.functional.normalize(Tensor([1018, 2241357],"float32"), )
paddle.nn.functional.normalize(Tensor([1018, 4219025],"float16"), )
paddle.nn.functional.normalize(Tensor([102, 22369622],"float32"), )
paddle.nn.functional.normalize(Tensor([102, 42107523],"float16"), )
paddle.nn.functional.normalize(Tensor([1021, 2234772],"float32"), )
paddle.nn.functional.normalize(Tensor([1021, 4206629],"float16"), )
paddle.nn.functional.normalize(Tensor([1023, 2230403],"float32"), )
paddle.nn.functional.normalize(Tensor([1023, 4198405],"float16"), )
paddle.nn.functional.normalize(Tensor([1025, 2226051],"float32"), )
paddle.nn.functional.normalize(Tensor([1025, 4190212],"float16"), )
paddle.nn.functional.normalize(Tensor([1029, 2217397],"float32"), )
paddle.nn.functional.normalize(Tensor([1029, 4173924],"float16"), )
paddle.nn.functional.normalize(Tensor([103, 22152441],"float32"), )
paddle.nn.functional.normalize(Tensor([103, 41698712],"float16"), )
paddle.nn.functional.normalize(Tensor([1030, 2215245],"float32"), )
paddle.nn.functional.normalize(Tensor([1030, 4169872],"float16"), )
paddle.nn.functional.normalize(Tensor([1031, 2213096],"float32"), )
paddle.nn.functional.normalize(Tensor([1031, 4165827],"float16"), )
paddle.nn.functional.normalize(Tensor([104, 21939437],"float32"), )
paddle.nn.functional.normalize(Tensor([104, 41297763],"float16"), )
paddle.nn.functional.normalize(Tensor([1040, 2193944],"float32"), )
paddle.nn.functional.normalize(Tensor([1040, 4129777],"float16"), )
paddle.nn.functional.normalize(Tensor([105, 21730490],"float32"), )
paddle.nn.functional.normalize(Tensor([105, 40904451],"float16"), )
paddle.nn.functional.normalize(Tensor([1051, 2170982],"float32"), )
paddle.nn.functional.normalize(Tensor([1051, 4086554],"float16"), )
paddle.nn.functional.normalize(Tensor([1052, 2168918],"float32"), )
paddle.nn.functional.normalize(Tensor([1052, 4082669],"float16"), )
paddle.nn.functional.normalize(Tensor([1053, 2166858],"float32"), )
paddle.nn.functional.normalize(Tensor([1053, 4078792],"float16"), )
paddle.nn.functional.normalize(Tensor([1054, 2164803],"float32"), )
paddle.nn.functional.normalize(Tensor([1054, 4074922],"float16"), )
paddle.nn.functional.normalize(Tensor([1056, 2160703],"float32"), )
paddle.nn.functional.normalize(Tensor([1056, 4067204],"float16"), )
paddle.nn.functional.normalize(Tensor([106, 21525485],"float32"), )
paddle.nn.functional.normalize(Tensor([106, 40518560],"float16"), )
paddle.nn.functional.normalize(Tensor([1065, 2142443],"float32"), )
paddle.nn.functional.normalize(Tensor([1065, 4032834],"float16"), )
paddle.nn.functional.normalize(Tensor([1066, 2140433],"float32"), )
paddle.nn.functional.normalize(Tensor([1066, 4029050],"float16"), )
paddle.nn.functional.normalize(Tensor([1079, 2114645],"float32"), )
paddle.nn.functional.normalize(Tensor([1079, 3980508],"float16"), )
paddle.nn.functional.normalize(Tensor([1080, 2112687],"float32"), )
paddle.nn.functional.normalize(Tensor([1080, 3976822],"float16"), )
paddle.nn.functional.normalize(Tensor([1082, 2108782],"float32"), )
paddle.nn.functional.normalize(Tensor([1082, 3969471],"float16"), )
paddle.nn.functional.normalize(Tensor([1084, 2104891],"float32"), )
paddle.nn.functional.normalize(Tensor([1084, 3962147],"float16"), )
paddle.nn.functional.normalize(Tensor([1088, 2097153],"float32"), )
paddle.nn.functional.normalize(Tensor([1088, 3947581],"float16"), )
paddle.nn.functional.normalize(Tensor([1089, 2095227],"float32"), )
paddle.nn.functional.normalize(Tensor([1089, 3943956],"float16"), )
paddle.nn.functional.normalize(Tensor([1090, 2093305],"float32"), )
paddle.nn.functional.normalize(Tensor([1090, 3940337],"float16"), )
paddle.nn.functional.normalize(Tensor([1093, 2087559],"float32"), )
paddle.nn.functional.normalize(Tensor([1093, 3929522],"float16"), )
paddle.nn.functional.normalize(Tensor([1098, 2078053],"float32"), )
paddle.nn.functional.normalize(Tensor([1098, 3911628],"float16"), )
paddle.nn.functional.normalize(Tensor([110, 20742740],"float32"), )
paddle.nn.functional.normalize(Tensor([110, 39045158],"float16"), )
paddle.nn.functional.normalize(Tensor([1104, 2066759],"float32"), )
paddle.nn.functional.normalize(Tensor([1104, 3890369],"float16"), )
paddle.nn.functional.normalize(Tensor([1109, 2057441],"float32"), )
paddle.nn.functional.normalize(Tensor([1109, 3872829],"float16"), )
paddle.nn.functional.normalize(Tensor([111, 20555869],"float32"), )
paddle.nn.functional.normalize(Tensor([111, 38693400],"float16"), )
paddle.nn.functional.normalize(Tensor([1112, 2051890],"float32"), )
paddle.nn.functional.normalize(Tensor([1112, 3862381],"float16"), )
paddle.nn.functional.normalize(Tensor([1118, 2040878],"float32"), )
paddle.nn.functional.normalize(Tensor([1118, 3841653],"float16"), )
paddle.nn.functional.normalize(Tensor([1120, 2037234],"float32"), )
paddle.nn.functional.normalize(Tensor([1120, 3834793],"float16"), )
paddle.nn.functional.normalize(Tensor([1123, 2031792],"float32"), )
paddle.nn.functional.normalize(Tensor([1123, 3824548],"float16"), )
paddle.nn.functional.normalize(Tensor([1128, 2022785],"float32"), )
paddle.nn.functional.normalize(Tensor([1128, 3807596],"float16"), )
paddle.nn.functional.normalize(Tensor([1134, 2012083],"float32"), )
paddle.nn.functional.normalize(Tensor([1134, 3787450],"float16"), )
paddle.nn.functional.normalize(Tensor([1138, 2005010],"float32"), )
paddle.nn.functional.normalize(Tensor([1138, 3774137],"float16"), )
paddle.nn.functional.normalize(Tensor([114085069, 20],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1143, 1996240],"float32"), )
paddle.nn.functional.normalize(Tensor([1143, 3757627],"float16"), )
paddle.nn.functional.normalize(Tensor([1158, 1970382],"float32"), )
paddle.nn.functional.normalize(Tensor([1158, 3708953],"float16"), )
paddle.nn.functional.normalize(Tensor([1165, 1958542],"float32"), )
paddle.nn.functional.normalize(Tensor([1165, 3686668],"float16"), )
paddle.nn.functional.normalize(Tensor([1177, 1938574],"float32"), )
paddle.nn.functional.normalize(Tensor([1177, 3649081],"float16"), )
paddle.nn.functional.normalize(Tensor([1179, 1935286],"float32"), )
paddle.nn.functional.normalize(Tensor([1179, 3642890],"float16"), )
paddle.nn.functional.normalize(Tensor([1180, 1933646],"float32"), )
paddle.nn.functional.normalize(Tensor([1180, 3639803],"float16"), )
paddle.nn.functional.normalize(Tensor([1183, 1928742],"float32"), )
paddle.nn.functional.normalize(Tensor([1183, 3630573],"float16"), )
paddle.nn.functional.normalize(Tensor([1186, 1923863],"float32"), )
paddle.nn.functional.normalize(Tensor([1186, 3621389],"float16"), )
paddle.nn.functional.normalize(Tensor([1188, 1920625],"float32"), )
paddle.nn.functional.normalize(Tensor([1188, 3615293],"float16"), )
paddle.nn.functional.normalize(Tensor([11883862, 192],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1189, 1919009],"float32"), )
paddle.nn.functional.normalize(Tensor([1189, 3612252],"float16"), )
paddle.nn.functional.normalize(Tensor([119, 19173962],"float32"), )
paddle.nn.functional.normalize(Tensor([119, 36092163],"float16"), )
paddle.nn.functional.normalize(Tensor([1192, 1914180],"float32"), )
paddle.nn.functional.normalize(Tensor([1192, 3603161],"float16"), )
paddle.nn.functional.normalize(Tensor([1199, 1903004],"float32"), )
paddle.nn.functional.normalize(Tensor([1199, 3582125],"float16"), )
paddle.nn.functional.normalize(Tensor([12, 190141782],"float32"), )
paddle.nn.functional.normalize(Tensor([12, 190141782],"float32"), axis=-1, )
paddle.nn.functional.normalize(Tensor([12, 357913942],"float16"), )
paddle.nn.functional.normalize(Tensor([1200, 1901418],"float32"), )
paddle.nn.functional.normalize(Tensor([1200, 3579140],"float16"), )
paddle.nn.functional.normalize(Tensor([1206, 1891959],"float32"), )
paddle.nn.functional.normalize(Tensor([1206, 3561333],"float16"), )
paddle.nn.functional.normalize(Tensor([1213, 1881040],"float32"), )
paddle.nn.functional.normalize(Tensor([1213, 3540781],"float16"), )
paddle.nn.functional.normalize(Tensor([1214, 1879491],"float32"), )
paddle.nn.functional.normalize(Tensor([1214, 3537865],"float16"), )
paddle.nn.functional.normalize(Tensor([1219, 1871782],"float32"), )
paddle.nn.functional.normalize(Tensor([1219, 3523353],"float16"), )
paddle.nn.functional.normalize(Tensor([1221, 1868716],"float32"), )
paddle.nn.functional.normalize(Tensor([1221, 3517582],"float16"), )
paddle.nn.functional.normalize(Tensor([1223, 1865660],"float32"), )
paddle.nn.functional.normalize(Tensor([1223, 3511830],"float16"), )
paddle.nn.functional.normalize(Tensor([123, 18550418],"float32"), )
paddle.nn.functional.normalize(Tensor([123, 34918434],"float16"), )
paddle.nn.functional.normalize(Tensor([1230, 1855042],"float32"), )
paddle.nn.functional.normalize(Tensor([1230, 3491844],"float16"), )
paddle.nn.functional.normalize(Tensor([1232, 1852031],"float32"), )
paddle.nn.functional.normalize(Tensor([1232, 3486175],"float16"), )
paddle.nn.functional.normalize(Tensor([1233, 1850529],"float32"), )
paddle.nn.functional.normalize(Tensor([1233, 3483348],"float16"), )
paddle.nn.functional.normalize(Tensor([1238, 1843055],"float32"), )
paddle.nn.functional.normalize(Tensor([1238, 3469279],"float16"), )
paddle.nn.functional.normalize(Tensor([1243, 1835641],"float32"), )
paddle.nn.functional.normalize(Tensor([1243, 3455324],"float16"), )
paddle.nn.functional.normalize(Tensor([1250, 1825362],"float32"), )
paddle.nn.functional.normalize(Tensor([1250, 3435974],"float16"), )
paddle.nn.functional.normalize(Tensor([1259, 1812313],"float32"), )
paddle.nn.functional.normalize(Tensor([1259, 3411412],"float16"), )
paddle.nn.functional.normalize(Tensor([126, 18108742],"float32"), )
paddle.nn.functional.normalize(Tensor([126, 34087043],"float16"), )
paddle.nn.functional.normalize(Tensor([126761188, 18],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1270, 1796616],"float32"), )
paddle.nn.functional.normalize(Tensor([1270, 3381865],"float16"), )
paddle.nn.functional.normalize(Tensor([1277, 1786767],"float32"), )
paddle.nn.functional.normalize(Tensor([1277, 3363326],"float16"), )
paddle.nn.functional.normalize(Tensor([128, 17825793],"float32"), )
paddle.nn.functional.normalize(Tensor([128, 17825793],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([128, 33554433],"float16"), )
paddle.nn.functional.normalize(Tensor([1281, 1781188],"float32"), )
paddle.nn.functional.normalize(Tensor([1281, 3352824],"float16"), )
paddle.nn.functional.normalize(Tensor([1282, 1779799],"float32"), )
paddle.nn.functional.normalize(Tensor([1282, 3350209],"float16"), )
paddle.nn.functional.normalize(Tensor([1284, 1777026],"float32"), )
paddle.nn.functional.normalize(Tensor([1284, 3344991],"float16"), )
paddle.nn.functional.normalize(Tensor([1287, 1772884],"float32"), )
paddle.nn.functional.normalize(Tensor([1287, 3337193],"float16"), )
paddle.nn.functional.normalize(Tensor([1290, 1768761],"float32"), )
paddle.nn.functional.normalize(Tensor([1290, 3329433],"float16"), )
paddle.nn.functional.normalize(Tensor([1291, 1767391],"float32"), )
paddle.nn.functional.normalize(Tensor([1291, 3326854],"float16"), )
paddle.nn.functional.normalize(Tensor([1292, 1766023],"float32"), )
paddle.nn.functional.normalize(Tensor([1292, 3324279],"float16"), )
paddle.nn.functional.normalize(Tensor([1295, 1761932],"float32"), )
paddle.nn.functional.normalize(Tensor([1295, 3316578],"float16"), )
paddle.nn.functional.normalize(Tensor([1297, 1759215],"float32"), )
paddle.nn.functional.normalize(Tensor([1297, 3311463],"float16"), )
paddle.nn.functional.normalize(Tensor([1304, 1749771],"float32"), )
paddle.nn.functional.normalize(Tensor([1304, 3293687],"float16"), )
paddle.nn.functional.normalize(Tensor([1310, 1741757],"float32"), )
paddle.nn.functional.normalize(Tensor([1310, 3278601],"float16"), )
paddle.nn.functional.normalize(Tensor([1312, 1739102],"float32"), )
paddle.nn.functional.normalize(Tensor([1312, 3273604],"float16"), )
paddle.nn.functional.normalize(Tensor([1315, 1735135],"float32"), )
paddle.nn.functional.normalize(Tensor([1315, 3266135],"float16"), )
paddle.nn.functional.normalize(Tensor([1317, 1732500],"float32"), )
paddle.nn.functional.normalize(Tensor([1317, 3261175],"float16"), )
paddle.nn.functional.normalize(Tensor([132, 17285617],"float32"), )
paddle.nn.functional.normalize(Tensor([132, 32537632],"float16"), )
paddle.nn.functional.normalize(Tensor([1332, 1712990],"float32"), )
paddle.nn.functional.normalize(Tensor([1332, 3224450],"float16"), )
paddle.nn.functional.normalize(Tensor([1333, 1711704],"float32"), )
paddle.nn.functional.normalize(Tensor([1333, 3222031],"float16"), )
paddle.nn.functional.normalize(Tensor([1348, 1692657],"float32"), )
paddle.nn.functional.normalize(Tensor([1348, 3186178],"float16"), )
paddle.nn.functional.normalize(Tensor([1349, 1691403],"float32"), )
paddle.nn.functional.normalize(Tensor([1349, 3183816],"float16"), )
paddle.nn.functional.normalize(Tensor([1352, 1687649],"float32"), )
paddle.nn.functional.normalize(Tensor([1352, 3176751],"float16"), )
paddle.nn.functional.normalize(Tensor([136, 16777217],"float32"), )
paddle.nn.functional.normalize(Tensor([136, 31580642],"float16"), )
paddle.nn.functional.normalize(Tensor([1362, 1675258],"float32"), )
paddle.nn.functional.normalize(Tensor([1362, 3153427],"float16"), )
paddle.nn.functional.normalize(Tensor([1363, 1674029],"float32"), )
paddle.nn.functional.normalize(Tensor([1363, 3151114],"float16"), )
paddle.nn.functional.normalize(Tensor([1367, 1669131],"float32"), )
paddle.nn.functional.normalize(Tensor([1367, 3141893],"float16"), )
paddle.nn.functional.normalize(Tensor([137, 16654755],"float32"), )
paddle.nn.functional.normalize(Tensor([137, 31350127],"float16"), )
paddle.nn.functional.normalize(Tensor([1373, 1661837],"float32"), )
paddle.nn.functional.normalize(Tensor([1373, 3128163],"float16"), )
paddle.nn.functional.normalize(Tensor([1374, 1660627],"float32"), )
paddle.nn.functional.normalize(Tensor([1374, 3125886],"float16"), )
paddle.nn.functional.normalize(Tensor([1378, 1655807],"float32"), )
paddle.nn.functional.normalize(Tensor([1378, 3116813],"float16"), )
paddle.nn.functional.normalize(Tensor([1389, 1642694],"float32"), )
paddle.nn.functional.normalize(Tensor([1389, 3092130],"float16"), )
paddle.nn.functional.normalize(Tensor([139, 16415118],"float32"), )
paddle.nn.functional.normalize(Tensor([139, 30899046],"float16"), )
paddle.nn.functional.normalize(Tensor([1394, 1636802],"float32"), )
paddle.nn.functional.normalize(Tensor([1394, 3081039],"float16"), )
paddle.nn.functional.normalize(Tensor([14, 162978670],"float32"), )
paddle.nn.functional.normalize(Tensor([14, 306783379],"float16"), )
paddle.nn.functional.normalize(Tensor([140, 16297867],"float32"), )
paddle.nn.functional.normalize(Tensor([140, 30678338],"float16"), )
paddle.nn.functional.normalize(Tensor([1401, 1628624],"float32"), )
paddle.nn.functional.normalize(Tensor([1401, 3065645],"float16"), )
paddle.nn.functional.normalize(Tensor([1408, 1620527],"float32"), )
paddle.nn.functional.normalize(Tensor([1408, 3050403],"float16"), )
paddle.nn.functional.normalize(Tensor([1411, 1617082],"float32"), )
paddle.nn.functional.normalize(Tensor([1411, 3043918],"float16"), )
paddle.nn.functional.normalize(Tensor([1413, 1614793],"float32"), )
paddle.nn.functional.normalize(Tensor([1413, 3039609],"float16"), )
paddle.nn.functional.normalize(Tensor([1417, 1610234],"float32"), )
paddle.nn.functional.normalize(Tensor([1417, 3031029],"float16"), )
paddle.nn.functional.normalize(Tensor([1420, 1606832],"float32"), )
paddle.nn.functional.normalize(Tensor([1420, 3024625],"float16"), )
paddle.nn.functional.normalize(Tensor([1421, 1605702],"float32"), )
paddle.nn.functional.normalize(Tensor([1421, 3022497],"float16"), )
paddle.nn.functional.normalize(Tensor([1429, 1596712],"float32"), )
paddle.nn.functional.normalize(Tensor([1429, 3005576],"float16"), )
paddle.nn.functional.normalize(Tensor([143, 15955954],"float32"), )
paddle.nn.functional.normalize(Tensor([143, 30034737],"float16"), )
paddle.nn.functional.normalize(Tensor([1435, 1590036],"float32"), )
paddle.nn.functional.normalize(Tensor([1435, 2993009],"float16"), )
paddle.nn.functional.normalize(Tensor([1438, 1586719],"float32"), )
paddle.nn.functional.normalize(Tensor([1438, 2986765],"float16"), )
paddle.nn.functional.normalize(Tensor([1439, 1585616],"float32"), )
paddle.nn.functional.normalize(Tensor([1439, 2984689],"float16"), )
paddle.nn.functional.normalize(Tensor([144, 15845149],"float32"), )
paddle.nn.functional.normalize(Tensor([144, 29826162],"float16"), )
paddle.nn.functional.normalize(Tensor([1449, 1574674],"float32"), )
paddle.nn.functional.normalize(Tensor([1449, 2964091],"float16"), )
paddle.nn.functional.normalize(Tensor([1453, 1570339],"float32"), )
paddle.nn.functional.normalize(Tensor([1453, 2955931],"float16"), )
paddle.nn.functional.normalize(Tensor([1463, 1559605],"float32"), )
paddle.nn.functional.normalize(Tensor([1463, 2935727],"float16"), )
paddle.nn.functional.normalize(Tensor([147, 15521779],"float32"), )
paddle.nn.functional.normalize(Tensor([147, 29217465],"float16"), )
paddle.nn.functional.normalize(Tensor([1471, 1551123],"float32"), )
paddle.nn.functional.normalize(Tensor([1471, 2919761],"float16"), )
paddle.nn.functional.normalize(Tensor([1472, 1550069],"float32"), )
paddle.nn.functional.normalize(Tensor([1472, 2917777],"float16"), )
paddle.nn.functional.normalize(Tensor([1478, 1543777],"float32"), )
paddle.nn.functional.normalize(Tensor([1478, 2905932],"float16"), )
paddle.nn.functional.normalize(Tensor([149, 15313433],"float32"), )
paddle.nn.functional.normalize(Tensor([149, 28825284],"float16"), )
paddle.nn.functional.normalize(Tensor([1494, 1527244],"float32"), )
paddle.nn.functional.normalize(Tensor([1494, 2874811],"float16"), )
paddle.nn.functional.normalize(Tensor([1497, 1524183],"float32"), )
paddle.nn.functional.normalize(Tensor([1497, 2869050],"float16"), )
paddle.nn.functional.normalize(Tensor([1499, 1522150],"float32"), )
paddle.nn.functional.normalize(Tensor([1499, 2865222],"float16"), )
paddle.nn.functional.normalize(Tensor([1511, 1510061],"float32"), )
paddle.nn.functional.normalize(Tensor([1511, 2842467],"float16"), )
paddle.nn.functional.normalize(Tensor([1512, 1509062],"float32"), )
paddle.nn.functional.normalize(Tensor([1512, 2840587],"float16"), )
paddle.nn.functional.normalize(Tensor([1514, 1507069],"float32"), )
paddle.nn.functional.normalize(Tensor([1514, 2836835],"float16"), )
paddle.nn.functional.normalize(Tensor([1517, 1504088],"float32"), )
paddle.nn.functional.normalize(Tensor([1517, 2831225],"float16"), )
paddle.nn.functional.normalize(Tensor([1523, 1498163],"float32"), )
paddle.nn.functional.normalize(Tensor([1523, 2820071],"float16"), )
paddle.nn.functional.normalize(Tensor([1527, 1494238],"float32"), )
paddle.nn.functional.normalize(Tensor([1527, 2812684],"float16"), )
paddle.nn.functional.normalize(Tensor([1532, 1489362],"float32"), )
paddle.nn.functional.normalize(Tensor([1532, 2803504],"float16"), )
paddle.nn.functional.normalize(Tensor([1536, 1485483],"float32"), )
paddle.nn.functional.normalize(Tensor([1536, 2796203],"float16"), )
paddle.nn.functional.normalize(Tensor([1539, 1482587],"float32"), )
paddle.nn.functional.normalize(Tensor([1539, 2790752],"float16"), )
paddle.nn.functional.normalize(Tensor([1541, 1480663],"float32"), )
paddle.nn.functional.normalize(Tensor([1541, 2787130],"float16"), )
paddle.nn.functional.normalize(Tensor([1542, 1479703],"float32"), )
paddle.nn.functional.normalize(Tensor([1542, 2785323],"float16"), )
paddle.nn.functional.normalize(Tensor([1543, 1478744],"float32"), )
paddle.nn.functional.normalize(Tensor([1543, 2783518],"float16"), )
paddle.nn.functional.normalize(Tensor([1546, 1475875],"float32"), )
paddle.nn.functional.normalize(Tensor([1546, 2778116],"float16"), )
paddle.nn.functional.normalize(Tensor([1549, 1473016],"float32"), )
paddle.nn.functional.normalize(Tensor([1549, 2772736],"float16"), )
paddle.nn.functional.normalize(Tensor([1553, 1469222],"float32"), )
paddle.nn.functional.normalize(Tensor([1553, 2765594],"float16"), )
paddle.nn.functional.normalize(Tensor([1562, 1460757],"float32"), )
paddle.nn.functional.normalize(Tensor([1562, 2749659],"float16"), )
paddle.nn.functional.normalize(Tensor([1563, 1459822],"float32"), )
paddle.nn.functional.normalize(Tensor([1563, 2747900],"float16"), )
paddle.nn.functional.normalize(Tensor([1567, 1456096],"float32"), )
paddle.nn.functional.normalize(Tensor([1567, 2740886],"float16"), )
paddle.nn.functional.normalize(Tensor([1579, 1445030],"float32"), )
paddle.nn.functional.normalize(Tensor([1579, 2720056],"float16"), )
paddle.nn.functional.normalize(Tensor([1588, 1436840],"float32"), )
paddle.nn.functional.normalize(Tensor([1588, 2704640],"float16"), )
paddle.nn.functional.normalize(Tensor([1589, 1435936],"float32"), )
paddle.nn.functional.normalize(Tensor([1589, 2702938],"float16"), )
paddle.nn.functional.normalize(Tensor([1596, 1429638],"float32"), )
paddle.nn.functional.normalize(Tensor([1596, 2691083],"float16"), )
paddle.nn.functional.normalize(Tensor([1603, 1423395],"float32"), )
paddle.nn.functional.normalize(Tensor([1603, 2679331],"float16"), )
paddle.nn.functional.normalize(Tensor([1605, 1421621],"float32"), )
paddle.nn.functional.normalize(Tensor([1605, 2675993],"float16"), )
paddle.nn.functional.normalize(Tensor([1607, 1419852],"float32"), )
paddle.nn.functional.normalize(Tensor([1607, 2672662],"float16"), )
paddle.nn.functional.normalize(Tensor([1623, 1405855],"float32"), )
paddle.nn.functional.normalize(Tensor([1623, 2646314],"float16"), )
paddle.nn.functional.normalize(Tensor([1653, 1380340],"float32"), )
paddle.nn.functional.normalize(Tensor([1653, 2598287],"float16"), )
paddle.nn.functional.normalize(Tensor([1661, 1373692],"float32"), )
paddle.nn.functional.normalize(Tensor([1661, 2585773],"float16"), )
paddle.nn.functional.normalize(Tensor([1671, 1365471],"float32"), )
paddle.nn.functional.normalize(Tensor([1671, 2570298],"float16"), )
paddle.nn.functional.normalize(Tensor([1676, 1361398],"float32"), )
paddle.nn.functional.normalize(Tensor([1676, 2562630],"float16"), )
paddle.nn.functional.normalize(Tensor([1680, 1358156],"float32"), )
paddle.nn.functional.normalize(Tensor([1680, 2556529],"float16"), )
paddle.nn.functional.normalize(Tensor([1686, 1353323],"float32"), )
paddle.nn.functional.normalize(Tensor([1686, 2547431],"float16"), )
paddle.nn.functional.normalize(Tensor([1696, 1345343],"float32"), )
paddle.nn.functional.normalize(Tensor([1696, 2532410],"float16"), )
paddle.nn.functional.normalize(Tensor([1697, 1344551],"float32"), )
paddle.nn.functional.normalize(Tensor([1697, 2530918],"float16"), )
paddle.nn.functional.normalize(Tensor([1704, 1339027],"float32"), )
paddle.nn.functional.normalize(Tensor([1704, 2520521],"float16"), )
paddle.nn.functional.normalize(Tensor([1716, 1329663],"float32"), )
paddle.nn.functional.normalize(Tensor([1716, 2502895],"float16"), )
paddle.nn.functional.normalize(Tensor([1737, 1313588],"float32"), )
paddle.nn.functional.normalize(Tensor([1737, 2472636],"float16"), )
paddle.nn.functional.normalize(Tensor([174, 13113227],"float32"), )
paddle.nn.functional.normalize(Tensor([174, 24683721],"float16"), )
paddle.nn.functional.normalize(Tensor([17409, 128, 32, 32],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([1748, 1305322],"float32"), )
paddle.nn.functional.normalize(Tensor([1748, 2457076],"float16"), )
paddle.nn.functional.normalize(Tensor([1753, 1301599],"float32"), )
paddle.nn.functional.normalize(Tensor([1753, 2450067],"float16"), )
paddle.nn.functional.normalize(Tensor([1755, 1300115],"float32"), )
paddle.nn.functional.normalize(Tensor([1755, 2447275],"float16"), )
paddle.nn.functional.normalize(Tensor([1761, 1295686],"float32"), )
paddle.nn.functional.normalize(Tensor([1761, 2438937],"float16"), )
paddle.nn.functional.normalize(Tensor([1768, 1290556],"float32"), )
paddle.nn.functional.normalize(Tensor([1768, 2429281],"float16"), )
paddle.nn.functional.normalize(Tensor([177, 12890969],"float32"), )
paddle.nn.functional.normalize(Tensor([177, 24265352],"float16"), )
paddle.nn.functional.normalize(Tensor([1774, 1286191],"float32"), )
paddle.nn.functional.normalize(Tensor([1774, 2421064],"float16"), )
paddle.nn.functional.normalize(Tensor([1777, 1284019],"float32"), )
paddle.nn.functional.normalize(Tensor([1777, 2416977],"float16"), )
paddle.nn.functional.normalize(Tensor([178, 12818548],"float32"), )
paddle.nn.functional.normalize(Tensor([178, 24129030],"float16"), )
paddle.nn.functional.normalize(Tensor([17825793, 128],"float32"), )
paddle.nn.functional.normalize(Tensor([1796, 1270436],"float32"), )
paddle.nn.functional.normalize(Tensor([1796, 2391408],"float16"), )
paddle.nn.functional.normalize(Tensor([1829, 1247514],"float32"), )
paddle.nn.functional.normalize(Tensor([1829, 2348260],"float16"), )
paddle.nn.functional.normalize(Tensor([183, 12468314],"float32"), )
paddle.nn.functional.normalize(Tensor([183, 23469767],"float16"), )
paddle.nn.functional.normalize(Tensor([1836, 1242757],"float32"), )
paddle.nn.functional.normalize(Tensor([1836, 2339307],"float16"), )
paddle.nn.functional.normalize(Tensor([1851, 1232686],"float32"), )
paddle.nn.functional.normalize(Tensor([1851, 2320350],"float16"), )
paddle.nn.functional.normalize(Tensor([1856, 1229365],"float32"), )
paddle.nn.functional.normalize(Tensor([1856, 2314099],"float16"), )
paddle.nn.functional.normalize(Tensor([1878, 1214964],"float32"), )
paddle.nn.functional.normalize(Tensor([1878, 2286991],"float16"), )
paddle.nn.functional.normalize(Tensor([1895, 1204065],"float32"), )
paddle.nn.functional.normalize(Tensor([1895, 2266474],"float16"), )
paddle.nn.functional.normalize(Tensor([191, 11946081],"float32"), )
paddle.nn.functional.normalize(Tensor([191, 22486740],"float16"), )
paddle.nn.functional.normalize(Tensor([1920, 1188387],"float32"), )
paddle.nn.functional.normalize(Tensor([1920, 2236963],"float16"), )
paddle.nn.functional.normalize(Tensor([1928, 1183456],"float32"), )
paddle.nn.functional.normalize(Tensor([1928, 2227681],"float16"), )
paddle.nn.functional.normalize(Tensor([1938, 1177349],"float32"), )
paddle.nn.functional.normalize(Tensor([1938, 2216186],"float16"), )
paddle.nn.functional.normalize(Tensor([1943, 1174319],"float32"), )
paddle.nn.functional.normalize(Tensor([1943, 2210483],"float16"), )
paddle.nn.functional.normalize(Tensor([2, 1140850690],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 16297867, 7, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 2147483649],"float16"), p=2, axis=-1, )
paddle.nn.functional.normalize(Tensor([2, 8, 14260634, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 8, 7, 20372334],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([20, 114085069],"float32"), )
paddle.nn.functional.normalize(Tensor([20, 214748365],"float16"), )
paddle.nn.functional.normalize(Tensor([2009, 1135740],"float32"), )
paddle.nn.functional.normalize(Tensor([2009, 2137864],"float16"), )
paddle.nn.functional.normalize(Tensor([201, 11351749],"float32"), )
paddle.nn.functional.normalize(Tensor([201, 21367997],"float16"), )
paddle.nn.functional.normalize(Tensor([207427399, 11],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2081, 1096445],"float32"), )
paddle.nn.functional.normalize(Tensor([2081, 2063896],"float16"), )
paddle.nn.functional.normalize(Tensor([211, 10813751],"float32"), )
paddle.nn.functional.normalize(Tensor([211, 20355296],"float16"), )
paddle.nn.functional.normalize(Tensor([2112687, 1080],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([22, 103713700],"float32"), )
paddle.nn.functional.normalize(Tensor([22, 195225787],"float16"), )
paddle.nn.functional.normalize(Tensor([220, 10371370],"float32"), )
paddle.nn.functional.normalize(Tensor([220, 19522579],"float16"), )
paddle.nn.functional.normalize(Tensor([224, 10186167],"float32"), )
paddle.nn.functional.normalize(Tensor([224, 19173962],"float16"), )
paddle.nn.functional.normalize(Tensor([2281701379, 1],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, epsilon=1e-10, )
paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, epsilon=1e-12, )
paddle.nn.functional.normalize(Tensor([228170138, 10],"float32"), )
paddle.nn.functional.normalize(Tensor([228170138, 10],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([228170138, 10],"float32"), p=1.5, )
paddle.nn.functional.normalize(Tensor([2331, 1842543],"float16"), )
paddle.nn.functional.normalize(Tensor([2331, 978851],"float32"), )
paddle.nn.functional.normalize(Tensor([246, 17459217],"float16"), )
paddle.nn.functional.normalize(Tensor([246, 9275209],"float32"), )
paddle.nn.functional.normalize(Tensor([253522376, 9],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([254, 16909321],"float16"), )
paddle.nn.functional.normalize(Tensor([254, 8983077],"float32"), )
paddle.nn.functional.normalize(Tensor([279, 15394149],"float16"), )
paddle.nn.functional.normalize(Tensor([279, 8178142],"float32"), )
paddle.nn.functional.normalize(Tensor([28169153, 81],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([285212673, 8],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([28521268, 80],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([29, 148102321],"float16"), )
paddle.nn.functional.normalize(Tensor([29, 78679358],"float32"), )
paddle.nn.functional.normalize(Tensor([2970966, 768],"float32"), axis=-1, )
paddle.nn.functional.normalize(Tensor([3, 760567127],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([310, 13854734],"float16"), )
paddle.nn.functional.normalize(Tensor([3169030, 720],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([325957340, 7],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([325957340, 7],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([33, 130150525],"float16"), )
paddle.nn.functional.normalize(Tensor([33554433, 128],"float16"), )
paddle.nn.functional.normalize(Tensor([34817, 256, 16, 16],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([35651585, 64],"float32"), axis=-1, )
paddle.nn.functional.normalize(Tensor([35651585, 64],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([380283564, 6],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([4, 570425345],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([4, 570425345],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([4074467, 8, 7, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([4194305, 1024],"float16"), p=2, axis=-1, )
paddle.nn.functional.normalize(Tensor([4456449, 512],"float32"), )
paddle.nn.functional.normalize(Tensor([45, 50704476],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([456340276, 5],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([456340276, 5],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([5, 456340276],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([50704476, 45],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([570425345, 4],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([5704254, 400],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([6, 380283564],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([60, 38028357],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([64, 35651585],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([71303169, 32],"float32"), )
paddle.nn.functional.normalize(Tensor([720, 3169030],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([760567127, 3],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([760567127, 3],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([80, 28521268],"float32"), axis=-1, )
paddle.nn.functional.normalize(Tensor([80, 28521268],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([8388609, 512],"float16"), )
paddle.nn.functional.normalize(Tensor([84507459, 27],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([8705, 64, 64, 64],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([8912897, 256],"float32"), axis=1, )
paddle.nn.functional.normalize(x=Tensor([1, 2281701379],"float32"), axis=-1, )
paddle.nn.functional.normalize(x=Tensor([1073741825, 4],"float16"), )
paddle.nn.functional.normalize(x=Tensor([143165577, 5, 6],"float16"), )
paddle.nn.functional.normalize(x=Tensor([2, 1140850690],"float32"), )
paddle.nn.functional.normalize(x=Tensor([2, 2147483649],"float16"), )
paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), )
paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=1, )
paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=4, )
paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([2147483649, 2],"float16"), p=1.2, )
paddle.nn.functional.normalize(x=Tensor([2970966, 768],"float32"), axis=-1, )
paddle.nn.functional.normalize(x=Tensor([3, 1431655766],"float16"), )
paddle.nn.functional.normalize(x=Tensor([4, 1073741825],"float16"), p=1.2, )
paddle.nn.functional.normalize(x=Tensor([4, 178956971, 6],"float16"), )
paddle.nn.functional.normalize(x=Tensor([4, 25565282, 6, 7],"float16"), )
paddle.nn.functional.normalize(x=Tensor([4, 25565282, 6, 7],"float16"), p=1, )
paddle.nn.functional.normalize(x=Tensor([4, 25565282, 6, 7],"float16"), p=4, )
paddle.nn.functional.normalize(x=Tensor([4, 25565282, 6, 7],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 214748365],"float16"), )
paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), )
paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=1, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=4, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), p=1, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), p=4, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4294967297],"float16"), axis=0, )
paddle.nn.functional.normalize(x=Tensor([570425345, 4],"float32"), )
paddle.nn.functional.npair_loss(Tensor([18, 126761188],"float32"), positive=Tensor([18, 126761188],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.pad(Tensor([1, 1, 10, 228170138],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 22817014],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 108652447, 21],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 17, 134217729],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 1140850690],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2147483649],"float16"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 22817014, 100],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 27825627, 82],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 4294967295, 1],"float16"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1072, 32, 224, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 10865245, 10, 21],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1300, 32, 245, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 1316, 32, 242, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 1332, 32, 239, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 1338, 32, 224, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 13692, 31, 28, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 1378, 32, 224, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 1431655766, 3],"float16"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 14701, 155208],"float32"), list[1,0,], value=4, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 14, 1369569],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 14, 727584],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 15, 679078],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 15, 679078],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 16, 636636],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 17, 599187],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 18, 565899],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 19, 536115],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 26527, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 49933, 384],"float16"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 14, 679078],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 14, 679078],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 24759, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 24759, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 16, 14, 636636],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 16, 23211, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 18, 14, 565899],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 18, 20632, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 19546, 19, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 20632, 18, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 21846, 17, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 23211, 16, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 24759, 15, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 24759, 15, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 14, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 14, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 14, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 14, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 14, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 28, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 26527, 56, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 23960, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 28, 164294],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 49933, 14, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 49933, 14, 384],"float16"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 49933, 14, 384],"float16"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 49933, 14, 384],"float16"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 49933, 14, 384],"float16"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 49933, 28, 192],"float16"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 61, 24353, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 61, 56, 41747],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 1636802, 17, 82],"float32"), pad=list[1,1,1,1,], mode="constant", value=0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 17980, 126903],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 19780, 115354],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 2, 1140850690],"float32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 1140850690],"float32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 1140850690],"float32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 20524, 111173],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 21955, 103927],"float32"), list[1,0,], value=0, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 22071, 103381],"float32"), list[1,0,], value=7, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 22339, 14, 19, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 228171, 100, 100],"int32"), tuple(0,0,0,0,), value=False, )
paddle.nn.functional.pad(Tensor([1, 23580, 14, 18, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 23580, 18, 14, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 24967, 14, 17, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 25757, 88586],"float32"), list[1,0,], value=5, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 26527, 14, 16, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 26527, 16, 14, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 27860, 81899],"float32"), list[1,0,], value=6, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 28295, 14, 15, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 28295, 14, 15, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 28295, 15, 14, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 28295, 15, 14, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 3, 11433, 224, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 13859, 245, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 140, 10226113],"float16"), pad=list[40,40,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 14031, 242, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 14207, 239, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 14267, 224, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 14699, 224, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 184, 7780738],"float16"), pad=list[52,52,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 224, 3395389],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 3, 32, 102891, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 106106, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 106106, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 106106, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 224, 106106],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 224, 106106],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 239, 99447],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 242, 98214],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 245, 97012],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 80027, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 99865, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 3395389, 224],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 3, 5965233, 240],"float16"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 742742, 1024],"float32"), tuple(0,0,0,338,), )
paddle.nn.functional.pad(Tensor([1, 30316, 14, 14, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 45474, 224, 224],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 57066, 14, 14, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 760567127, 3],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 760567127, 3],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([13, 47197443, 7],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([14, 43826197, 7],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([16, 64, 16, 139265],"float32"), list[0,3,0,3,], mode="constant", )
paddle.nn.functional.pad(Tensor([1895, 16, 14, 14, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([3567, 16, 14, 14, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([358, 3, 32, 224, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([38452, 19780, 3],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([4, 128, 63664, 70],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 128, 94, 47410],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([421120, 25, 217],"float32"), list[0,1,], "constant", 1.0, data_format="NCL", )
paddle.nn.functional.pad(Tensor([42301, 17980, 3],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([434, 3, 32, 245, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([435, 16, 61, 56, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([439, 3, 32, 242, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([444, 3, 32, 239, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([446, 3, 32, 224, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([460, 3, 32, 224, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([51736, 14701, 3],"float32"), list[1,0,], value=4, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([63380594, 6, 6],"float32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([742742, 3, 32, 32],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([742742, 48, 8, 8],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([8, 1, 1203429, 237],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([8, 1, 237, 1203429],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([8, 5078, 237, 237],"float32"), list[2,2,2,2,], "constant", 0, )
paddle.nn.functional.pad(Tensor([856, 16, 31, 28, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([9586981, 64, 7],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 1431655766, 3],"float16"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 1073741825],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([253522376, 3, 3],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([3, 253522376, 3],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([3, 3, 253522376],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 22817014],"float32"), y=Tensor([100, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 22817014],"float32"), y=Tensor([100, 22817014],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"bfloat16"), Tensor([380283564, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"bfloat16"), Tensor([4, 285212673, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"bfloat16"), Tensor([4, 3, 190141782],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float16"), )
paddle.nn.functional.prelu(Tensor([1, 190141782, 3, 4],"float32"), Tensor([190141782],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 190141782, 3, 4],"float32"), Tensor([190141782],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 190141782, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 190141782, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 285212673, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 285212673, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 285212673, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 285212673, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 380283564],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 380283564],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 380283564],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 380283564],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 111936, 14, 14],"float32"), Tensor([111936],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 28, 6122],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 3061, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 56, 3061],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 6122, 28],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 11523, 14],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 12243, 7],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 14, 6122],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 28, 3061],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 3061, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 6122, 14],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 256, 7, 12243],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 27984, 28, 28],"float32"), Tensor([27984],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 447744, 7, 7],"float32"), Tensor([447744],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 512, 14, 3061],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 512, 3061, 14],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 512, 6122, 7],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 512, 7, 6122],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 64, 56, 6122],"float32"), Tensor([64],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 64, 6122, 56],"float32"), Tensor([64],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 6996, 56, 56],"float32"), Tensor([6996],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([11369, 256, 28, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([11369, 64, 56, 56],"float32"), Tensor([64],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1140851, 20, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 128, 2487, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 128, 28, 4974],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 128, 4974, 28],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 128, 56, 2487],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 22737, 28, 28],"float32"), Tensor([22737],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 14, 4974],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 2487, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 28, 2487],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 4974, 14],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 7, 9948],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 9948, 7],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 363792, 7, 7],"float32"), Tensor([363792],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 512, 14, 2487],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 512, 2487, 14],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 512, 4974, 7],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 512, 7, 4974],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 5685, 56, 56],"float32"), Tensor([5685],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 64, 4974, 56],"float32"), Tensor([64],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 64, 56, 4974],"float32"), Tensor([64],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 90948, 14, 14],"float32"), Tensor([90948],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([159072863, 3, 3, 3],"float16"), Tensor([1],"float16"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([178956971, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([181896, 256, 7, 7],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 126761188, 3, 3],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 238609295, 3, 3],"float16"), Tensor([1],"float16"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 126761188, 3],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 238609295, 3],"float16"), Tensor([1],"float16"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 3, 126761188],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 3, 238609295],"float16"), Tensor([1],"float16"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([22737, 128, 28, 28],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([22737, 512, 14, 14],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([45474, 256, 14, 14],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 20, 10, 2281702],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 20, 2281702, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 4563403, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5685, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([84507459, 3, 3, 3],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([90948, 512, 7, 7],"float32"), Tensor([512],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([95070891, 2, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([95070891, 2, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([95070891, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([95070891, 2, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(x=Tensor([1, 190141782, 3, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 285212673, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 380283564],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 715827883],"float16"), weight=Tensor([1],"float16"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 536870913, 4],"float16"), weight=Tensor([1],"float16"), )
paddle.nn.functional.prelu(x=Tensor([1, 357913942, 3, 4],"float16"), weight=Tensor([1],"float16"), )
paddle.nn.functional.prelu(x=Tensor([178956971, 2, 3, 4],"float16"), weight=Tensor([1],"float16"), )
paddle.nn.functional.prelu(x=Tensor([95070891, 2, 3, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 715827883],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 715827883],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 536870913, 4],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 536870913, 4],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 357913942, 3, 4],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 357913942, 3, 4],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([178956971, 2, 3, 4],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([178956971, 2, 3, 4],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 107374183, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 107374183, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 143165577, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 143165577, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 178956971],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 178956971],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 95070891],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 95070891],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 76056713, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 76056713, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 57042535, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 57042535, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([38028357, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([38028357, 3, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([71582789, 3, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([71582789, 3, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 262144, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 262144, 16],"bfloat16"), Tensor([1, 1024, 262144, 16],"bfloat16"), Tensor([1, 1024, 262144, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1048576, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 131072],"bfloat16"), Tensor([1, 1024, 32, 131072],"bfloat16"), Tensor([1, 1024, 32, 131072],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 96],"bfloat16"), Tensor([1, 5592406, 8, 96],"bfloat16"), Tensor([1, 1024, 8, 96],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 131072, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 524288],"float16"), Tensor([1, 2048, 4, 524288],"float16"), Tensor([1, 2048, 4, 524288],"float16"), attn_mask=Tensor([1, 1, 2048, 524288],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 524288],"float16"), Tensor([1, 2048, 4, 524288],"float16"), Tensor([1, 2048, 4, 524288],"float16"), attn_mask=Tensor([1, 1, 2048, 524288],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 262144],"float16"), Tensor([1, 2048, 2, 262144],"float16"), Tensor([1, 2048, 2, 262144],"float16"), attn_mask=Tensor([1, 1, 2048, 262144],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 262144],"float16"), Tensor([1, 2048, 8, 262144],"float16"), Tensor([1, 2048, 8, 262144],"float16"), attn_mask=Tensor([1, 1, 2048, 262144],"float16"), is_causal=True, )
paddle.nn.functional.sequence_mask(Tensor([2, 1140850690],"int64"), maxlen=-1, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 59652324],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 59652324, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 59652324, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 39768216, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([39768216, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([760567127, 3],"int64"), maxlen=-1, dtype=VarType(int64), )
paddle.nn.functional.softmax(Tensor([1, 3, 2, 5, 143165577],"float32"), )
paddle.nn.functional.softmax(Tensor([1, 4294967295],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([10, 1, 429496730],"float16"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([10, 1, 429496730],"float32"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([10, 15375, 153, 97],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 16757, 153, 89],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 1725, 499, 499],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 429496730],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 429496730],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([10, 8, 107590, 499],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 153, 350897],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 154, 348618],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 186414, 153],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 294034, 97],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 320464, 89],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 9748, 153, 153],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([100, 15802, 38, 38],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 281692, 9, 9],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 150112, 38],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 38, 150112],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 633806, 9],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 4, 9, 633806],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 42949673],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([100, 42949673],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([1000, 4294968],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([1008, 323371, 7],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([1008, 7, 608698],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10186167, 4, 8, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([1024, 108, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 4, 11369, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 6, 7579, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 8, 1935, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 929, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([104, 127463, 18, 18],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 117324, 22],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 122911, 21],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 143396, 18],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 18, 143396],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 18, 143396],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 21, 122911],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 21, 122911],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 22, 117324],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 62328, 22],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 65296, 21],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 76179, 18],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 45330, 22, 22],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 49750, 21, 21],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 67715, 18, 18],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 85326, 22, 22],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 93646, 21, 21],"float16"), )
paddle.nn.functional.softmax(Tensor([1048577, 16, 128],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([1048577, 16, 128],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([1048577, 16, 128],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([108, 6, 49, 135267],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([109750, 165, 126],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([11, 4, 7, 13944700],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([11, 4, 7408122, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([11, 4233213, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([111802, 1, 16, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([111802, 16, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([112, 12, 16222, 197],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 123469, 165],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 161686, 126],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 165, 232412],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 186, 206172],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 989, 197, 197],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([11641334, 4, 7, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([11641334, 4, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([12, 12, 76088, 392],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([12, 2330, 392, 392],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([12184, 8, 153, 153],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([128, 1, 13976, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 16, 22737, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 16, 42800, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 684785, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 7425, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 13976, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 4, 10700, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 4, 5685, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 42800, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 465, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 16, 874, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1747, 8, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1857, 4, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 33554432],"float32"), )
paddle.nn.functional.softmax(Tensor([128, 3494, 4, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 4, 1857, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 4, 3494, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 4, 8, 11369, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 4, 8, 21400, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 465, 16, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 874, 16, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 929, 8, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([13, 1755155, 10, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 1772884, 99],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 3581949, 7, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([13, 4, 10, 8259553],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 2, 41297763],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 21939437, 2],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 3, 27531842],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 4387888, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 5, 1, 16519105],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 5, 1253683, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 6268411, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 6268411, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([13, 4, 7, 11799361],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([13, 43878873, 2, 2],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 5014729, 5, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 7, 47197443],"float32"), )
paddle.nn.functional.softmax(Tensor([131072, 8, 64, 64],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([134217729, 17],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([13755, 8, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([14, 2910334, 8, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 3326096, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 4, 5820667, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 4, 7, 10956550],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 4, 8, 9586981],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([142606337, 16],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([142606337, 4, 2, 2],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([14849, 16, 4, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([15211343, 3, 2, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([157904, 17, 400, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([158386, 6, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 10, 26843546],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([16, 1048577, 128],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 1048577, 128],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([16, 1048577, 128],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 11, 202566, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 11, 381301, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 11, 64, 202566],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 11, 64, 381301],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 134217729],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 16777217],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 16777217],"float16"), 1, )
paddle.nn.functional.softmax(Tensor([16, 16, 16777217],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 8388609],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 8388609],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([16, 16, 8388609],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 2097153, 128],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 2097153, 128],"float16"), 1, )
paddle.nn.functional.softmax(Tensor([16, 2097153, 128],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 2097153, 128],"float16"), 2, )
paddle.nn.functional.softmax(Tensor([16, 2097153, 128],"float16"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([16, 268435457],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 34817, 64, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 65536, 64, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16297867, 4, 5, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([16777216, 256, 1],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([16777217, 2, 1, 128],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([16777217, 256, 1],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([178956971, 3, 4],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([178956971, 6, 4],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([17895698, 6, 5, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([1814, 1, 81, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([182, 23598722, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([182, 23598722],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([182, 3, 4178941],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([182, 3, 7866241],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([190141782, 3, 4],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([19218, 8, 153, 97],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([2, 107374183, 5, 4],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 11184811, 102],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 11295552, 101],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 11408507, 100],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 1342178, 400, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 142606337, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 16, 1, 134217728],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 10, 13421773],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 10186167, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 11883862, 6],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 5, 26843546],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 162978670, 1, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16647161, 1, 129],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 17, 1600, 78952],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 17, 31580642, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 17, 400, 315807],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 17, 6400, 19738],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 190141782, 1, 6],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 22817014, 2, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 262144, 64, 128],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 262145, 64, 128],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 268435457, 4],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 285212673, 4],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 285212673, 4],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 285212673, 4],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 285212673, 4],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 3, 15211343, 5, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 38028357, 5],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 5, 71582789],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 5, 71582789],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 71582789, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 28633116, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 357913942],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 380283564],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 3, 380283564],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 3, 715827883],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 715827883],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 715827883],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 715827883],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 3, 715827883],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 33038210, 1, 65],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 335545, 1600, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 42949673, 2, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 524288, 64, 64],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 536870912, 4],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 536870913, 4],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 536870913, 4],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 536870913, 4],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 536870913, 4],"float16"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([2, 536870913, 4],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 53687092, 5, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 357913942],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 44739243, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 5, 35791395],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 5, 71582789],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 89478486, 4],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 8, 1, 268435456],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 2080896, 129],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 2097152, 128],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 2097153, 128],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 268435456],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 8, 4129777, 65],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 4194304, 64],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 64, 4194304],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 83887, 6400, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([20372334, 16, 1, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([20946, 8, 153, 89],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([2097153, 16, 128],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2097153, 16, 128],"float16"), 1, )
paddle.nn.functional.softmax(Tensor([2097153, 16, 128],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2097153, 16, 128],"float16"), 2, )
paddle.nn.functional.softmax(Tensor([2097153, 16, 128],"float16"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([2147483649],"float64"), axis=-1, )
paddle.nn.functional.softmax(Tensor([2157, 8, 499, 499],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([22369622, 1, 102],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([22591103, 1, 101],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([228170138, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([228170138, 10],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([228170138, 10],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([22817014, 1, 100],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([22817014, 100],"float32"), )
paddle.nn.functional.softmax(Tensor([2330, 12, 392, 392],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([237579, 4, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([23767723, 16, 1, 6],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([24, 178956971, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([24, 256, 371371],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([24, 256, 699051],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([252645135, 17],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([252645136, 17],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([27951, 1, 3136, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([27951, 16, 4, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([285212673, 8],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([28633116, 3, 2, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([294642, 16, 22, 22],"float32"), )
paddle.nn.functional.softmax(Tensor([29698, 4, 8, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([3, 16, 1398102, 64],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([3, 16, 64, 1398102],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([3, 349526, 64, 64],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([32, 256, 278529],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([32, 256, 524288],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([323371, 16, 21, 21],"float32"), )
paddle.nn.functional.softmax(Tensor([3292499, 7, 99],"float32"), )
paddle.nn.functional.softmax(Tensor([333096, 137, 50],"float32"), )
paddle.nn.functional.softmax(Tensor([33554433, 128],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([33554433, 128],"float16"), 1, )
paddle.nn.functional.softmax(Tensor([33554433, 128],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([35651585, 4, 16],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([35651585, 8, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float16"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float16"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float16"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float32"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([357913942, 3, 4],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([35791395, 6, 5, 4],"float16"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([3714, 300, 2048],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([38028357, 3, 4, 5],"float32"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([38028357, 3, 4, 5],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([39476, 17, 1600, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([395032, 4, 38, 38],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 1, 19513, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 36730, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 81, 22645, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 81, 42625, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 81, 94, 141023],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 81, 94, 74918],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1073741824, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 11408507, 50],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 137, 7837532],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 150, 13982, 512],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 150, 512, 13982],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 188, 5711393],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 241, 81, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 256, 4194304],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 35651585, 16],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4, 4, 268435456],"float32"), )
paddle.nn.functional.softmax(Tensor([4, 4, 268435456],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4, 4, 7, 38347923],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([4, 4096, 512, 512],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([4, 81, 13256072],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4129777, 26, 40],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([4161791, 8, 1, 129],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([4194305, 2, 1, 512],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([42107523, 102],"float16"), )
paddle.nn.functional.softmax(Tensor([4294967295],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4294967295],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([43383509, 99],"float16"), )
paddle.nn.functional.softmax(Tensor([440144, 16, 18, 18],"float32"), )
paddle.nn.functional.softmax(Tensor([46565335, 7, 7],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([5, 858993459],"float32"), axis=-1, dtype=VarType(float32), )
paddle.nn.functional.softmax(Tensor([50642, 11, 64, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([52, 1253683, 5, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([52, 4, 1567103, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([52, 4, 5, 1, 4129777],"float32"), )
paddle.nn.functional.softmax(Tensor([52, 4, 5, 313421, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([554619, 16, 22, 22],"float16"), )
paddle.nn.functional.softmax(Tensor([55901, 4, 8, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([5704254, 4, 10, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([59395, 1, 16, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([608698, 16, 21, 21],"float16"), )
paddle.nn.functional.softmax(Tensor([64, 131073, 1, 512],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 1677722, 40],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([64, 2, 1, 33554433],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 2, 131073, 256],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 2, 262145, 128],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 2, 65537, 512],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 25, 2684355],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([64, 256, 262144],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 256, 262145],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 262145, 1, 256],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 40, 1677722],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([64, 524289, 1, 128],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([64, 67108864, 1],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([65536, 16, 64, 64],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([65536, 8, 64, 128],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([65537, 8, 64, 128],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([6991, 300, 2048],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([7042289, 4, 9, 9],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([71582789, 3, 4, 5],"float32"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([71582789, 3, 4, 5],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([760567127, 3, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([760567127, 3],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([760567127, 3],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([760567127, 3],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([760567127, 3],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([8259553, 8, 1, 65],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([828505, 16, 18, 18],"float16"), )
paddle.nn.functional.softmax(Tensor([8388609, 2, 1, 256],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([89478486, 6, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([9223, 12, 197, 197],"float16"), axis=-1, )
paddle.nn.functional.softmax(Tensor([95326, 11, 64, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([964, 1, 81, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([9869, 17, 6400, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([13, 1218858, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([13, 4, 12, 6882961],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([13, 4, 3656573, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([16, 4, 12, 5592406],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([16, 4, 2970966, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([16, 990322, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([178956971, 3, 4],"float64"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([178956971, 3, 4],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([190141782, 3, 4],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 268435457, 4],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 285212673, 4],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 3, 357913942],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 715827883],"float16"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 715827883],"float16"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 715827883],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 536870913, 4],"float16"), )
paddle.nn.functional.softmax(x=Tensor([2, 536870913, 4],"float16"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([2, 536870913, 4],"float16"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 536870913, 4],"float16"), axis=2, )
paddle.nn.functional.softmax(x=Tensor([3, 4, 12, 29826162],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([3, 4, 15845149, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([3, 5281717, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([32, 4, 12, 2796203],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([357913942, 3, 4],"float16"), )
paddle.nn.functional.softmax(x=Tensor([357913942, 3, 4],"float16"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([357913942, 3, 4],"float16"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([357913942, 3, 4],"float16"), axis=2, )
paddle.nn.functional.softmax(x=Tensor([3961288, 4, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([4, 4, 12, 22369622],"float32"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([142606337, 16],"float32"), Tensor([142606337, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([142606337, 16],"float32"), Tensor([142606337, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 1114113, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 1114113, 64],"float32"), Tensor([2, 16, 1114113, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 1114113, 64],"float32"), Tensor([2, 16, 1114113, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 2228225],"float32"), Tensor([2, 16, 1, 2228225],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 557057, 32, 64],"float32"), Tensor([2, 557057, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 557057, 32, 64],"float32"), Tensor([2, 557057, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 557057, 32, 64],"float32"), Tensor([2, 557057, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([228170138, 10],"float32"), Tensor([228170138, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([69633, 16, 32, 64],"float32"), Tensor([69633, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([69633, 16, 32, 64],"float32"), Tensor([69633, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([69633, 16, 32, 64],"float32"), Tensor([69633, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([17825793, 128],"float32"), label=Tensor([17825793, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([228170138, 10],"float32"), label=Tensor([228170138, 1],"int64"), soft_label=False, )
paddle.nn.functional.square_error_cost(Tensor([1073741825, 2, 1, 2],"float16"), label=Tensor([1073741825, 2, 1, 2],"float16"), )
paddle.nn.functional.square_error_cost(Tensor([1],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([228171, 100, 100],"float16"), Tensor([228171, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([228171, 100, 100],"float32"), Tensor([228171, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float16"), label=Tensor([3, 2, 357913942, 2],"float16"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 715827883],"float16"), label=Tensor([3, 2, 1, 715827883],"float16"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 357913942, 2],"float16"), label=Tensor([3, 2, 357913942, 2],"float16"), )
paddle.nn.functional.square_error_cost(Tensor([3, 715827883, 1, 2],"float16"), label=Tensor([3, 715827883, 1, 2],"float16"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 2852127],"float32"), Tensor([8, 100, 2852127],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 2852127, 100],"float32"), Tensor([8, 2852127, 100],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 1140850690],"float32"), label=Tensor([2, 1140850690],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 1],"float32"), label=Tensor([2, 1140850690],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2281701379, 1],"float32"), label=Tensor([2281701379, 1],"float32"), )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 1244, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 14, 1244],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 14, 2341],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 2341, 14],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 10700, 56, 56],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 171197, 14, 14],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 2048, 1244, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 2048, 2341, 7],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 2048, 7, 1244],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 2048, 7, 2341],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 22737, 28, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([128, 22737, 28, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 1244, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 2341, 56],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 2487, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 28, 2487],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 56, 1244],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 56, 2341],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 363792, 7, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 42800, 28, 28],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 512, 1244, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 512, 2341, 28],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 512, 28, 1244],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 512, 28, 2341],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 5685, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 64, 4974, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 64, 56, 4974],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 64, 56, 9363],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 64, 9363, 56],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 684785, 7, 7],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 90948, 14, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 1024, 14, 9948],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 1024, 9948, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 181896, 28, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 2048, 7, 9948],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 2048, 9948, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 256, 19895, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 256, 28, 19895],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 256, 56, 9948],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 256, 9948, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 2910334, 7, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 45474, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 512, 28, 9948],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 512, 9948, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 64, 39790, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 64, 56, 39790],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([16, 727584, 14, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([21400, 1024, 14, 14],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([21400, 1024, 14, 14],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([21400, 64, 56, 56],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([21400, 64, 56, 56],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 1249, 14],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 14, 1249],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 14, 664],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 664, 14],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 12127, 28, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 194023, 7, 7],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 2048, 1249, 7],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 2048, 664, 7],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 2048, 7, 1249],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 2048, 7, 664],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 22827, 28, 28],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 1249, 56],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 56, 1249],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 56, 664],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 664, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 3032, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 365219, 7, 7],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 48506, 14, 14],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 1249, 28],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 28, 1249],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 28, 664],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 664, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 5707, 56, 56],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 64, 2653, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 64, 4994, 56],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 64, 56, 2653],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 64, 56, 4994],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 91305, 14, 14],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([32, 256, 28, 9948],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([32, 256, 9948, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([32, 90948, 28, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([42800, 2048, 7, 7],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([42800, 2048, 7, 7],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([64, 1024, 14, 2487],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 1024, 2487, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 11369, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 181896, 14, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 2048, 2487, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 2048, 7, 2487],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 256, 2487, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 256, 28, 4974],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 256, 4974, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 256, 56, 2487],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 45474, 28, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 512, 2487, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 512, 28, 2487],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 64, 56, 9948],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 64, 9948, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 727584, 7, 7],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(x=Tensor([119304648, 4, 3, 3],"float16"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([4, 119304648, 3, 3],"float16"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([4, 4, 3, 89478486],"float16"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([4, 4, 89478486, 3],"float16"), seg_num=4, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([858993460, 5],"float16"), positive=Tensor([858993460, 5],"float16"), negative=Tensor([858993460, 5],"float16"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([858993460, 5],"float16"), positive=Tensor([858993460, 5],"float16"), negative=Tensor([858993460, 5],"float16"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.zeropad2d(Tensor([15158, 3, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([15158, 3, 224, 224],"int32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 11369, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 11369, 224, 224],"int32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 848848],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 848848],"int32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 848848, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 848848, 224],"int32"), list[2,2,2,2,], )
paddle.nn.quant.weight_quantize(Tensor([128, 33554432],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 33554432],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 33554432],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 33554432],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 33554432],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int4", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([16777216, 256],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([256, 16777216],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([4194304, 1024],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 8388608],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int4", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 67108864],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([67108864, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([8388608, 512],"float16"), algo="weight_only_int8", )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nonzero(Tensor([1, 2, 28, 76695845],"float32"), )
paddle.nonzero(Tensor([1, 2, 76695845, 28],"float32"), )
paddle.nonzero(Tensor([1, 4294967295],"float32"), )
paddle.nonzero(Tensor([1, 4294967295],"int32"), )
paddle.nonzero(Tensor([1, 5478275, 28, 28],"float32"), )
paddle.nonzero(Tensor([10, 2, 28, 7669585],"float32"), )
paddle.nonzero(Tensor([10, 2, 7669585, 28],"float32"), )
paddle.nonzero(Tensor([10, 429496730],"float32"), as_tuple=False, )
paddle.nonzero(Tensor([10, 547828, 28, 28],"float32"), )
paddle.nonzero(Tensor([106, 51682, 28, 28],"float32"), )
paddle.nonzero(Tensor([106, 80, 18089, 28],"float32"), )
paddle.nonzero(Tensor([106, 80, 28, 18089],"float32"), )
paddle.nonzero(Tensor([10956550, 2, 14, 14],"float32"), )
paddle.nonzero(Tensor([11, 1992100, 14, 14],"float32"), )
paddle.nonzero(Tensor([11, 2, 13944700, 14],"float32"), )
paddle.nonzero(Tensor([11, 2, 14, 13944700],"float32"), )
paddle.nonzero(Tensor([11, 2, 28, 6972350],"float32"), )
paddle.nonzero(Tensor([11, 2, 6972350, 28],"float32"), )
paddle.nonzero(Tensor([11, 498025, 28, 28],"float32"), )
paddle.nonzero(Tensor([1431655765, 3],"float32"), True, )
paddle.nonzero(Tensor([21474837, 200],"float32"), )
paddle.nonzero(Tensor([21913099, 196],"float32"), )
paddle.nonzero(Tensor([22369622, 192],"float32"), )
paddle.nonzero(Tensor([268435457, 2, 2, 2],"float64"), True, )
paddle.nonzero(Tensor([2739138, 2, 28, 28],"float32"), )
paddle.nonzero(Tensor([3, 1431655765],"float32"), True, )
paddle.nonzero(Tensor([3, 178956971, 2, 2],"float64"), True, )
paddle.nonzero(Tensor([3, 2, 178956971, 2],"float64"), True, )
paddle.nonzero(Tensor([3, 2, 2, 178956971],"float64"), True, )
paddle.nonzero(Tensor([4294967295, 1],"int32"), )
paddle.nonzero(Tensor([4294967295],"bool"), )
paddle.nonzero(Tensor([4294967295],"bool"), as_tuple=False, )
paddle.nonzero(Tensor([4294967295],"int32"), True, )
paddle.nonzero(Tensor([42949673, 100],"float32"), )
paddle.nonzero(Tensor([429496730, 10],"float32"), as_tuple=False, )
paddle.nonzero(Tensor([68479, 80, 28, 28],"float32"), )
paddle.nonzero(x=Tensor([12, 357913942],"bfloat16"), )
paddle.nonzero(x=Tensor([1431655765, 3],"float32"), as_tuple=False, )
paddle.nonzero(x=Tensor([1431655765, 3],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([153391690, 4, 7],"float16"), )
paddle.nonzero(x=Tensor([153391690, 4, 7],"float32"), )
paddle.nonzero(x=Tensor([2, 10, 214748365],"float32"), )
paddle.nonzero(x=Tensor([2, 1073741824, 2],"float32"), )
paddle.nonzero(x=Tensor([2147483649],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([214748365, 10, 2],"float32"), )
paddle.nonzero(x=Tensor([268435457, 2, 2, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([268435457, 8],"float64"), )
paddle.nonzero(x=Tensor([3, 1431655765],"float32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 1431655765],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 178956971, 2, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 2, 178956971, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 2, 2, 178956971],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 204522253, 7],"float16"), )
paddle.nonzero(x=Tensor([3, 204522253, 7],"float32"), )
paddle.nonzero(x=Tensor([3, 4, 357913942],"float16"), )
paddle.nonzero(x=Tensor([3, 4, 357913942],"float32"), )
paddle.nonzero(x=Tensor([3, 715827883],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 715827883],"int64"), as_tuple=False, )
paddle.nonzero(x=Tensor([477218589, 9],"bfloat16"), )
paddle.nonzero(x=Tensor([715827883, 3],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([715827883, 3],"int64"), as_tuple=False, )
paddle.nonzero(x=Tensor([8, 268435457],"float64"), )
paddle.polygamma(Tensor([2281701379],"float32"), 3, )
paddle.pow(Tensor([5, 122713352, 7],"float16"), Tensor([7],"float16"), )
paddle.pow(Tensor([5, 9, 95443718],"float16"), Tensor([95443718],"float16"), )
paddle.pow(Tensor([68174085, 9, 7],"float16"), Tensor([7],"float16"), )
paddle.pow(x=Tensor([1073741825, 2, 2],"float16"), y=Tensor([2],"float16"), )
paddle.pow(x=Tensor([2, 1073741825, 2],"float16"), y=Tensor([2],"float16"), )
paddle.prod(Tensor([10, 10, 22817014],"float32"), )
paddle.prod(Tensor([71582789, 6, 10],"float16"), list[0,], False, )
paddle.put_along_axis(Tensor([2281701379],"float32"), Tensor([1],"int64"), Tensor([1],"float32"), 0, "assign", )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([1, 4],"int64"), Tensor([2, 1140850690],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([1, 4],"int64"), Tensor([2, 1140850690],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([2, 3],"int64"), Tensor([2, 1140850690],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([2, 3],"int64"), Tensor([2, 1140850690],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([456340276, 3],"int64"), Tensor([456340276, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([456340276, 3],"int64"), Tensor([456340276, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([760567127, 3],"int64"), Tensor([760567127, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([760567127, 3],"int64"), Tensor([760567127, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([1, 4],"int64"), Tensor([2, 760567127],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([1, 4],"int64"), Tensor([2, 760567127],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([2, 3],"int64"), Tensor([2, 760567127],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([2, 3],"int64"), Tensor([2, 760567127],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([4294967297],"float16"), Tensor([1],"int64"), Tensor([1],"float16"), 0, "assign", )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "assign", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([2, 456340276],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([2, 456340276],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([4],"float16"), Tensor([1],"int64"), Tensor([4294967297],"float16"), 0, "assign", )
paddle.put_along_axis(Tensor([4],"float32"), Tensor([1],"int64"), Tensor([2281701379],"float32"), 0, "assign", )
paddle.remainder(Tensor([1, 1, 5],"int32"), Tensor([2, 107374183, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 1, 5],"int32"), Tensor([2, 3, 143165577, 5],"int32"), )
paddle.remainder(Tensor([1, 1, 5],"int32"), Tensor([71582789, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 1, 5],"int64"), Tensor([2, 3, 71582789, 5],"int64"), )
paddle.remainder(Tensor([1, 1, 5],"int64"), Tensor([2, 53687092, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 1, 5],"int64"), Tensor([35791395, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 1, 95070891],"int32"), Tensor([2, 3, 4, 95070891],"int32"), )
paddle.remainder(Tensor([1, 1, 95070891],"int64"), Tensor([2, 3, 4, 95070891],"int64"), )
paddle.remainder(Tensor([1, 2, 107374183, 4, 5],"int32"), Tensor([1, 2, 107374183, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 143165577, 5],"int32"), Tensor([1, 2, 3, 143165577, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 178956971],"int32"), Tensor([1, 2, 3, 4, 178956971],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([35791395, 2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int64"), Tensor([17895698, 2, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 89478486],"int64"), Tensor([1, 2, 3, 4, 89478486],"int64"), )
paddle.remainder(Tensor([1, 2, 3, 71582789, 5],"int64"), Tensor([1, 2, 3, 71582789, 5],"int64"), )
paddle.remainder(Tensor([1, 2, 53687092, 4, 5],"int64"), Tensor([1, 2, 53687092, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 3, 143165577, 5],"int64"), Tensor([2, 1, 143165577, 1],"int64"), )
paddle.remainder(Tensor([1, 3, 286331153, 5],"int32"), Tensor([2, 1, 286331153, 1],"int32"), )
paddle.remainder(Tensor([1, 35791395, 3, 4, 5],"int64"), Tensor([1, 35791395, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 71582789, 3, 4, 5],"int32"), Tensor([1, 71582789, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([17895698, 2, 3, 4, 5],"int64"), Tensor([17895698, 2, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([2, 3, 4, 95070891],"int32"), Tensor([1, 1, 95070891],"int32"), )
paddle.remainder(Tensor([2, 3, 4, 95070891],"int64"), Tensor([1, 1, 95070891],"int64"), )
paddle.remainder(Tensor([2147483649],"int64"), Tensor([2147483649],"int64"), None, )
paddle.remainder(Tensor([35791395, 2, 3, 4, 5],"int32"), Tensor([35791395, 2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([4294967295],"int32"), Tensor([4294967295],"int32"), )
paddle.roll(Tensor([1, 10376, 56, 77, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 114131, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 114131, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 11414, 56, 70, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 11414, 70, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 12682, 56, 63, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 12682, 63, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 14267, 56, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 1369569],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 1369569],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 21, 913046],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 21, 913046],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 24967, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 24967, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 49933, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 49933, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 2739138],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 2739138],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 14, 913046],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 14, 913046],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 33289, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 33289, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 24967, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 24967, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 28, 342393],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 28, 342393],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 35, 273914],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 35, 273914],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 42, 228262],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 42, 228262],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 49933, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 49933, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 21, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 21, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 42, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 42, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 28, 273914],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 28, 273914],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 39946, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 39946, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 36315, 77, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 39946, 35, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 39946, 35, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 39946, 70, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 44385, 63, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 49933, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 56, 85599],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 63, 76088],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 70, 68479],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 77, 62254],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 63, 44385, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 63, 56, 76088],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 2739138],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 2739138],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 70, 39946, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 70, 56, 68479],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 19022, 28, 42, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 19022, 28, 42, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 28, 35, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 28, 35, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 35, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 35, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 28533, 28, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 28533, 28, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 14, 21, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 14, 21, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 21, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 21, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([10700, 56, 56, 128],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([10700, 56, 56, 128],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([114131, 7, 7, 768],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([114131, 7, 7, 768],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1189, 16, 28, 42, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1189, 16, 28, 42, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([128, 14, 14, 171197],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 14, 171197],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 4682, 512],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 4682, 512],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 6242, 384],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 6242, 384],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 28, 42800],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 28, 42800],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 4682, 256],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 4682, 256],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 6242, 192],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 6242, 192],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 14, 512],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 14, 512],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 28, 256],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 28, 256],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 56, 128],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 56, 128],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 7, 1024],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 7, 1024],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 4682, 128],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 4682, 128],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 10700],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 10700],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 6242, 96],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 6242, 96],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 14, 384],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 14, 384],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 28, 192],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 28, 192],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 56, 96],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 56, 96],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 7, 768],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 7, 768],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 4682, 1024],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 4682, 1024],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 6242, 768],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 6242, 768],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 7, 684785],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 7, 684785],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([14267, 56, 56, 96],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([14267, 56, 56, 96],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1427, 16, 28, 35, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1427, 16, 28, 35, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1427, 16, 35, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1427, 16, 35, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1784, 16, 28, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1784, 16, 28, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([21400, 28, 28, 256],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([21400, 28, 28, 256],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([2378, 16, 14, 21, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([2378, 16, 14, 21, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([2378, 16, 21, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([2378, 16, 21, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([28533, 28, 28, 192],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([28533, 28, 28, 192],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([3567, 16, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([42800, 14, 14, 512],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([42800, 14, 14, 512],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([57066, 14, 14, 384],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([57066, 14, 14, 384],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([649, 16, 56, 77, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([7134, 16, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([7134, 16, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([714, 16, 56, 70, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([714, 16, 70, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([793, 16, 56, 63, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([793, 16, 63, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([85599, 7, 7, 1024],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([85599, 7, 7, 1024],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([892, 16, 56, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(x=Tensor([1431655766, 3],"float16"), shifts=1, axis=None, )
paddle.rsqrt(Tensor([10000, 143166, 3],"float16"), )
paddle.rsqrt(Tensor([10000, 2, 214749],"float16"), )
paddle.rsqrt(Tensor([1431655766, 3],"float16"), )
paddle.rsqrt(Tensor([16, 268435457],"float16"), )
paddle.rsqrt(Tensor([2, 2147483649],"float16"), )
paddle.rsqrt(Tensor([32, 134217729],"float16"), )
paddle.rsqrt(Tensor([4294967297, 1],"float16"), )
paddle.rsqrt(Tensor([715827883, 2, 3],"float16"), )
paddle.rsqrt(x=Tensor([2, 1073741825, 2],"float16"), )
paddle.rsqrt(x=Tensor([2, 3, 715827883],"float16"), )
paddle.rsqrt(x=Tensor([2, 715827883, 3],"float16"), )
paddle.rsqrt(x=Tensor([477218589, 3, 3],"float16"), )
paddle.rsqrt(x=Tensor([715827883, 3, 2],"float16"), )
paddle.scatter_nd_add(Tensor([1, 1140850690, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([2, 1140850690, 4],"int64"), Tensor([2, 1140850690],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([2, 285212673, 4],"int64"), Tensor([2, 285212673],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4],"float64"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4],"int64"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 285212673, 4],"float32"), index=Tensor([2, 285212673],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 285212673, 4],"int32"), index=Tensor([2, 285212673],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 285212673, 4],"int64"), index=Tensor([2, 285212673],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 536870913, 4],"float16"), index=Tensor([2, 536870913],"int64"), updates=Tensor([2],"float16"), )
paddle.scatter_nd_add(x=Tensor([2, 67108865, 4, 2, 4],"float16"), index=Tensor([2, 67108865],"int64"), updates=Tensor([2, 2, 4],"float16"), )
paddle.shard_index(input=Tensor([1140850690, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.slice(Tensor([1, 4, 1073741824],"float32"), axes=list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([143165577, 5, 6],"float32"), axes=list[0,1,2,], starts=list[-3,0,2,], ends=list[3,2,4,], )
paddle.slice(Tensor([214749, 2, 100, 100],"float16"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([214749, 2, 100, 100],"float16"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([214749, 2, 100, 100],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([214749, 2, 100, 100],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([3, 715827883],"int64"), list[1,], list[-3,], list[2,], )
paddle.slice(Tensor([4, 107374183, 5],"int64"), list[-3,-2,-1,], list[1,-3,2,], list[3,3,4,], )
paddle.slice(Tensor([536870913, 4],"int64"), list[-2,-1,], list[-3,0,], list[2,-1,], )
paddle.slice_scatter(Tensor([8, 9, 59652324],"float16"), Tensor([1, 9, 1],"float16"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.sort(Tensor([1, 4294967295],"float16"), descending=True, )
paddle.sort(Tensor([1, 4294967295],"float32"), descending=True, )
paddle.sort(Tensor([2147483649],"float64"), )
paddle.sort(Tensor([2147483649],"float64"), 0, )
paddle.sort(Tensor([2147483649],"float64"), axis=0, )
paddle.sort(Tensor([3, 760567127],"float32"), descending=True, )
paddle.sort(Tensor([4294967295],"bfloat16"), )
paddle.sort(Tensor([4294967295],"float16"), )
paddle.sort(Tensor([4294967295],"float32"), )
paddle.sort(Tensor([4294967295],"float32"), 0, )
paddle.sort(Tensor([4294967295],"int32"), )
paddle.sort(Tensor([5, 456340276],"float32"), descending=True, )
paddle.stack(list[Tensor([1, 128, 17825793],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2281701379],"float32"),], )
paddle.stack(list[Tensor([1, 2281701379],"float32"),], axis=1, )
paddle.stack(list[Tensor([1, 71303169, 32],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2281701379, 1],"float32"),], )
paddle.stack(list[Tensor([2281701379],"float32"),], )
paddle.stack(list[Tensor([2281701379],"float32"),], 0, )
paddle.stack(list[Tensor([557057, 128, 32],"float32"),], axis=-1, )
paddle.std(Tensor([1, 107374183, 4, 10],"float16"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 357913942],"float16"), 2, True, False, )
paddle.std(Tensor([35791395, 3, 4, 10],"float16"), 2, True, False, )
paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=0, )
paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=0, )
paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=0, unbiased=False, )
paddle.strided_slice(Tensor([6, 357913942],"int64"), axes=list[0,1,], starts=list[8,-1,], ends=list[1,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 380283564],"int64"), axes=list[0,1,], starts=list[8,-1,], ends=list[1,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 44739243, 8],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 47535446, 8],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 7, 51130564],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 7, 54326224],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(x=Tensor([3, 23860930, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 23860930, 5, 6],"int64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 47721859, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 47721859, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([5, 1491309, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 1118482, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 1118482, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 1118482],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 1118482],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 372828, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 372828, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 745655, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 745655, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([6, 380283564],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[1,-2,], )
paddle.strided_slice(x=Tensor([6, 380283564],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[4,-2,], )
paddle.subtract(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 2535224, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 30],"float32"), Tensor([2535224, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 76056713],"float32"), Tensor([1, 1, 30, 76056713],"float32"), )
paddle.subtract(Tensor([1, 1, 76056713, 30],"float32"), Tensor([1, 1, 76056713, 30],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([4, 570425345],"float32"), )
paddle.subtract(Tensor([1, 2228225, 32, 32],"float32"), Tensor([1, 2228225, 32, 32],"float32"), )
paddle.subtract(Tensor([1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.subtract(Tensor([1, 2535224, 30, 30],"float32"), Tensor([1, 2535224, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 3, 23767723, 32],"float32"), Tensor([1, 3, 23767723, 32],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 256],"float32"), Tensor([11606, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 2970966],"float32"), Tensor([1, 3, 256, 2970966],"float32"), )
paddle.subtract(Tensor([1, 3, 2970966, 256],"float32"), Tensor([1, 3, 2970966, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 32, 23767723],"float32"), Tensor([1, 3, 32, 23767723],"float32"), )
paddle.subtract(Tensor([1, 3, 32, 32],"float32"), Tensor([742742, 3, 32, 32],"float32"), )
paddle.subtract(Tensor([1, 34817, 256, 256],"float32"), Tensor([1, 34817, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 4772186, 30, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 64, 64, 1],"float32"), Tensor([1, 64, 64, 1048577],"float16"), )
paddle.subtract(Tensor([1, 64, 64, 1],"float32"), Tensor([1048577, 64, 64, 1],"float16"), )
paddle.subtract(Tensor([10, 1],"float32"), Tensor([10, 228170138],"float32"), )
paddle.subtract(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), )
paddle.subtract(Tensor([10, 429496730],"float32"), Tensor([10, 1],"float32"), )
paddle.subtract(Tensor([100, 22817014, 1],"float32"), Tensor([100, 22817014, 1],"float32"), )
paddle.subtract(Tensor([100, 376, 1],"float32"), Tensor([100, 376, 60684],"float32"), )
paddle.subtract(Tensor([100, 376, 60684],"float32"), Tensor([100, 376, 60684],"float32"), )
paddle.subtract(Tensor([100, 42949673],"float32"), Tensor([100, 1],"float32"), )
paddle.subtract(Tensor([11606, 3, 256, 256],"float32"), Tensor([11606, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([11883862, 96, 2],"float32"), Tensor([11883862, 96, 2],"float32"), )
paddle.subtract(Tensor([119304648, 3, 3, 4],"float32"), Tensor([119304648, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([119304648, 3, 3, 4],"float32"), Tensor([119304648, 3, 1, 4],"float32"), )
paddle.subtract(Tensor([1398102, 3, 32, 32],"float32"), Tensor([1, 3, 32, 32],"float32"), )
paddle.subtract(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), name="Normal_log_prob", )
paddle.subtract(Tensor([152113426, 15],"float32"), Tensor([152113426, 15],"float32"), )
paddle.subtract(Tensor([16, 142606337, 1],"float32"), Tensor([16, 142606337, 1],"float32"), )
paddle.subtract(Tensor([16, 71303169, 2],"float32"), Tensor([16, 71303169, 2],"float32"), )
paddle.subtract(Tensor([16, 96, 1485483],"float32"), Tensor([16, 96, 1485483],"float32"), )
paddle.subtract(Tensor([16, 96, 1],"float32"), Tensor([16, 96, 1485483],"float32"), )
paddle.subtract(Tensor([16, 96, 2796203],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.subtract(Tensor([17, 134217729, 1],"float32"), Tensor([17, 134217729, 1],"float32"), )
paddle.subtract(Tensor([17, 376, 1],"float32"), Tensor([17, 376, 356963],"float32"), )
paddle.subtract(Tensor([17, 376, 356963],"float32"), Tensor([17, 376, 356963],"float32"), )
paddle.subtract(Tensor([1],"float16"), Tensor([4294967297],"float16"), )
paddle.subtract(Tensor([1],"float16"), Tensor([4294967297],"float16"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([1],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([2281701379],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([2281701379],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([1],"float32"), Tensor([2281701379],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([2, 10, 114085069],"float32"), Tensor([2, 10, 114085069],"float32"), )
paddle.subtract(Tensor([2, 114085069, 10],"float32"), Tensor([2, 114085069, 10],"float32"), )
paddle.subtract(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 178956971, 3, 4],"float32"), Tensor([2, 178956971, 1, 1],"float32"), )
paddle.subtract(Tensor([2, 178956971, 3, 4],"float32"), Tensor([2, 178956971, 1, 4],"float32"), )
paddle.subtract(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), )
paddle.subtract(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3, 178956971, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 178956971, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.subtract(Tensor([2, 3, 178956971, 4],"float32"), Tensor([2, 3, 178956971, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 238609295],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 238609295],"float32"), Tensor([2, 3, 1, 238609295],"float32"), )
paddle.subtract(Tensor([2049, 32, 256, 256],"float16"), Tensor([2049, 32, 256, 256],"float16"), )
paddle.subtract(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), )
paddle.subtract(Tensor([21846, 3, 256, 256],"float32"), Tensor([1, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([228170138, 10],"float32"), Tensor([228170138, 10],"float32"), )
paddle.subtract(Tensor([22817014, 10, 10],"float32"), Tensor([22817014, 10, 10],"float32"), )
paddle.subtract(Tensor([23211, 4, 3, 64, 128],"float32"), Tensor([23211, 4, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([23767723, 96, 1],"float32"), Tensor([23767723, 96, 1],"float32"), )
paddle.subtract(Tensor([2535224, 1, 30, 30],"float32"), Tensor([2535224, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([286331153, 15],"float32"), Tensor([15],"float32"), )
paddle.subtract(Tensor([3, 1431655766],"float16"), Tensor([3, 1431655766],"float16"), name="Normal_log_prob", )
paddle.subtract(Tensor([30948, 3, 3, 64, 128],"float32"), Tensor([30948, 3, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([4097, 256, 64, 64],"float16"), Tensor([4097, 256, 64, 64],"float16"), )
paddle.subtract(Tensor([4097, 64, 128, 128],"float16"), Tensor([4097, 64, 128, 128],"float16"), )
paddle.subtract(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.subtract(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), name="Normal_log_prob", )
paddle.subtract(Tensor([4772186, 1, 30, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([6068355, 376, 1],"float32"), Tensor([6068355, 376, 1],"float32"), )
paddle.subtract(Tensor([64, 1451, 3, 64, 128],"float32"), Tensor([64, 1451, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 1451, 64, 128],"float32"), Tensor([64, 3, 1451, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 30948, 128],"float32"), Tensor([64, 3, 3, 30948, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 64, 61896],"float32"), Tensor([64, 3, 3, 64, 61896],"float32"), )
paddle.subtract(Tensor([64, 4, 1089, 64, 128],"float32"), Tensor([64, 4, 1089, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 23211, 128],"float32"), Tensor([64, 4, 3, 23211, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 64, 46422],"float32"), Tensor([64, 4, 3, 64, 46422],"float32"), )
paddle.subtract(Tensor([742742, 3, 32, 32],"float32"), Tensor([742742, 3, 32, 32],"float32"), )
paddle.subtract(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([8, 128, 64, 65537],"float16"), Tensor([8, 128, 64, 65537],"float16"), )
paddle.subtract(Tensor([8, 128, 65537, 64],"float16"), Tensor([8, 128, 65537, 64],"float16"), )
paddle.subtract(Tensor([8, 131073, 64, 64],"float16"), Tensor([8, 131073, 64, 64],"float16"), )
paddle.subtract(Tensor([8, 256, 32769, 64],"float16"), Tensor([8, 256, 32769, 64],"float16"), )
paddle.subtract(Tensor([8, 256, 64, 32769],"float16"), Tensor([8, 256, 64, 32769],"float16"), )
paddle.subtract(Tensor([8, 32, 256, 65537],"float16"), Tensor([8, 32, 256, 65537],"float16"), )
paddle.subtract(Tensor([8, 32, 65537, 256],"float16"), Tensor([8, 32, 65537, 256],"float16"), )
paddle.subtract(Tensor([8, 32769, 128, 128],"float16"), Tensor([8, 32769, 128, 128],"float16"), )
paddle.subtract(Tensor([8, 64, 128, 65537],"float16"), Tensor([8, 64, 128, 65537],"float16"), )
paddle.subtract(Tensor([8, 64, 65537, 128],"float16"), Tensor([8, 64, 65537, 128],"float16"), )
paddle.subtract(Tensor([8, 8193, 256, 256],"float16"), Tensor([8, 8193, 256, 256],"float16"), )
paddle.subtract(Tensor([8193, 128, 64, 64],"float16"), Tensor([8193, 128, 64, 64],"float16"), )
paddle.subtract(x=Tensor([1140850690, 2],"float32"), y=Tensor([1140850690, 2],"float32"), )
paddle.subtract(x=Tensor([2, 1140850690],"float32"), y=Tensor([2, 1140850690],"float32"), )
paddle.subtract(x=Tensor([2, 2147483649],"float16"), y=Tensor([2, 2147483649],"float16"), )
paddle.subtract(x=Tensor([2147483649, 2],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.subtract(x=Tensor([4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.t(Tensor([1, 4294967297],"float16"), )
paddle.take_along_axis(Tensor([1024],"float32"), Tensor([2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([1184],"float32"), Tensor([2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([16384],"float32"), Tensor([2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([1],"float32"), Tensor([2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2281701379],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2281701379],"float32"), Tensor([1],"int64"), 0, )
paddle.take_along_axis(Tensor([2281701379],"float32"), Tensor([2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([4294967297],"float16"), Tensor([2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([4],"float32"), Tensor([2281701379],"int64"), 0, )
paddle.tensordot(Tensor([1, 1, 1, 5],"float16"), Tensor([1, 5, 1, 858993460],"float16"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([429496730, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float16"), Tensor([5, 5, 34359739, 5],"float16"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 1, 1],"float16"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 858993460, 5],"float16"), Tensor([1, 5, 858993460, 1],"float16"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 858993460, 1, 5],"float16"), Tensor([1, 5, 1, 1],"float16"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 858993460, 1, 5],"float16"), Tensor([1, 5, 1, 1],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 858993460, 1, 5],"float16"), Tensor([1, 5, 1, 1],"float16"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 858993460, 1, 5],"float16"), Tensor([1, 858993460, 1, 1],"float16"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 858993460, 1, 5],"float16"), Tensor([1, 858993460, 1, 1],"float16"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 858993460, 1, 5],"float16"), Tensor([1, 858993460, 1, 1],"float16"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([171798692, 5, 5, 1],"float16"), Tensor([171798692, 1, 1, 1],"float16"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([171798692, 5, 5, 1],"float16"), Tensor([171798692, 5, 1, 5],"float16"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([171798692, 5, 5, 1],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([171798692, 5, 5, 1],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1140850690, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2281701379],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2281701379],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2281701379],"int64"),), )
paddle.tensordot(Tensor([34359739, 5, 5, 5],"float16"), Tensor([34359739, 1, 1, 5],"float16"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 171798692, 1, 5],"float16"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 171798692, 1, 5],"float16"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 171798692, 1, 5],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 171798692, 5, 1],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 171798692, 1],"float16"), Tensor([1, 1, 171798692, 1],"float16"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float16"), Tensor([171798692, 5, 1, 5],"float16"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float16"), Tensor([5, 5, 1, 171798692],"float16"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 2147483649, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 2147483649, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 2147483649, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 2147483649, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([2147483649, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([2147483649, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([2147483649, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([85899346, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 34359739],"float16"), Tensor([5, 5, 1, 34359739],"float16"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 34359739],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 34359739],"float16"), Tensor([5, 5, 1, 5],"float16"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 85899346, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 85899346, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 85899346, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 85899346, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 85899346, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([85899346, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([85899346, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([858993460, 1, 1, 5],"float16"), Tensor([858993460, 5, 1, 1],"float16"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(x=Tensor([2, 3, 4, 2],"float16"), y=Tensor([8, 67108865, 4, 2],"float16"), axes=list[2,3,], )
paddle.tensordot(x=Tensor([2, 38347923, 4, 2],"float16"), y=Tensor([2, 38347923, 8, 7],"float16"), axes=list[0,1,], )
paddle.tensordot(x=Tensor([2, 67108865, 4, 2],"float16"), y=Tensor([8, 67108865, 4, 2],"float16"), axes=list[tuple(1,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float16"), y=Tensor([76695845, 7, 4, 2],"float16"), axes=list[tuple(1,2,3,),], )
paddle.tensordot(x=Tensor([4, 2, 3, 5, 35791395],"float16"), y=Tensor([2, 4, 3, 5, 8],"float16"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([71582789, 4, 3, 5],"float16"), y=Tensor([71582789, 4, 1, 5],"float16"), axes=list[0,2,], )
paddle.tensordot(x=Tensor([76695845, 7, 4, 2],"float16"), y=Tensor([8, 7, 4, 2],"float16"), axes=list[tuple(1,2,3,),], )
paddle.tile(Tensor([1, 1, 2281701379],"int64"), list[1,1,1,], )
paddle.tile(Tensor([1, 2281701379, 1],"int64"), list[1,1,1,], )
paddle.tile(Tensor([2281701379, 1, 1],"int64"), list[1,1,1,], )
paddle.tile(Tensor([2281701379],"int64"), repeat_times=list[1,1,], )
paddle.topk(Tensor([1, 1, 2281701379],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 1, 2281701379],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 1, 4294967295],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 103, 22152441],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 106106, 21504],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 108, 21126865],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 113, 20192048],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 115943, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 116, 19669840],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 127827, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 141636, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 157811, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 176923, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 19501722, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 1973791, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 21126865, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 2281701379],"float32"), 300, axis=1, )
paddle.topk(Tensor([1, 2281701379],"float32"), 4, axis=1, )
paddle.topk(Tensor([1, 2281701379],"float32"), 799, )
paddle.topk(Tensor([1, 2281701379],"float32"), 8, axis=1, )
paddle.topk(Tensor([1, 2281701379],"float32"), 900, axis=1, )
paddle.topk(Tensor([1, 2281701379],"float32"), 9408, axis=1, )
paddle.topk(Tensor([1, 2281701379],"float32"), k=1, )
paddle.topk(Tensor([1, 2281701379],"float32"), k=5, )
paddle.topk(Tensor([1, 2281701379],"float32"), k=50, )
paddle.topk(Tensor([1, 22817014, 100],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 32299, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 34647, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 36709123, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 3715370, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 39768216, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 4194304, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 4294967295],"float16"), k=1, )
paddle.topk(Tensor([1, 4294967295],"float16"), k=5, )
paddle.topk(Tensor([1, 4294967295],"float32"), 300, axis=1, )
paddle.topk(Tensor([1, 4294967295],"float32"), 4, axis=1, )
paddle.topk(Tensor([1, 4294967295],"float32"), 799, )
paddle.topk(Tensor([1, 4294967295],"float32"), 8, axis=1, )
paddle.topk(Tensor([1, 4294967295],"float32"), 900, axis=1, )
paddle.topk(Tensor([1, 4294967295],"float32"), k=1, )
paddle.topk(Tensor([1, 4294967295],"float32"), k=5, )
paddle.topk(Tensor([1, 4294967295],"float32"), k=50, )
paddle.topk(Tensor([1, 4294967297],"float16"), k=5, )
paddle.topk(Tensor([1, 42949673, 100],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 56123, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 61595, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 67908, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 75245, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 83837, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 93991, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([10, 228170138],"float32"), 2, axis=-1, )
paddle.topk(Tensor([10, 228170138],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([10, 429496730],"float32"), 2, axis=-1, )
paddle.topk(Tensor([10, 429496730],"float32"), 799, )
paddle.topk(Tensor([10, 429496730],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([100, 22817014],"float32"), 10, axis=0, )
paddle.topk(Tensor([100, 22817014],"float32"), 9408, axis=1, )
paddle.topk(Tensor([100, 42949673],"float32"), 10, axis=0, )
paddle.topk(Tensor([1000, 2281702],"float32"), 10, axis=0, )
paddle.topk(Tensor([1000, 4294968],"float32"), 10, axis=0, )
paddle.topk(Tensor([10709, 213064],"float32"), 10, axis=0, )
paddle.topk(Tensor([1073741824, 4],"float16"), 2, axis=0, largest=False, )
paddle.topk(Tensor([1073741824, 4],"float16"), 3, axis=1, largest=False, )
paddle.topk(Tensor([1073741824, 4],"float32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([1073741824, 4],"float32"), 3, axis=0, largest=False, )
paddle.topk(Tensor([1073741824, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([1073741824, 4],"float32"), k=1, axis=-1, )
paddle.topk(Tensor([1073741824, 4],"float32"), k=2, axis=0, )
paddle.topk(Tensor([1073741824, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([1073741825, 4],"float16"), 2, axis=0, largest=False, )
paddle.topk(Tensor([1073741825, 4],"float16"), 3, axis=0, largest=False, )
paddle.topk(Tensor([1073741825, 4],"float16"), k=1, axis=-1, )
paddle.topk(Tensor([10737419, 400],"float16"), k=1, )
paddle.topk(Tensor([10737419, 400],"float16"), k=5, )
paddle.topk(Tensor([10737419, 400],"float32"), k=1, )
paddle.topk(Tensor([10737419, 400],"float32"), k=5, )
paddle.topk(Tensor([10845878, 396],"float32"), 8, axis=1, )
paddle.topk(Tensor([111945, 38367],"float32"), 900, axis=1, )
paddle.topk(Tensor([11264, 202572],"float32"), k=1, axis=0, )
paddle.topk(Tensor([1140850690, 2],"float32"), 10, axis=0, )
paddle.topk(Tensor([11408507, 200],"float32"), 4, axis=1, )
paddle.topk(Tensor([11523745, 198],"float32"), 4, axis=1, )
paddle.topk(Tensor([115943, 1, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([11661, 195670],"float32"), k=3, largest=True, )
paddle.topk(Tensor([116623, 36828],"float32"), 900, axis=1, )
paddle.topk(Tensor([12, 190141782],"float32"), k=1, axis=0, )
paddle.topk(Tensor([124, 18400818],"float32"), k=1, )
paddle.topk(Tensor([124, 18400818],"float32"), k=5, )
paddle.topk(Tensor([124, 34636834],"float32"), k=1, )
paddle.topk(Tensor([124, 34636834],"float32"), k=5, )
paddle.topk(Tensor([1269, 1798032],"float32"), 10, axis=0, )
paddle.topk(Tensor([127827, 1, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([128, 17825793],"float32"), k=1, )
paddle.topk(Tensor([128, 17825793],"float32"), k=5, )
paddle.topk(Tensor([128, 33554432],"float16"), k=1, )
paddle.topk(Tensor([128, 33554432],"float16"), k=5, )
paddle.topk(Tensor([128, 33554432],"float32"), k=1, )
paddle.topk(Tensor([128, 33554432],"float32"), k=5, )
paddle.topk(Tensor([128, 33554433],"float16"), k=1, )
paddle.topk(Tensor([13, 175515491],"float32"), k=1, axis=0, )
paddle.topk(Tensor([130, 17551550],"float32"), 2, axis=-1, )
paddle.topk(Tensor([130, 33038210],"float32"), 2, axis=-1, )
paddle.topk(Tensor([13091, 174296],"float32"), 2, axis=-1, )
paddle.topk(Tensor([13091, 328086],"float32"), 2, axis=-1, )
paddle.topk(Tensor([1337, 1706583],"float32"), 10, axis=0, )
paddle.topk(Tensor([134218, 32000],"float32"), 2, axis=1, )
paddle.topk(Tensor([141636, 1, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([142606337, 16],"float32"), 10, axis=0, )
paddle.topk(Tensor([142606337, 16],"float32"), 2, axis=-1, )
paddle.topk(Tensor([142606337, 4, 4],"float32"), 3, axis=0, largest=False, )
paddle.topk(Tensor([1482, 1539610],"float32"), 10, axis=0, )
paddle.topk(Tensor([1488, 1533402],"float32"), 10, axis=0, )
paddle.topk(Tensor([157811, 1, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([16, 12, 11883862],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 13, 10969719],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 15, 9507090],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 16849, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 18416, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 22283, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 39613, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 45474, 3136],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16777216, 256],"float32"), 2, axis=1, )
paddle.topk(Tensor([16778, 256000],"float32"), 2, axis=1, )
paddle.topk(Tensor([1680193, 1358],"float32"), k=3, largest=True, )
paddle.topk(Tensor([17459217, 246],"float32"), 4, axis=1, )
paddle.topk(Tensor([176923, 1, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([17826, 128000],"float32"), 8, axis=1, )
paddle.topk(Tensor([17972, 15, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([182, 12536821],"float32"), 2, axis=-1, )
paddle.topk(Tensor([182, 23598722],"float32"), 2, axis=-1, )
paddle.topk(Tensor([18550418, 123],"float32"), 2, axis=1, )
paddle.topk(Tensor([188633, 12096],"float32"), 300, axis=1, )
paddle.topk(Tensor([190141782, 12],"float32"), 10, axis=0, )
paddle.topk(Tensor([19501722, 1, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([195939, 11645],"float32"), 900, axis=1, )
paddle.topk(Tensor([1973791, 1, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([2, 1073741825],"float64"), k=1, axis=-1, )
paddle.topk(Tensor([2, 1073741825],"int64"), k=1, axis=-1, )
paddle.topk(Tensor([2, 1140850690],"float32"), 2, axis=-1, )
paddle.topk(Tensor([2, 1140850690],"float32"), 2, axis=1, )
paddle.topk(Tensor([2, 1140850690],"float32"), 4, axis=1, )
paddle.topk(Tensor([2, 1140850690],"float32"), 51, axis=1, largest=False, )
paddle.topk(Tensor([2, 1140850690],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([2, 2, 1073741824],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 2, 536870913],"int64"), k=1, axis=2, )
paddle.topk(Tensor([2, 2147483648],"float32"), 2, axis=-1, )
paddle.topk(Tensor([2, 2147483648],"float32"), 2, axis=1, )
paddle.topk(Tensor([2, 2147483648],"float32"), 300, axis=-1, )
paddle.topk(Tensor([2, 2147483648],"float32"), 4, axis=1, )
paddle.topk(Tensor([2, 2147483648],"float32"), 51, axis=1, largest=False, )
paddle.topk(Tensor([2, 2147483648],"float32"), 799, )
paddle.topk(Tensor([2, 2147483648],"float32"), 900, axis=1, )
paddle.topk(Tensor([2, 2147483648],"float32"), 9408, axis=1, )
paddle.topk(Tensor([2, 2147483648],"float32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 2147483648],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([2, 2147483648],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 2147483649],"float16"), k=1, axis=-1, )
paddle.topk(Tensor([2, 268435457, 4],"int64"), k=1, axis=2, )
paddle.topk(Tensor([2, 285212673, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([2, 285212673, 4],"int64"), k=1, axis=2, )
paddle.topk(Tensor([2, 536870912, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([20, 114085069],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([20, 214748365],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([200, 11408507],"float32"), 9408, axis=1, )
paddle.topk(Tensor([200, 21474837],"float32"), 9408, axis=1, )
paddle.topk(Tensor([205393, 11109],"float32"), 300, axis=1, )
paddle.topk(Tensor([2084936, 1030],"float64"), k=1, axis=-1, )
paddle.topk(Tensor([21126865, 1, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([2147483648, 2],"float32"), 10, axis=0, )
paddle.topk(Tensor([21474837, 200],"float32"), 4, axis=1, )
paddle.topk(Tensor([21691755, 198],"float32"), 4, axis=1, )
paddle.topk(Tensor([2206675, 1034],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2213096, 1031],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2228225, 1, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([22369622, 102],"float32"), k=1, )
paddle.topk(Tensor([22369622, 102],"float32"), k=5, )
paddle.topk(Tensor([224489, 10164],"float32"), 300, axis=1, )
paddle.topk(Tensor([22665, 13, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([2272611, 1004],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2277148, 1002],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2279422, 1001],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2281701379, 1],"float32"), 10, axis=0, )
paddle.topk(Tensor([2281701379],"float32"), 1, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 10, )
paddle.topk(Tensor([2281701379],"float32"), 100, )
paddle.topk(Tensor([2281701379],"float32"), 1000, )
paddle.topk(Tensor([2281701379],"float32"), 11, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 13, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 20, )
paddle.topk(Tensor([2281701379],"float32"), 2000, )
paddle.topk(Tensor([2281701379],"float32"), 21, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 3, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 392001, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 5742, )
paddle.topk(Tensor([2281701379],"float32"), 600, )
paddle.topk(Tensor([2281701379],"float32"), 7, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), 8, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"float32"), k=1, )
paddle.topk(Tensor([2281701379],"float32"), k=6, )
paddle.topk(Tensor([2281701379],"int32"), 13, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"int32"), 21, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"int64"), 13, axis=0, largest=False, )
paddle.topk(Tensor([2281701379],"int64"), 21, axis=0, largest=False, )
paddle.topk(Tensor([228170138, 10],"float32"), 10, axis=0, )
paddle.topk(Tensor([228170138, 10],"float32"), 6, axis=1, largest=False, )
paddle.topk(Tensor([22817014, 1, 100],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([22817014, 100],"float32"), 2, axis=1, )
paddle.topk(Tensor([22817014, 100],"float32"), 51, axis=1, largest=False, )
paddle.topk(Tensor([2281702, 1000],"float32"), k=1, )
paddle.topk(Tensor([2281702, 1000],"float32"), k=5, )
paddle.topk(Tensor([2282, 1000216],"float32"), 8, axis=1, )
paddle.topk(Tensor([268435456, 16],"float32"), 10, axis=0, )
paddle.topk(Tensor([268435456, 16],"float32"), 2, axis=-1, )
paddle.topk(Tensor([268435456, 4, 4],"float32"), 3, axis=0, largest=False, )
paddle.topk(Tensor([268435457, 2, 4],"int64"), k=1, axis=2, )
paddle.topk(Tensor([268435457, 4, 2],"float64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([268435457, 4, 2],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([271632, 8400],"float32"), 300, axis=1, )
paddle.topk(Tensor([285212673, 2, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([285212673, 2, 4],"int64"), k=1, axis=2, )
paddle.topk(Tensor([285212673, 4, 2],"float32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([285212673, 4, 2],"int32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([285212673, 4, 2],"int64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([285212673, 8],"float32"), 2, axis=-1, )
paddle.topk(Tensor([285213, 8000],"float32"), 799, )
paddle.topk(Tensor([29710, 12, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([3, 1431655765],"float16"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 1431655765],"float16"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 1431655765],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 1431655765],"float32"), 6, axis=1, largest=False, )
paddle.topk(Tensor([3, 1431655765],"float32"), 799, )
paddle.topk(Tensor([3, 1431655766],"float16"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 357913942, 2],"float64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 357913942, 2],"float64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 357913942, 2],"float64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 357913942, 2],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 357913942, 2],"int64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 380283564, 2],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 380283564, 2],"int32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 380283564, 2],"int64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 4, 178956971],"float64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 178956971],"int64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 178956971],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 190141782],"float32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 190141782],"int32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 190141782],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 357913942],"float16"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 357913942],"float32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 4, 357913942],"int32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 715827883, 2],"float16"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 715827883, 2],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 715827883, 2],"int32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 715827883],"float64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 760567127],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 760567127],"float32"), 6, axis=1, largest=False, )
paddle.topk(Tensor([30, 143165577],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([30, 76056713],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([3029, 753286],"float32"), k=3, largest=True, )
paddle.topk(Tensor([314, 103, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([3150, 11, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([335348, 6804],"float32"), 300, axis=1, )
paddle.topk(Tensor([33555, 128000],"float32"), 8, axis=1, )
paddle.topk(Tensor([34918434, 123],"float32"), 2, axis=1, )
paddle.topk(Tensor([355074, 12096],"float32"), 300, axis=1, )
paddle.topk(Tensor([35652, 64000],"float32"), 4, axis=1, )
paddle.topk(Tensor([357634, 6380],"float32"), 300, axis=1, )
paddle.topk(Tensor([357913942, 12],"float32"), 10, axis=0, )
paddle.topk(Tensor([36709123, 1, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([368826, 11645],"float32"), 900, axis=1, )
paddle.topk(Tensor([3715370, 1, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([38028357, 60],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([38347923, 7, 8],"float64"), k=2, )
paddle.topk(Tensor([38347923, 7, 8],"float64"), k=2, axis=-1, largest=False, )
paddle.topk(Tensor([38347923, 7, 8],"float64"), k=2, axis=1, )
paddle.topk(Tensor([38347923, 7, 8],"float64"), k=2, axis=1, largest=False, )
paddle.topk(Tensor([38347923, 7, 8],"float64"), k=2, axis=1, sorted=False, )
paddle.topk(Tensor([386621, 11109],"float32"), 300, axis=1, )
paddle.topk(Tensor([3887, 587009],"float32"), k=3, largest=True, )
paddle.topk(Tensor([390451573, 11],"float16"), k=Tensor([1],"int64"), )
paddle.topk(Tensor([39768216, 1, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 1073741824],"float32"), 300, axis=-1, )
paddle.topk(Tensor([4, 1073741824],"float32"), 799, )
paddle.topk(Tensor([4, 1073741824],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([4, 142606337, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([4, 268435456, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([4, 570425345],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([4153741, 1034],"float32"), k=1, axis=0, )
paddle.topk(Tensor([4165827, 1031],"float32"), k=1, axis=0, )
paddle.topk(Tensor([4169872, 1030],"float16"), k=1, axis=-1, )
paddle.topk(Tensor([4194304, 1, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([42107523, 102],"float32"), k=1, )
paddle.topk(Tensor([42107523, 102],"float32"), k=5, )
paddle.topk(Tensor([42254, 15, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([422567, 10164],"float32"), 300, axis=1, )
paddle.topk(Tensor([4277856, 1004],"float32"), k=1, axis=0, )
paddle.topk(Tensor([4286395, 1002],"float32"), k=1, axis=0, )
paddle.topk(Tensor([4290677, 1001],"float32"), k=1, axis=0, )
paddle.topk(Tensor([4294967295, 1],"float32"), 10, axis=0, )
paddle.topk(Tensor([4294967297],"float16"), 11, axis=0, largest=False, )
paddle.topk(Tensor([4294967297],"float16"), 21, axis=0, largest=False, )
paddle.topk(Tensor([42949673, 1, 100],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([42949673, 100],"float32"), 2, axis=1, )
paddle.topk(Tensor([42949673, 100],"float32"), 51, axis=1, largest=False, )
paddle.topk(Tensor([429496730, 10],"float32"), 10, axis=0, )
paddle.topk(Tensor([429496730, 10],"float32"), 6, axis=1, largest=False, )
paddle.topk(Tensor([4294968, 1000],"float16"), k=1, )
paddle.topk(Tensor([4294968, 1000],"float16"), k=5, )
paddle.topk(Tensor([4294968, 1000],"float32"), k=1, )
paddle.topk(Tensor([4294968, 1000],"float32"), k=5, )
paddle.topk(Tensor([4295, 1000216],"float32"), 8, axis=1, )
paddle.topk(Tensor([4456449, 512],"float32"), 4, axis=1, )
paddle.topk(Tensor([4457, 512000],"float32"), 4, axis=1, )
paddle.topk(Tensor([45359, 50304],"float32"), k=50, )
paddle.topk(Tensor([484, 116, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([4981881, 458],"float32"), k=3, largest=True, )
paddle.topk(Tensor([5, 429496730],"float64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([5, 456340276],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([5, 858993459],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([5, 858993460],"float16"), 3, axis=1, largest=False, )
paddle.topk(Tensor([536870912, 2, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([536870912, 4, 2],"float32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([536870912, 4, 2],"int32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([536870912, 8],"float32"), 2, axis=-1, )
paddle.topk(Tensor([536870913, 4, 2],"float16"), 2, axis=0, largest=False, )
paddle.topk(Tensor([536870913, 4],"float64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([536870913, 4],"float64"), k=1, axis=-1, )
paddle.topk(Tensor([536870913, 4],"int64"), k=1, axis=-1, )
paddle.topk(Tensor([536871, 8000],"float32"), 799, )
paddle.topk(Tensor([55968, 13, 3136],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([5633831, 405],"float32"), 10, axis=0, )
paddle.topk(Tensor([570425345, 4],"float32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([570425345, 4],"float32"), 3, axis=0, largest=False, )
paddle.topk(Tensor([570425345, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([570425345, 4],"float32"), k=1, axis=-1, )
paddle.topk(Tensor([570425345, 4],"float32"), k=2, axis=0, )
paddle.topk(Tensor([570425345, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([570425345, 4],"int64"), k=1, axis=-1, )
paddle.topk(Tensor([5704254, 400],"float32"), k=1, )
paddle.topk(Tensor([5704254, 400],"float32"), k=5, )
paddle.topk(Tensor([5761873, 396],"float32"), 8, axis=1, )
paddle.topk(Tensor([59471, 38367],"float32"), 900, axis=1, )
paddle.topk(Tensor([6, 44739243, 8],"float64"), k=2, )
paddle.topk(Tensor([6, 44739243, 8],"float64"), k=2, axis=-1, largest=False, )
paddle.topk(Tensor([6, 44739243, 8],"float64"), k=2, axis=1, )
paddle.topk(Tensor([6, 44739243, 8],"float64"), k=2, axis=1, largest=False, )
paddle.topk(Tensor([6, 44739243, 8],"float64"), k=2, axis=1, sorted=False, )
paddle.topk(Tensor([6, 7, 102261127],"float16"), k=2, )
paddle.topk(Tensor([6, 7, 102261127],"float16"), k=2, axis=-1, largest=False, )
paddle.topk(Tensor([6, 7, 102261127],"float16"), k=2, axis=1, )
paddle.topk(Tensor([6, 7, 102261127],"float16"), k=2, axis=1, largest=False, )
paddle.topk(Tensor([6, 7, 102261127],"float16"), k=2, axis=1, sorted=False, )
paddle.topk(Tensor([6, 7, 51130564],"float64"), k=2, )
paddle.topk(Tensor([6, 7, 51130564],"float64"), k=2, axis=-1, largest=False, )
paddle.topk(Tensor([6, 7, 51130564],"float64"), k=2, axis=1, )
paddle.topk(Tensor([6, 7, 51130564],"float64"), k=2, axis=1, largest=False, )
paddle.topk(Tensor([6, 7, 51130564],"float64"), k=2, axis=1, sorted=False, )
paddle.topk(Tensor([6, 89478486, 8],"float16"), k=2, )
paddle.topk(Tensor([6, 89478486, 8],"float16"), k=2, axis=-1, largest=False, )
paddle.topk(Tensor([6, 89478486, 8],"float16"), k=2, axis=1, )
paddle.topk(Tensor([6, 89478486, 8],"float16"), k=2, axis=1, largest=False, )
paddle.topk(Tensor([6, 89478486, 8],"float16"), k=2, axis=1, sorted=False, )
paddle.topk(Tensor([6, 89478486, 8],"float16"), k=Tensor([1],"int64"), axis=1, )
paddle.topk(Tensor([61595, 1, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([61956, 36828],"float32"), 900, axis=1, )
paddle.topk(Tensor([631242, 6804],"float32"), 300, axis=1, )
paddle.topk(Tensor([666, 113, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([67109, 64000],"float32"), 4, axis=1, )
paddle.topk(Tensor([673193, 6380],"float32"), 300, axis=1, )
paddle.topk(Tensor([67908, 1, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([6852, 333018],"float32"), k=1, axis=0, )
paddle.topk(Tensor([71304, 32000],"float32"), 2, axis=1, )
paddle.topk(Tensor([71582789, 60],"float32"), k=4, axis=-1, sorted=True, )
paddle.topk(Tensor([75245, 1, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([76695845, 7, 8],"float16"), k=2, )
paddle.topk(Tensor([76695845, 7, 8],"float16"), k=2, axis=-1, largest=False, )
paddle.topk(Tensor([76695845, 7, 8],"float16"), k=2, axis=1, )
paddle.topk(Tensor([76695845, 7, 8],"float16"), k=2, axis=1, largest=False, )
paddle.topk(Tensor([76695845, 7, 8],"float16"), k=2, axis=1, sorted=False, )
paddle.topk(Tensor([7745, 294624],"float32"), k=1, axis=0, )
paddle.topk(Tensor([83837, 1, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([8389, 512000],"float32"), 4, axis=1, )
paddle.topk(Tensor([8448, 270096],"float32"), k=1, axis=0, )
paddle.topk(Tensor([85381, 50304],"float32"), k=50, )
paddle.topk(Tensor([8912897, 256],"float32"), 2, axis=1, )
paddle.topk(Tensor([8913, 256000],"float32"), 2, axis=1, )
paddle.topk(Tensor([9275209, 246],"float32"), 4, axis=1, )
paddle.topk(Tensor([93991, 1, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([983, 108, 21504],"float32"), 13, axis=-1, largest=True, )
paddle.topk(x=Tensor([10737419, 400],"float16"), k=4, )
paddle.topk(x=Tensor([16777216, 256],"float32"), k=8, )
paddle.topk(x=Tensor([17825793, 128],"float32"), k=4, )
paddle.topk(x=Tensor([33554432, 128],"float32"), k=4, )
paddle.topk(x=Tensor([35651585, 64],"float32"), k=4, )
paddle.topk(x=Tensor([4, 1073741824],"float32"), k=4, )
paddle.topk(x=Tensor([4, 1073741824],"float32"), k=8, )
paddle.topk(x=Tensor([4, 570425345],"float32"), k=4, )
paddle.topk(x=Tensor([4, 570425345],"float32"), k=8, )
paddle.topk(x=Tensor([5368710, 400],"float64"), k=4, )
paddle.topk(x=Tensor([67108864, 64],"float32"), k=4, )
paddle.topk(x=Tensor([8, 268435457],"float64"), k=4, )
paddle.topk(x=Tensor([8, 536870913],"float16"), k=4, )
paddle.topk(x=Tensor([8912897, 256],"float32"), k=8, )
paddle.transpose(Tensor([1, 1, 44739243, 96],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 536870913, 8],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 1, 8, 536870913],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 10, 429496730],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([1, 134217729, 32],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([1, 2147483649, 2],"float16"), list[0,2,1,], )
paddle.transpose(Tensor([1, 4294967297],"float16"), list[1,0,], )
paddle.transpose(Tensor([13, 165191050, 2],"float16"), perm=list[2,0,1,], )
paddle.transpose(Tensor([16777217, 4, 1, 64],"float16"), list[1,0,2,3,], )
paddle.transpose(Tensor([306783379, 7, 2],"float16"), perm=list[2,0,1,], )
paddle.transpose(Tensor([5592406, 1, 8, 96],"float16"), list[0,2,1,3,], )
paddle.transpose(x=Tensor([1073741825, 1, 2, 2],"float16"), perm=list[1,0,2,3,], )
paddle.transpose(x=Tensor([3, 1, 2, 715827883],"float16"), perm=list[1,0,2,3,], )
paddle.transpose(x=Tensor([3, 1, 715827883, 2],"float16"), perm=list[1,0,2,3,], )
paddle.trapezoid(Tensor([2281701379],"float32"), dx=2.0, )
paddle.trapezoid(y=Tensor([1073741825, 4],"float16"), x=Tensor([1073741825, 4],"float16"), )
paddle.trapezoid(y=Tensor([1431655766, 3],"float16"), x=Tensor([1431655766, 3],"float16"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 1140850690],"float32"), x=Tensor([2, 1140850690],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([3, 3, 477218589],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([357913942, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([4, 1073741825],"float16"), x=Tensor([4, 1073741825],"float16"), )
paddle.trapezoid(y=Tensor([760567127, 3],"float32"), x=Tensor([760567127, 3],"float32"), dx=None, axis=-1, )
paddle.tril(Tensor([1, 1, 2281701379, 1],"float32"), )
paddle.tril(Tensor([1, 2281701379, 1, 1],"float32"), )
paddle.tril(Tensor([10, 228170138, 1],"float32"), 0, )
paddle.tril(Tensor([114085069, 20, 1],"float32"), 0, )
paddle.tril(Tensor([1321936, 1, 57, 57],"float16"), )
paddle.tril(Tensor([143165577, 30],"float16"), )
paddle.tril(Tensor([1472897, 1, 54, 54],"float16"), )
paddle.tril(Tensor([148102321, 29],"float16"), )
paddle.tril(Tensor([1529003, 1, 53, 53],"float16"), )
paddle.tril(Tensor([153391690, 28],"float16"), )
paddle.tril(Tensor([1651276, 1, 51, 51],"float16"), )
paddle.tril(Tensor([165191050, 26],"float16"), )
paddle.tril(Tensor([18512791, 232],"float16"), )
paddle.tril(Tensor([186737709, 23],"float16"), )
paddle.tril(Tensor([1944304, 1, 47, 47],"float16"), )
paddle.tril(Tensor([2, 1, 1140850690, 1],"bool"), )
paddle.tril(Tensor([2, 1, 1140850690, 1],"float32"), )
paddle.tril(Tensor([2, 1, 2147483649, 1],"float16"), )
paddle.tril(Tensor([2, 1, 37675152, 57],"float16"), )
paddle.tril(Tensor([2, 1, 39768216, 54],"float16"), )
paddle.tril(Tensor([2, 1, 40518560, 53],"float16"), )
paddle.tril(Tensor([2, 1, 42107523, 51],"float16"), )
paddle.tril(Tensor([2, 1, 45691142, 47],"float16"), )
paddle.tril(Tensor([2, 1, 52377650, 41],"float16"), )
paddle.tril(Tensor([2, 1, 53687092, 40],"float16"), )
paddle.tril(Tensor([2, 1, 55063684, 39],"float16"), )
paddle.tril(Tensor([2, 1, 56512728, 38],"float16"), )
paddle.tril(Tensor([2, 1140850690, 1, 1],"bool"), )
paddle.tril(Tensor([2, 1140850690, 1, 1],"float32"), )
paddle.tril(Tensor([2, 1277504, 41, 41],"float16"), )
paddle.tril(Tensor([2, 1342178, 40, 40],"float16"), )
paddle.tril(Tensor([2, 1411890, 39, 39],"float16"), )
paddle.tril(Tensor([2, 1487178, 38, 38],"float16"), )
paddle.tril(Tensor([2, 2147483649, 1, 1],"float16"), )
paddle.tril(Tensor([2, 660968, 57, 57],"float16"), )
paddle.tril(Tensor([2, 736449, 54, 54],"float16"), )
paddle.tril(Tensor([2, 764502, 53, 53],"float16"), )
paddle.tril(Tensor([2, 825638, 51, 51],"float16"), )
paddle.tril(Tensor([2, 972152, 47, 47],"float16"), )
paddle.tril(Tensor([204522253, 21],"float16"), )
paddle.tril(Tensor([2281701379, 1, 1, 1],"bool"), )
paddle.tril(Tensor([2281701379, 1, 1, 1],"float32"), )
paddle.tril(Tensor([2281701379, 1],"float32"), diagonal=0, )
paddle.tril(Tensor([2555008, 1, 41, 41],"float16"), )
paddle.tril(Tensor([2684355, 1, 40, 40],"float16"), )
paddle.tril(Tensor([2823779, 1, 39, 39],"float16"), )
paddle.tril(Tensor([2974355, 1, 38, 38],"float16"), )
paddle.tril(Tensor([38347923, 112],"float16"), )
paddle.tril(Tensor([38693400, 111],"float16"), )
paddle.tril(Tensor([390451573, 11],"float16"), )
paddle.tril(Tensor([39045158, 110],"float16"), )
paddle.tril(Tensor([39403370, 109],"float16"), )
paddle.tril(Tensor([4, 1, 570425345, 1],"float32"), )
paddle.tril(Tensor([4, 570425345, 1, 1],"float32"), )
paddle.tril(Tensor([40139882, 107],"float16"), )
paddle.tril(Tensor([4294967297, 1, 1, 1],"float16"), )
paddle.tril(Tensor([760567127, 3],"bool"), )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=-1, )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=0, )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=1, )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=5, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=-1, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=-5, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=0, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=1, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=5, )
paddle.triu(Tensor([1, 1, 1, 4294967297],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 2048, 2097153],"float16"), )
paddle.triu(Tensor([1, 1025, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 286331154, 1, 15],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 306783379, 1, 14],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 330382100, 1, 13],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 357913942, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 390451573, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 429496730, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([1025, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([114085069, 20, 1],"float32"), 0, )
paddle.triu(Tensor([2, 1, 1, 2147483649],"float16"), )
paddle.triu(Tensor([2, 17602325, 1, 122],"float16"), )
paddle.triu(Tensor([2, 17747799, 1, 121],"float16"), )
paddle.triu(Tensor([2, 17895698, 1, 120],"float16"), )
paddle.triu(Tensor([2, 18046082, 1, 119],"float16"), )
paddle.triu(Tensor([2, 18199014, 1, 118],"float16"), )
paddle.triu(Tensor([2, 18354562, 1, 117],"float16"), )
paddle.triu(Tensor([2, 18512791, 1, 116],"float16"), )
paddle.triu(Tensor([2, 18673771, 1, 115],"float16"), )
paddle.triu(Tensor([2, 18837576, 1, 114],"float16"), )
paddle.triu(Tensor([2, 19004281, 1, 113],"float16"), )
paddle.triu(Tensor([2, 19173962, 1, 112],"float16"), )
paddle.triu(Tensor([2, 19346700, 1, 111],"float16"), )
paddle.triu(Tensor([2, 19522579, 1, 110],"float16"), )
paddle.triu(Tensor([2, 19701685, 1, 109],"float16"), )
paddle.triu(Tensor([2, 19884108, 1, 108],"float16"), )
paddle.triu(Tensor([2, 20069941, 1, 107],"float16"), )
paddle.triu(Tensor([2, 20259280, 1, 106],"float16"), )
paddle.triu(Tensor([2, 20452226, 1, 105],"float16"), )
paddle.triu(Tensor([2, 20648882, 1, 104],"float16"), )
paddle.triu(Tensor([2, 20849356, 1, 103],"float16"), )
paddle.triu(Tensor([2, 21053762, 1, 102],"float16"), )
paddle.triu(Tensor([2, 21262215, 1, 101],"float16"), )
paddle.triu(Tensor([2, 21474837, 1, 100],"float16"), )
paddle.triu(Tensor([286331154, 1, 1, 15],"float16"), diagonal=1, )
paddle.triu(Tensor([306783379, 1, 1, 14],"float16"), diagonal=1, )
paddle.triu(Tensor([330382100, 1, 1, 13],"float16"), diagonal=1, )
paddle.triu(Tensor([35204650, 1, 1, 122],"float16"), )
paddle.triu(Tensor([35495598, 1, 1, 121],"float16"), )
paddle.triu(Tensor([357913942, 1, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([35791395, 1, 1, 120],"float16"), )
paddle.triu(Tensor([36092163, 1, 1, 119],"float16"), )
paddle.triu(Tensor([36398028, 1, 1, 118],"float16"), )
paddle.triu(Tensor([36709123, 1, 1, 117],"float16"), )
paddle.triu(Tensor([37025581, 1, 1, 116],"float16"), )
paddle.triu(Tensor([37347542, 1, 1, 115],"float16"), )
paddle.triu(Tensor([37675152, 1, 1, 114],"float16"), )
paddle.triu(Tensor([38008561, 1, 1, 113],"float16"), )
paddle.triu(Tensor([38347923, 1, 1, 112],"float16"), )
paddle.triu(Tensor([38693400, 1, 1, 111],"float16"), )
paddle.triu(Tensor([390451573, 1, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([39045158, 1, 1, 110],"float16"), )
paddle.triu(Tensor([39403370, 1, 1, 109],"float16"), )
paddle.triu(Tensor([39768216, 1, 1, 108],"float16"), )
paddle.triu(Tensor([40139882, 1, 1, 107],"float16"), )
paddle.triu(Tensor([40518560, 1, 1, 106],"float16"), )
paddle.triu(Tensor([40904451, 1, 1, 105],"float16"), )
paddle.triu(Tensor([41297763, 1, 1, 104],"float16"), )
paddle.triu(Tensor([41698712, 1, 1, 103],"float16"), )
paddle.triu(Tensor([42107523, 1, 1, 102],"float16"), )
paddle.triu(Tensor([42524429, 1, 1, 101],"float16"), )
paddle.triu(Tensor([42949673, 1, 1, 100],"float16"), )
paddle.triu(Tensor([429496730, 1, 1, 10],"float16"), diagonal=1, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=-1, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=-5, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=0, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=-1, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=-5, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=5, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=-1, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=-5, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=0, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=1, )
paddle.trunc(Tensor([10, 20, 11408507],"float32"), )
paddle.trunc(Tensor([10, 228170138, 1],"float32"), )
paddle.trunc(Tensor([114085069, 20, 1],"float32"), )
paddle.trunc(Tensor([114085069, 20],"float32"), )
paddle.trunc(Tensor([20, 114085069],"float32"), )
paddle.trunc(input=Tensor([119304648, 6, 6],"float16"), )
paddle.trunc(input=Tensor([19884108, 6, 6, 6],"float16"), )
paddle.trunc(input=Tensor([3, 6, 6, 6, 6628036],"float16"), )
paddle.trunc(input=Tensor([3, 6, 6, 6628036, 6],"float16"), )
paddle.trunc(input=Tensor([3, 6, 6628036, 6, 6],"float16"), )
paddle.trunc(input=Tensor([3, 6628036, 6, 6, 6],"float16"), )
paddle.trunc(input=Tensor([3314018, 6, 6, 6, 6],"float16"), )
paddle.trunc(input=Tensor([6, 119304648, 6],"float16"), )
paddle.trunc(input=Tensor([6, 19884108, 6, 6],"float16"), )
paddle.trunc(input=Tensor([6, 6, 119304648],"float16"), )
paddle.trunc(input=Tensor([6, 6, 19884108, 6],"float16"), )
paddle.trunc(input=Tensor([6, 6, 6, 19884108],"float16"), )
paddle.unbind(Tensor([4, 2, 285212673],"float32"), axis=-1, )
paddle.unbind(Tensor([4, 2, 285212673],"float32"), axis=2, )
paddle.unfold(Tensor([5, 858993459],"float16"), 0, 5, 1, )
paddle.unfold(Tensor([5, 858993459],"float32"), 0, 5, 1, )
paddle.unfold(Tensor([5, 858993459],"int32"), 0, 5, 1, )
paddle.unfold(Tensor([5, 858993460],"float16"), 0, 5, 1, )
paddle.unique_consecutive(x=Tensor([570425345, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unstack(Tensor([1, 4294967297],"float16"), 0, )
paddle.unstack(Tensor([134217729, 4, 8],"float16"), )
paddle.unstack(Tensor([2147483648, 2],"float32"), 1, )
paddle.unstack(Tensor([2147483649, 2],"float16"), 1, )
paddle.unstack(Tensor([3, 760567127],"float32"), 1, )
paddle.unstack(x=Tensor([13, 165191050, 2],"float16"), axis=-1, )
paddle.unstack(x=Tensor([306783379, 7, 2],"float16"), axis=-1, )
paddle.vecdot(Tensor([1073741825, 4],"float16"), Tensor([1073741825, 4],"float16"), axis=-1, )
paddle.vecdot(Tensor([1140850690, 2],"float32"), Tensor([2],"float32"), axis=-1, )
paddle.vecdot(Tensor([2, 3, 715827883],"float16"), Tensor([2, 3, 715827883],"float16"), axis=-1, )
paddle.vecdot(Tensor([2, 536870913, 4],"float16"), Tensor([2, 536870913, 4],"float16"), axis=-1, )
paddle.vecdot(Tensor([214748365, 4, 5],"float16"), Tensor([214748365, 4, 5],"float16"), axis=1, )
paddle.vecdot(Tensor([2],"float32"), Tensor([1140850690, 2],"float32"), axis=-1, )
paddle.vecdot(Tensor([3, 1431655766],"float16"), Tensor([3, 1431655766],"float16"), axis=-1, )
paddle.vecdot(Tensor([3, 286331154, 5],"float16"), Tensor([3, 286331154, 5],"float16"), axis=1, )
paddle.vecdot(Tensor([3, 4, 357913942],"float16"), Tensor([3, 4, 357913942],"float16"), axis=1, )
paddle.vecdot(Tensor([3, 760567127],"float32"), Tensor([3, 760567127],"float32"), axis=-1, )
paddle.vecdot(Tensor([357913942, 3, 4],"float16"), Tensor([357913942, 3, 4],"float16"), axis=-1, )
paddle.vecdot(Tensor([570425345, 4],"float32"), Tensor([570425345, 4],"float32"), axis=-1, )
paddle.vision.ops.box_coder(Tensor([30, 4],"float32"), list[0.12371375411748886,0.7415851950645447,0.40236398577690125,0.6756224632263184,], Tensor([30, 35791395, 4],"float32"), "decode_center_size", False, axis=1, )
paddle.vision.ops.box_coder(prior_box=Tensor([80, 4],"float32"), prior_box_var=Tensor([80, 4],"float32"), target_box=Tensor([13421773, 80, 4],"float32"), code_type="decode_center_size", box_normalized=False, )
paddle.vision.ops.box_coder(prior_box=Tensor([80, 4],"float32"), prior_box_var=tuple(1,2,3,4,), target_box=Tensor([13421773, 80, 4],"float32"), code_type="decode_center_size", box_normalized=False, )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([84507459, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([84507459, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([63380594, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 45634028, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 45634028, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 45634028, 5, 5],"float32"), Tensor([2, 45634028, 5, 5],"float32"), Tensor([40, 45634028, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 57042535, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 57042535, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([63380594, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([63380594, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([5070448, 3, 5, 5],"float32"), Tensor([5070448, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([5070448, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([5070448, 3, 5, 5],"float32"), Tensor([5070448, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([5070448, 3, 5, 5],"float32"), Tensor([5070448, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([5070448, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 3, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 4, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 8, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 8, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([7922575, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1014090, 5, 5, 5],"float32"), offset=Tensor([1014090, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([1014090, 5, 5, 5],"float32"), offset=Tensor([1014090, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([1014090, 5, 5, 5],"float32"), offset=Tensor([1014090, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=Tensor([1014090, 45, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([11142, 512, 20, 20],"float32"), offset=Tensor([11142, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([11142, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 10, 10],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([495161, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 20, 20],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([495161, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 2, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 2, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 2, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([14084577, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 3, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 3, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 3, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([14084577, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1725, 128, 76, 136],"float32"), offset=Tensor([1725, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([1725, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1783, 128, 100, 100],"float32"), offset=Tensor([1783, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([1783, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([2586964, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([2586964, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([30422686, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([3621749, 3, 5, 5],"float32"), offset=Tensor([3621749, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([3621749, 3, 5, 5],"float32"), offset=Tensor([3621749, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([3621749, 3, 5, 5],"float32"), offset=Tensor([3621749, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([3621749, 9, 5, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([3869, 32, 64, 64],"float32"), offset=Tensor([3869, 144, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([3869, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 22817014, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 22817014, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 22817014, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 22817014, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 22817014, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 22817014, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([44565, 512, 10, 10],"float32"), offset=Tensor([44565, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([44565, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([446, 128, 200, 200],"float32"), offset=Tensor([446, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([446, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([446, 128, 200, 200],"float32"), offset=Tensor([446, 36, 100, 100],"float32"), weight=Tensor([446, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([446, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([5070448, 5, 5, 5],"float32"), offset=Tensor([5070448, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, )
paddle.vision.ops.deform_conv2d(x=Tensor([5070448, 5, 5, 5],"float32"), offset=Tensor([5070448, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([5070448, 5, 5, 5],"float32"), offset=Tensor([5070448, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=Tensor([5070448, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([7737, 32, 64, 64],"float32"), offset=Tensor([7737, 72, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=4, groups=1, mask=Tensor([7737, 36, 64, 64],"float32"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([4096, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([2147483649],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([410, 10475530],"float32"), 2, 5, 4, 224, rois_num=Tensor([4],"int64"), )
paddle.vision.ops.generate_proposals(Tensor([1, 16777216//4, 16, 16],"float32"), Tensor([1, 16777216, 16, 16],"float32"), Tensor([1, 2],"float32"), Tensor([16, 16, 4, 4],"float32"), Tensor([16, 16, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 4, 16, 67108864],"float32"), Tensor([1, 16, 16, 67108864],"float32"), Tensor([1, 2],"float32"), Tensor([16, 67108864, 4, 4],"float32"), Tensor([16, 67108864, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 4, 67108864, 16],"float32"), Tensor([1, 16, 67108864, 16],"float32"), Tensor([1, 2],"float32"), Tensor([67108864, 16, 4, 4],"float32"), Tensor([67108864, 16, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1901418, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 3802836, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 3802836, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 4225373, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 7605672, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 950709, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 950709, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([142606337, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([16506, 256, 20, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([16506, 256, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([16506, 256, 20, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([233, 256, 160, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([233, 256, 160, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([258, 256, 160, 216],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([258, 256, 160, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([29710, 256, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([310, 256, 144, 200],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([1, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([4127, 256, 40, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([4127, 256, 40, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([4952, 256, 36, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([734, 1024, 44, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([7428, 256, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([768, 1024, 44, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([82527, 256, 12, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([843, 1024, 42, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([859, 1024, 44, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([8705, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([929, 1024, 40, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_pool(Tensor([8705, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([8705, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(x=Tensor([142606337, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([8705, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.yolo_box(Tensor([2, 14, 19173962, 8],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_box(Tensor([2, 14, 8, 19173962],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_box(Tensor([2, 16, 16777216, 8],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, iou_aware=True, iou_aware_factor=0.5, )
paddle.vision.ops.yolo_loss(Tensor([2863312, 30, 5, 5],"float64"), gt_box=Tensor([2863312, 5, 4],"float64"), gt_label=Tensor([2863312, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=None, use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([2863312, 30, 5, 5],"float64"), gt_box=Tensor([2863312, 5, 4],"float64"), gt_label=Tensor([2863312, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([2863312, 5],"float64"), use_label_smooth=False, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([2863312, 30, 5, 5],"float64"), gt_box=Tensor([2863312, 5, 4],"float64"), gt_label=Tensor([2863312, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([2863312, 5],"float64"), use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([4793491, 14, 8, 8],"float32"), gt_box=Tensor([4793491, 10, 4],"float32"), gt_label=Tensor([4793491, 10],"int32"), anchors=list[10,13,16,30,], anchor_mask=list[0,1,], class_num=2, ignore_thresh=0.7, downsample_ratio=8, use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(x=Tensor([11665, 255, 38, 38],"float32"), gt_box=Tensor([11665, 1, 4],"float32"), gt_label=Tensor([11665, 1],"int32"), gt_score=Tensor([11665, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[3,4,5,], class_num=80, ignore_thresh=0.7, downsample_ratio=16, use_label_smooth=True, )
paddle.vision.ops.yolo_loss(x=Tensor([2917, 255, 76, 76],"float32"), gt_box=Tensor([11665, 1, 4],"float32"), gt_label=Tensor([11665, 1],"int32"), gt_score=Tensor([11665, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=80, ignore_thresh=0.7, downsample_ratio=8, use_label_smooth=True, )
paddle.where(Tensor([2, 2147483648],"bool"), )
paddle.where(Tensor([2, 2147483648],"float32"), )
paddle.where(Tensor([2147483648, 2],"bool"), )
paddle.where(Tensor([214748365, 20],"bool"), )
paddle.where(Tensor([3, 1],"bool"), Tensor([3, 1431655765],"float16"), Tensor([1],"float16"), )
paddle.where(Tensor([328086, 13091],"float32"), )
paddle.where(Tensor([33038210, 130],"float32"), )
paddle.where(Tensor([429496730, 10],"bool"), )
